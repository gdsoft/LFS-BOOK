<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>

<bookinfo xml:base="prologue/bookinfo.xml">
  <title>Linux From Scratch （简体中文版）</title>
  
  <subtitle revision="systemd">Version 8.4-systemd</subtitle>

  <authorgroup>
    <author>
      <firstname>项目创建者：Gerard</firstname>
      <surname>Beekmans</surname>
    </author>
    <author>
      <firstname>总编：Bruce</firstname>
      <surname>Dubbs</surname>
    </author>
    <!--
    <author revision="systemd">
      <firstname>编辑：Douglas R.</firstname>
      <surname>Reno</surname>
    </author>
    -->
    <author revision="systemd">
      <firstname>编辑：DJ</firstname>
      <surname>Lucas</surname>
    </author>
     <author>
      <firstname>翻译：Linux 中国 - LCTT</firstname>
      <surname>- LFS 翻译小组</surname>
    </author>
  </authorgroup>

  <copyright id="copyright">
    <year>1999-2019</year>
    <holder>Gerard Beekmans</holder>
  </copyright>

  <legalnotice>

    <para>Copyright © 1999-2019, Gerard Beekmans</para>

    <para>版权所有。</para>

    <para>本手册根据 <xref linkend="CC"/> 授权。</para>
    <para>手册中的计算机指令可根据 <xref linkend="MIT"/> 摘录。</para>

    <para><trademark class="registered">Linux</trademark> 为 Linus Torvalds 注册商标。</para>

  </legalnotice>

</bookinfo>
<!--
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="prologue/dedication.xml"/>
-->
<preface id="preface" xml:base="prologue/preface.xml">
  <?dbhtml dir="prologue"?>
  <?dbhtml filename="preface.html"?>

  <title>序章</title>

  <sect1 id="pre-foreword">
  <?dbhtml filename="foreword.html"?>

  <title>前言</title>

<para>自 1998 始，我逐渐从学习 Linux 到对其深入了解。仅仅是在我安装完我的第一个 Linux 发行版后，我便迅速地为 Linux 所蕴含的整套理念及其背后的哲学思想所着迷。</para>

<para>总是会有很多的方法来完成一个任务。这对 Linux 的发行版而言也是这样。这些年来，这么多的发行版层出不迭，有的还在，有的已经今非昔比，有的现在也只能在记忆中感怀。它们的行事风格大相径庭，以满足不同受众的需求。也正是因为如此之多不同的发行版想要到达的是同一个目标，我开始意识到自己可以不必再受限于别人做好的发行版。在开始探索 Linux 之前，我们只能忍受各种操作系统的问题，因为我们别无选择。无论你喜欢还是不喜欢，它就在那里。但 Linux 让你拥有了选择的可能。如果你有什么不喜欢的，你可以自由地，甚至倍受鼓舞地去改变它。</para>

<para>我尝试过很多发行版，但还是无法决定该用哪个。这些系统，从它们自身的角度来看，它们都是很棒的系统。这里也并不是在探讨对错问题，这只不过是个人习惯的问题。在各种可选项中，显然没有哪个单一的系统对我而言是完美的。于是我开始着手创建自己的 Linux 系统，以完全满足自己的喜好。</para>

<para>为了使系统真正地属于我，我毅然决定开始从源代码编译所有东西，而不是使用预编译好的二进制包。这个「完美」的 Linux 系统能够拥有不同系统的优点，而不会有它们与之俱来的不足。起初，这种想法让人想都不敢想，但我一直保持着可以构建出这样一个系统的信念。</para>

<para>在梳理了诸如循环依赖和编译错误之类的问题后，我最终构建出了一个订制的 Linux 系统。它运转自如，用起来与当时的那些 Linux 系统一样完美，但它是由我亲手打造的。能组装出这样一个系统让我很满意，而与之相比更棒的，恐怕唯有在软件的各个方面都亲历亲为了，不过这也可算是第二棒的事了。</para>

<para>当我将自己的目标和经验与 Linux 社区的其它成员分享时，引发了大家对这些想法的不断关注。很快人们就清楚地意识到，这样一个定制的 Linux 系统不仅仅可以满足用户的特定需求，还可为程序员和系统管理员提供一个理想的学习机会，以增强他们（原有）的 Linux 技能。出于这个被放大了的兴趣，<emphasis>Linux From Scratch 项目</emphasis>诞生了。</para>

<para>这本 Linux From Scratch 手册是该项目的重中之重。它为你提供了设计和构建自己的系统所需的背景知识和指令。虽然本手册给出了一个模板，一个最后能正常工作的系统，但你可以自由地改变指令以适应自身的需求，从某种程度上说，这是也本项目的一个重要部分。你仍然可以控制一切，我们只是在你起航之前助你一臂之力。</para>

<para>我衷心地希望你能享受构建属于自己的 Linux From Scratch 系统的过程，并对坐拥一个真正属于自己的系统所带来诸多好处能做到甘之如饴。</para>

<literallayout format="linespecific" class="normal">--
Gerard Beekmans
gerard@linuxfromscratch.org</literallayout>

</sect1>
  <sect1 id="pre-audience">
  <?dbhtml filename="audience.html"?>

  <title>致读者</title>

<para>说到为什么要读这本书，我想，原因一定有很多。有些人可能会提出这样的疑问：「都已经有现成的 Linux 系统可以下载和安装了，你为什么还要多此一举的从从头构建一个呢？」</para>

<para>此项目存在的一个重要原因是帮助你了解 Linux 的内部是如何工作的。通过构建 LFS 系统，你可以更好的理解 Linux 的工作原理，以及程序是如何协同工作和相互依赖的。最棒的是，这个学习经历能给你提供自定义 Linux 系统以满足你自己独特需求的能力。</para>

<para>另一个重要的原因是，你对系统本身有更多的控制权，而无需去关心别人的 Linux 是如何实现的。在 LFS 下，你就是主宰，系统的各个方面都需要你亲力亲为。</para>

<para>LFS 可以让你创建极其精简的 Linux 系统。在安装那些常规的 Linux 系统时，你往往会迫不得已而安装那些你用不到的（甚至你都不知道它们是干什么用的）程序。这些程序也许会浪费你的硬件资源。或许你可能会说，现在计算机的资源那么丰富，稍微浪费一些又有什么关系呢。但是你依旧要考虑到可引导 CD、U 盘或者是一些嵌入式的环境，它们对资源高度敏感，这也恰恰是 LFS 所擅长的地方。</para>

<para>另一个优势便是，自定义的 Linux 系统有着更高的安全性。通过从源码构建一个完整的系统，你有权审核所有的代码以及所打入的安全补丁。也就没必要去在等别人编译修复该安全漏洞的二进制程序了。而且，除非你亲自检查了补丁文件并且做了完整的测试，否则你又怎么能确信，新的二进制程序确实是正确的编译且解决了问题呢？</para>

<para>从头构建一个基本可用的 Linux 系统是本书的目标，你即使不打算这么做，也还是能从这本书的内容中有所收获。</para>

<para>支撑你从头构建属于自己的 LFS 系统的原因实在是太多了。但说到最后，其中最重要的一个原因还是教学。随着你的 LFS 经验愈趋熟稔，这些信息和知识真正给你带来的力量，你也便了然于胸了。</para>

</sect1>
  <sect1 id="pre-architecture">
  <?dbhtml filename="architecture.html"?>

  <title>LFS 的目标架构</title>

<para>LFS 当前主要支持 AMD/Intel 的 x86（32 位）和 x86_64（64 位）构架的 CPU。另外，本文档也涉及一些更改以允许 LFS 顺利地在 Power PC 和 ARM CPU 上运行。为了顺利构建 LFS，除了后面几页的内容外，你主要需要一个可以在当前 CPU 上正常运行的 Linux 系统，例如：早先版本的 LFS、Ubuntu、Red Hat/Fedora、SuSE 或者是在你的架构上可以运行的其它发行版。另外注意 32 位的发行版是可以在 64 位的 AMD/Intel 处理器上作为宿主机正常安装和运作的。</para>

<para>这里也说明一下关于 64 位系统的一些情况。与 32 位相比，大体上程序运行的速度虽稍微地快了那么一点点，但体积也稍微的大了那么一点点。以在 Core 2 Duo 处理器上运行的 LFS-6.5 系统为例，以下便是实测数据：</para>

<screen format="linespecific"><computeroutput moreinfo="none">Architecture    Build Time      Build Size
32-bit          198.5 minutes   648 MB
64-bit          190.6 minutes   709 MB</computeroutput></screen>

<para>正如你看到的，64 位程序仅仅比 32 位程序快了 4%，而体积大了 9%。由此可见，单纯的追逐 64 位系统其实并没有太大的必要。但是，假如你的电脑的内存超过了 4 GB 又或者说需要操作大于 4 GB 的数据，64 位系统的优势就比较明显了。</para>

<note><para>上述讨论只适用于对比相同硬件下的构建过程。现代的 64 位系统会比老的 64 位系统更快。LFS 作者建议，如果有机会，尽量在 64 位系统上进行构建。</para></note>

<para>假如按照本文的默认方式构建，那么你将得到一个「纯」64 位系统——这意味着你仅能够执行 64 位的程序。构建「multi-lib」并不是不可以，但是这意味着很多的程序都需要编译两次：一次为 32 位程序编译，一次为 64 位程序编译。不过，本文档并不涉及这部份的内容，因为这些内容会干扰用户学习如何构建一份最基本的 Linux 系统。你可以通过阅读 <ulink url="http://trac.clfs.org/">Cross Linux From Scratch</ulink> 的相关内容获得有关该话题的更多帮助。</para>

<!-- This does not appear to be valid for LFS/BLFS any more
<para>关于 64 位系统，还有一点需要说明。有一些异常老旧的包无法在「纯」64 位系统上构建，或者是需要专门的编译指令。通常出现这样的问题是因为这些包包含有一些与 32 位系统紧密相关的汇编指令。这些包括一些 Xorg 的视频卡驱动（<ulink url="http://xorg.freedesktop.org/releases/individual/driver/">
http://xorg.freedesktop.org/releases/individual/driver/</ulink>），大多数类似的情况都有解决方案，但可能需要特别的方法或者是补丁。</para>
-->

</sect1>
  <sect1 id="pre-standards">
  <?dbhtml filename="standards.html"?>

  <title>LFS 和标准</title>

  <!--<sect2>
    <title/> -->

     <para>LFS 的结构尽可能的遵循 Linux 的标准。主要的标准有：</para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://pubs.opengroup.org/onlinepubs/9699919799/">POSIX.1-2008</ulink>.</para>
      </listitem>
      <listitem>
        <para><ulink url="http://refspecs.linuxfoundation.org/FHS_3.0/fhs/index.html">文件系统层次结构标准（FHS）3.0 版本</ulink></para>

      </listitem>
      <listitem>
        <para><ulink url="http://refspecs.linuxfoundation.org/lsb.shtml">Linux 标准规范（LSB） 5.0 （2015）版本</ulink></para>

        <para>LSB 有四个独立的标准：核心（Core）、桌面（Desktop）、运行时语言（Runtime Languages）和成像（Imaging）。除了通用要求，还有架构特定要求。此外还有两个领域在试行：分别是 Gtk3 和图形（Graphics）。LFS 试图遵从前一节中所讨论的架构要求。</para>

        <note><para>很多人不认同 LSB 的要求。定义它的主要目的是确保私有软件能够在兼容的系统上安装并正常运行。由于 LFS 是基于源代码的，用户对于需要什么软件包有完全的控制权，有很多人就选择不安装 LSB 规范要求的软件包。</para></note>

      </listitem>
    </itemizedlist>

    <para>完全可以创建一个能够通过 LSB 认证测试的完整 LFS 系统，但这需要很多 LFS 范围之外的额外软件包。在 BLFS 中有这些额外软件包的安装说明。</para>

    <variablelist>
      <bridgehead renderas="sect3">由 LFS 提供，用于满足 LSB 要求的软件包</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry>
        <term><emphasis>LSB 核心：</emphasis></term>
        <listitem>
          <para>Bash, Bc, Binutils, Coreutils, Diffutils, File, Findutils, Gawk,
                Grep, Gzip, M4, Man-DB, Ncurses, Procps, Psmisc, Sed,
                Shadow, Tar, Util-linux, Zlib</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 桌面：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 运行时语言：</emphasis></term>
        <listitem>
          <para>Perl</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 成像：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB Gtk3 和 LSB 图形（试用）：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <variablelist>
      <bridgehead renderas="sect3">由 BLFS 提供，用于满足 LSB 要求的软件包</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry>
        <term><emphasis>LSB 核心：</emphasis></term>
        <listitem>
          <para>At, Batch (At 的一部分), Cpio, Ed, Fcrontab, Initd-tools,
          Lsb_release, NSPR, NSS, PAM, Pax, Sendmail (或 Postfix 或 Exim), time
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 桌面：</emphasis></term>
        <listitem>
          <para>Alsa, ATK, Cairo, Desktop-file-utils, Freetype, Fontconfig,
          Gdk-pixbuf, Glib2, GTK+2, Icon-naming-utils, Libjpeg-turbo, Libpng, Libtiff,
          Libxml2, MesaLib, Pango, Xdg-utils, Xorg</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 运行时语言：</emphasis></term>
        <listitem>
          <para>Python, Libxml2, Libxslt </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 成像：</emphasis></term>
        <listitem>
          <para>CUPS, Cups-filters, Ghostscript, SANE</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB Gtk3 和 LSB 图形（试用）：</emphasis></term>
        <listitem>
          <para>GTK+3</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <variablelist>
      <bridgehead renderas="sect3">LFS 和 BLFS 没有提供，用于满足 LSB 要求的软件包</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry>
        <term><emphasis>LSB 核心：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 桌面：</emphasis></term>
        <listitem>
          <para>Qt4 （以及 Qt5 除外）</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 运行时语言：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB 成像：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><emphasis>LSB Gtk3 和 LSB 图形（试行）：</emphasis></term>
        <listitem>
          <para>无</para>
        </listitem>
      </varlistentry>

    </variablelist>

</sect1>
  <sect1 id="pre-why">
  <?dbhtml filename="package-choices.html"?>

  <title>本书中的软件包逻辑</title>

    <para>正如前文所述，LFS 的目标是构建一个完整可用的基础级系统。这其中便包含了，所有地软件包需要复制自身，直至为用户提供出一个相对最小的基础，然后根据用户的选择，在这个基础上定制出一个更完善的系统。这便意味着 LFS 并不是最小可用系统的代名词。其中包含的几个重要软件包，也并非严格需求的。下面的列表介绍了本书中选择每个软件包的理由。</para>

    <itemizedlist>

      <listitem>
        <para>Acl</para>

        <para>这个软件包中，包含管理访问控制列表（ACL）的工具，用于定义文件和目录更细粒度的自主访问权。</para>
      </listitem>

      <listitem>
        <para>Attr</para>

        <para>这个软件包中包含的程序，用于管理文件系统对象的扩展属性。</para>
      </listitem>

      <listitem>
        <para>Autoconf</para>

        <para>这个软件包中包含的程序，能根据开发者的模板自动生成配置源代码的 shell 脚本。通常需要在更新构建过程之后重新构建一个软件包。</para>
      </listitem>

      <listitem>
        <para>Automake</para>

        <para>这个软件包中，包含了通过模板生成 Make 文件的程序。通常需要在更新构建过程之后重新构建一个软件包。</para>
      </listitem>

      <listitem>
        <para>Bash</para>

        <para>这个软件包用于能满足 LSB 核心的需求，为系统提供 Bourne Shell 接口。选择它而非其它 shell 软件包的理由，是因为它的通用性以及在基本 shell 功能上的扩展能力。</para>
      </listitem>

      <listitem>
        <para>Bc</para>

        <para>这个软件包提供了一种任意精度的数值处理语言。在构建 Linux 内核时需要它。</para>
      </listitem>

      <listitem>
        <para>Binutils</para>

        <para>这个软件包中，包含了一个链接器、一个汇编器和其它处理对象文件的工具。编译 LFS 以及 BLFS 系统中的大部分软件包，包需要该软件包中的程序。</para>
      </listitem>

      <listitem>
        <para>Bison</para>

        <para>这个软件包中有 GNU 版的 yacc（Yet Another Compiler Compiler），用于构建一些其它的 LFS 程序。</para>
      </listitem>

      <listitem>
        <para>Bzip2</para>

        <para>这个软件包中，包含用来压缩和解压缩文件的程序。在解压缩很多 LFS 软件包的时候需要它。</para>
      </listitem>

      <listitem>
        <para>Check</para>

        <para>这个软件包中，包含一个用于测试其它程序的工具。仅安装在临时工具链中。</para>
      </listitem>

      <listitem>
        <para>Coreutils</para>

        <para>这个软件包，包含了一些查看和管理文件及目录的重要程序。在命令行里管理文件时和每个 LFS 软件包的安装过程中需要它。</para>
      </listitem>

      <listitem revision="systemd">
        <para>D-Bus</para>

        <para>这个软件包中，包含了一个用于提供消息总线的程序，消息总线是一种应用程序间通信的简单方式。</para>
      </listitem>

      <listitem>
        <para>DejaGNU</para>

        <para>这个软件包中，包含一个测试其它程序的框架。仅安装在临时工具链中。</para>
      </listitem>

      <listitem>
        <para>Diffutils</para>

        <para>这个软件包中，包含了一些显示文件和目录差异的程序。这些程序可以用来创建补丁，也用于很多软件包的构建过程。</para>
      </listitem>

      <listitem>
        <para>E2fsprogs</para>

        <para>这个软件包中，包含了一些处理 ext2、ext3 和 ext4 文件系统的工具。这些是 Linux 上支持的最常用而且完全经过考验的文件系统。</para>
      </listitem>

      

      <listitem>
        <para>Expat</para>

        <para>这个软件包中，包含了一个相对小的 XML 解析库。Perl 模块 XML::Parser 需求该软件包。</para>
      </listitem>

      <listitem>
        <para>Expect</para>

        <para>这个软件包中，包含的了一个生成与其它程序交互的脚本对话框的程序。通常用来测试其它软件包。仅安装在临时工具链中。</para>
      </listitem>

      <listitem>
        <para>File</para>

        <para>这个软件包中，包含一个能判断给定文件的类型的工具。一些软件包需要用它来构建。</para>
      </listitem>

      <listitem>
        <para>Findutils</para>

        <para>这个软件包中，包含了一些在文件系统中查找文件的程序。在很多软件包构建脚本中会用到。</para>
      </listitem>

      <listitem>
        <para>Flex</para>

        <para>这个软件包中，包含了一个能生成识别文本模式程序的工具。是 lex（lexical analyzer）程序的 GNU 版本。构建很多 LFS 软件包需要用到。</para>
      </listitem>

      <listitem>
        <para>Gawk</para>

        <para>这个软件包中，包含了一些操作文本文件的程序。是 awk（Aho-Weinberg-Kernighan）的 GNU 版本。在很多软件包的构建脚本中会用到。</para>
      </listitem>

      <listitem>
        <para>Gcc</para>

        <para>这个软件包是 GNU 编译器工具集。它包括 C 和 C++ 的编译器以及其它构建 LFS 时用不到的软件包。</para>
      </listitem>

      <listitem>
        <para>GDBM</para>

        <para>这个软件包中，包含 GNU 数据库管理库。LFS 的另一个软件包 Man-DB 会用到。</para>
      </listitem>

      <listitem>
        <para>Gettext</para>

        <para>这个软件包中，包含了很多软件包国际化和本地化需要用到的工具和库。</para>
      </listitem>

      <listitem>
        <para>Glibc</para>

        <para>这个软件包中，包含了主要的 C 语言库。缺少它 Linux 的程序便无法运行了。</para>
      </listitem>

      <listitem>
        <para>GMP</para>

        <para>这个软件包中，包含了能提供任意精度数值运算的数学库。编译 Gcc 时会用到。</para>
      </listitem>

      <listitem>
        <para>Gperf</para>

        <para>这个软件包中，包含了一个能从一个键集生成完美哈希函数的程序。Eudev 会用到。</para>
      </listitem>

      <listitem>
        <para>Grep</para>

        <para>这个软件包中，包含了一些在文件中搜索的程序。大部分软件包的构建脚本会用到。</para>
      </listitem>

      <listitem>
        <para>Groff</para>

        <para>这个软件包中，包含了处理和格式化文本的程序。其中一个重要的功能是格式化 man 页面。</para>
      </listitem>

      <listitem>
        <para>GRUB</para>

        <para>这个软件包是 Grand Unified Boot Loader。是诸多可用的引导加载器中的一个，但是最灵活。</para>
      </listitem>

      <listitem>
        <para>Gzip</para>

        <para>这个软件包中，包含了一些压缩和解压缩文件的程序。解压很多 LFS 以及 BLFS 的软件包时需要用到。</para>
      </listitem>

      <listitem>
        <para>Iana-etc</para>

        <para>这个软件包中，包含提供了网络服务和协议的数据。启用合适的网络功能时会用到。</para>
      </listitem>

      <listitem>
        <para>Inetutils</para>

        <para>这个软件包中，包含基本网络管理的程序。</para>
      </listitem>

      <listitem>
        <para>Intltool</para>

        <para>这个软件包中，包含能从源文件中抽取可翻译字符串的工具。</para>
      </listitem>

      <listitem>
        <para>IProute2</para>

        <para>这个软件包中，包含了一些基本和高级的 IPv4 和 IPv6 网络的程序。由于它的 IPv6 功能，所以选择它来取代其它的常见网络工具包（net-tools）。</para>
      </listitem>

      <listitem>
        <para>Kbd</para>

        <para>这个软件包中，包含一些键盘映射文件，用于非 US 键盘的键盘工具以及一些控制台字体。</para>
      </listitem>

      <listitem>
        <para>Kmod</para>

        <para>这个软件包中，包含一些用于管理 Linux 内核模块的程序。</para>
      </listitem>

      <listitem>
        <para>Less</para>

        <para>这个软件包中，包含了一个很好的文本文件查看器，允许查看文件的时候向上或向下滚动。Man-DB 用它来查看 man 页面。</para>
      </listitem>

      <listitem>
        <para>Libcap</para>

        <para>这个软件包中，包含实现了可以用于 Linux 内核的，从用户空间到 POSIX 1003.1e 的接口。</para>
      </listitem>

      <listitem>
        <para>Libelf</para>

        <para>elfutils 项目为 ELF 文件和 DWARF 数据提供了库和工具。该软件包中的大部分实用程序都可以在别的软件包中使用，但是该库需求使用默认（且最有效的）配置构建 Linux 内核。</para>

      </listitem>

      <listitem>
        <para>Libffi</para>

        <para>这个软件包实现了一个可移植的、高级编程接口，以适应各种调用惯例。在编译时，一些程序可能还不知道给函数传递的是什么参数。例如，一个解释器可能会在运行时才被告知函数调用中所传递的参数的个数和类型。Libffi 可以应用于这些程序，充当从解释程序到被编译代码的桥梁。</para>

      </listitem>

      <listitem>
        <para>Libpipeline</para>

        <para>这个软件包中，包含一个以灵活和便捷的方式操作子进程流水线的库。Man-DB 软件包会用到。</para>
      </listitem>

      <listitem>
        <para>Libtool</para>

        <para>这个软件包中，包含了一些 GNU 通用库支持脚本。它降低了在一致、可移植的接口上使用共享库的复杂度。在其他 LFS 软件包的测试套件里需要它。</para>
      </listitem>

      <listitem>
        <para>Linux 内核</para>

        <para>这个软件包就是操作系统。即我们常说的「GNU/Linux」中的「Linux」。</para>
      </listitem>

      <listitem>
        <para>M4</para>

        <para>这个软件包中，包含一个普通的文本宏处理器，作为其它程序的构建工具使用。</para>
      </listitem>

      <listitem>
        <para>Make</para>

        <para>这个软件包中，包含了一个指导软件包构建的程序。LFS 中的几乎每个包都需要它。</para>
      </listitem>

      <listitem>
        <para>Man-DB</para>

        <para>这个软件包中，包含了一些查找和查看 man 页面的程序。由于其更好的国际化功能，用来代替 <application moreinfo="none">man</application> 软件包。它提供了 man 程序。</para>
      </listitem>

      <listitem>
        <para>Man-pages</para>

        <para>这个软件包中，包含基本的 Linux man 页面的真正内容。</para>
      </listitem>

      <listitem>
        <para>Meson</para>

        <para>这个软件包提供了自动化构建软件的工具。Meson 的主要目标是最小化软件开发者，在其构建的系统上，花费的配置时间。</para>

      </listitem>

      <listitem>
        <para>MPC</para>

        <para>这个软件包中，包含复数运算的函数。Gcc 需要它。</para>
      </listitem>

      <listitem>
        <para>MPFR</para>

        <para>这个软件包中，包含多精度运算的函数。Gcc 需要它。</para>
      </listitem>

      <listitem>
        <para>Ninja</para>

        <para>这个软件包中，包含了一个专注于速度的小型构建系统。其输入文件由更高层次的构建系统生成，并且尽可能快速地运行构建过程。</para>

      </listitem>

      <listitem>
        <para>Ncurses</para>

        <para>这个软件包中，包含了一些处理字符界面的不依赖特定终端的库。通常用来为菜单系统提供光标控制。一些 LFS 的软件包会用到。</para>
      </listitem>

      <listitem>
        <para>Openssl</para>

        <para>这个软件包中，提供了与加密相关管理工具和库。提供的这些加密功能对于他软件包（包括 Linux 内核）而言非常有用。</para>
      </listitem>

      <listitem>
        <para>Patch</para>

        <para>这个软件包中，包含了一个通过 <emphasis>patch</emphasis> 文件来修改或新建文件的程序，<emphasis>patch</emphasis> 文件通常是由 <application moreinfo="none">diff</application> 程序创建的。一些 LFS 软件包的构建过程会需要它。</para>
      </listitem>

      <listitem>
        <para>Perl</para>

        <para>这个软件包中，包含了一个运行时语言 PERL 的解析器。一些 LFS 软件包的安装和测试套件会需要它。</para>
      </listitem>

      <listitem>
        <para>Pkg-config</para>

        <para>这个软件包提供了一个返回已安装库或软件包的元数据的程序。</para>
      </listitem>

      <listitem>
        <para>Procps-NG</para>

        <para>这个软件包中，包含了一些监视进程的程序。这些程序对系统管理非常有用，也被用于 LFS 的启动脚本。</para>
      </listitem>

      <listitem>
        <para>Psmisc</para>

        <para>这个软件包中，包含了一些显示运行中进程信息的程序。这些程序对系统管理非常有用。</para>
      </listitem>

      <listitem>
        <para>Python 3</para>

        <para>这个软件包提供了一种解释型语言，该语言的设计理念强调代码的可读性。</para>

      </listitem>

      <listitem>
        <para>Readline</para>

        <para>这个软件包提供了一些命令行编辑和历史功能的库。Bash 会使用它。</para>
      </listitem>

      <listitem>
        <para>Sed</para>

        <para>这个软件包提供了不通过文本编辑器而直接编辑文本的功能。大部分 LFS 软件包的配置脚本需要它。</para>
      </listitem>

      <listitem>
        <para>Shadow</para>

        <para>这个软件包中，包含了一些以安全方式处理密码的程序。</para>
      </listitem>

      

      <listitem revision="systemd">
        <para>systemd</para>

        <para>作为 Sysvinit 的替代品，这个包提供了 <application moreinfo="none">init</application> 程序，以及一些其它的启动和系统控制的功能。很多 Linux 商业发行版都用它。</para>
      </listitem>

      

      <listitem>
        <para>Tar</para>

        <para>这个软件包提供了归档和提取 LFS 中的几乎所有软件包的能力。</para>
      </listitem>

      <listitem>
        <para>Tcl</para>

        <para>这个软件包中，包含了在很多 LFS 软件包测试套件中使用的工具命令语言。仅安装在临时工具链中。</para>
      </listitem>

      <listitem>
        <para>Texinfo</para>

        <para>这个软件包中，包含了一些读、写以及转换信息页面的程序。在很多 LFS 软件包的安装过程中会使用它。</para>
      </listitem>

      <listitem>
        <para>Util-linux</para>

        <para>该软件包中，包含了许多工具。其中有处理文件系统、控制台、分区和消息的工具。</para>
      </listitem>

      <listitem>
        <para>Vim</para>

        <para>这个软件包中，包含一个编辑器。由于 vi 编辑器的经典以及大量的强大功能而选择它。对很多用户来说一个编辑器是一个非常个人的选择，如果需要的话也可以选择其它编辑器。</para>
      </listitem>

      <listitem>
        <para>XML::Parser</para>

        <para>这个软件包是和 Expat 交互的 Perl 模块。</para>
      </listitem>

      <listitem>
        <para>XZ Utils</para>

        <para>这个软件包中，包含了一些压缩和解压缩文件的程序。通常它的压缩率最高，在解压 XZ 或者 LZMA 格式的软件包时非常有用。</para>
      </listitem>

      <listitem>
        <para>Zlib</para>

        <para>这个软件包中，包含了一些程序所使用的压缩和解压缩功能。</para>
      </listitem>

    </itemizedlist>

</sect1>
  <sect1 id="pre-prerequisites">
  <?dbhtml filename="prerequisites.html"?>

  <title>前提条件</title>

  <para>构建一个 LFS 系统并不是一个简单的任务。它要求对 Unix 系统管理有一定水平的了解，以便可以解决问题并正确地执行所列出的命令。特别是，至少你应该拥有使用命令行（shell），复制或移动文件和目录、列出目录和文件内容、切换当前目录的能力。同时也希望你拥有使用和安装 Linux 软件的基本知识。</para>

  <para>因为 LFS 书中假设你<emphasis>至少</emphasis>有这些基本的技能，所以众多的 LFS 提供的论坛看起来在这方面也给你提供不了太多的帮助。你会发现对于这些基本知识的问题并不会得到解答，或者会简单的建议你去看一下 LFS 主要的提前阅读列表。</para>

  <para>构建 LFS 系统之前，我们建议阅读以下内容：</para>

  <itemizedlist>
    <listitem>
      <para>构建软件 HOWTO <ulink url="http://www.tldp.org/HOWTO/Software-Building-HOWTO.html"/></para>

      <para>这是一个在 Linux 上编译和安装「通用」Unix 软件包的综合指南。尽管成文已有一段时间，但其对于编译和安装软件中所需的基本技能，还算一个不错的总结。</para>
    </listitem>

    <listitem>
      <para>初学者源码安装指南 <ulink url="http://moi.vonos.net/linux/beginners-installing-from-source/"/></para>

      <para>该指南很好的总结了从源码构建软件时所需要的基础技能和技巧。</para>
    </listitem>
<!--
    <listitem>
      <para>The Essential Pre-Reading Hint
      <ulink url="&hints-root;essential_prereading.txt"/></para>

      <para>This is an LFS Hint written specifically for users new to Linux.
      It includes a list of links to excellent sources of information on a
      wide range of topics. Anyone attempting to install LFS should have an
      understanding of many of the topics in this hint.</para>
    </listitem>
-->
  </itemizedlist>

</sect1>
  <sect1 id="pre-typography">
  <?dbhtml filename="typography.html"?>

  <title>排版约定</title>

  <para>为了能更更容易理解，这里有一些全书使用的排版约定。本段，会包含一些来自 Linux From Scratch 中排版格式的示例。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">./configure --prefix=/usr</userinput></screen>

  <para>这种形式的文本，设计出来就是为了让你照着输入的，除非周围另有文本说明意图。也常用于解释段落，以标识引用的命令。（译注：由于文字排版原因，其中的内容即便是注释，也不会翻译，下同。）</para>

  <para>某些情况下，会在一行的行末添加反斜，将一个逻辑行的内容分写成两个或更多的物理行。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">CC="gcc -B/usr/bin/" ../binutils-2.18/configure \
  --prefix=/tools --disable-nls --disable-werror</userinput></screen>

  <para>注意，反斜杠的后面必须紧跟一个回车符。其它的空白字符，例如空格和 Tab 将导致错误的结果。</para>

<screen format="linespecific"><computeroutput moreinfo="none">install-info: unknown option '--dir-file=/mnt/lfs/usr/info/dir'</computeroutput></screen>

  <para>这种形式的文本（等宽文本）用于显示屏幕输出，通常是所运行命令的输出结果。这种形式也用于文件名的显示，例如： <filename moreinfo="none">/etc/ld.so.conf</filename>。</para>

  <para><emphasis>强调</emphasis></para>

  <para>这种形式的文本在本书中有多重目的。主要目的是强调重要的内容或项目。</para>

  <para><ulink url="http://www.linuxfromscratch.org/"/></para>

  <para>这种格式用来表示 LFS 社区内部及外部网页的超链接。包括 HOWTO，下载地址和网站等。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; $LFS/etc/group &lt;&lt; "EOF"
<literal moreinfo="none">root:x:0:
bin:x:1:
......</literal>
EOF</userinput></screen>

  <para>这种格式在创建配置文件中会使用。第一个命令告诉系统新建一个文件 <filename moreinfo="none">$LFS/etc/group</filename>，然后后面的行中不论在输入了什么都会输入到文件中，直至遇到文件终结符（EOF）。因此，这整个部分会如看到的那样输入。</para>

  <para><replaceable>&lt;需要替换的文本&gt;</replaceable></para>

  <para>这种格式用来封装需要替换为合适内容的文本，或者复制粘贴操作。</para>

  <para><replaceable>[可选的文本]</replaceable></para>

  <para>这种格式用来封装可选项文本。</para>

  <para><filename moreinfo="none">passwd(5)</filename></para>

  <para>这种格式用来表示特定的手册 （man） 页面。括号内的数字表示该手册的特定部分。例如 <command moreinfo="none">passwd</command> 有两个手册页面。在 LFS 安装说明中，这两个手册页面会表示为 <filename moreinfo="none">/usr/share/man/man1/passwd.1</filename> 以及 <filename moreinfo="none">/usr/share/man/man5/passwd.5</filename>。当书中使用 <filename moreinfo="none">passwd(5)</filename> 时它特指 <filename moreinfo="none">/usr/share/man/man5/passwd.5</filename>。<command moreinfo="none">man passwd</command> 会输出它找到匹配「passwd」的第一个手册页面，也就是 <filename moreinfo="none">/usr/share/man/man1/passwd.1</filename>。在这个例子中，你需要执行 <command moreinfo="none">man 5 passwd</command> 才能阅读指定的手册页面。应该注意的是，大部分的手册页面在不同部分不会有重复的页面名字。因此，<command moreinfo="none">man <replaceable>&lt;program name&gt;</replaceable></command> 通常就足够了。</para>

</sect1>
  <sect1 id="pre-organization">
  <?dbhtml filename="organization.html"?>

  <title>本书结构</title>

  <para>本书分为以下几个部分。</para>

  <sect2>
    <title>第一部分 介绍</title>

    <para>第一部分解释了一些安装 LFS 时的重要注意事项。同时还提供了本书的基本信息。</para>
  </sect2>

  <sect2>
    <title>第二部分 构建的准备工作</title>

    <para>第二部分描述了构建的一些准备工作，包括分区，下载软件包，编译一些临时工具。</para>
  </sect2>

  <sect2>
    <title>第三部分 构建 LFS 系统</title>

    <para>第三部分引导用户开始 LFS 系统的构建——逐一的编译和安装所有的软件包，设置启动脚本，安装内核。生成的 Linux 系统是继续编译其它一系列软件的基础，通过那些软件来扩展系统，系统才能更好地满足我们的需求。在本书的最后，我们还给出了一个便于使用的引用列表，包括安装好的程序、库和一些重要文件。</para>
  </sect2>

</sect1>
  <sect1 id="pre-errata">
  <?dbhtml filename="errata.html"?>

  <title>勘误表</title>

  <para>构建 LFS 系统的软件是在不断的更新和改进的，也许在这本 LFS 书发布以后就会出现一些安全警告或者是修复了一些 bug。请在着手构建之前访问  <ulink revision="systemd" url="http://www.linuxfromscratch.org/lfs/errata/systemd/"/>，检查此版本 LFS 软件包的版本或说明，是否需要修改以解决安全漏洞或其它 bug。你应该关注本书的一切变化，且将其应用到 LFS 系统的构建中去。</para>

  <para>如果 LFS 的中文手册翻译的有问题，或是你对 LFS 中文手册有自己的建议和意见。可以通过中文手册的 Github 库 LFS-BOOK <ulink url="https://github.com/LCTT/LFS-BOOK"/> 找到并告诉我们。</para>


</sect1>

</preface>

<part id="part1">
<title>介绍</title>
<?dbhtml filename="part1.html"?>
<chapter id="chapter-intro" xreflabel="&#x7B2C; 1 &#x7AE0;" xml:base="chapter01/chapter01.xml">
  <?dbhtml dir="chapter01"?>
  <?dbhtml filename="chapter01.html"?>

  <title>介绍</title>

  <sect1 id="ch-intro-how">
  <?dbhtml filename="how.html"?>

  <title> 如何构建 LFS 系统</title>

  <para>LFS 系统需要在一个已经安装好的 Linux 发行版（比如 Debian、OpenMandriva、Fedora 或 OpenSUSE 等）中构建。这个已有的 Linux 系统（即宿主）作为构建新系统的起始点,提供了必要的程序，包括编译器、链接器和 shell。请在安装发行版的过程中选择「Development（开发）」选项以便使用这些开发工具。</para>

  <para>你可以选择在电脑上安装一个独立的发行版，亦可以临时使用商业发行版的 LiveCD。
      <!-- The LFS LiveCD works well as a host system,
  providing all the tools you need to successfully follow the instructions in
  this book. The LiveCD version is behind the current book, but is still useful
  as a host for building the current book.  The <quote>-nosrc</quote> or
  <quote>-min</quote> editions of the LiveCD are the most appropriate for
  building a current LFS system.  For more information about the LFS LiveCD or
  to download a copy, visit <ulink url="&livecd-root;"/>. --></para>

  <!--
  <note>
    <para>The LFS LiveCD might not work on newer hardware configurations,
    failing to boot or failing to detect some devices such as some SATA hard
    drives.</para>
  </note> -->

  <para>本手册的 <xref linkend="chapter-partitioning"/> 描述了如何创建一个新的 Linux 本地分区和文件系统。这就是编译和安装全新的 LFS 系统的地方。<xref linkend="chapter-getting-materials"/> 介绍了构建 LFS 系统所需要下载的软件包和补丁，以及如何将它们保存到新的文件系统中。<xref linkend="chapter-final-preps"/> 讨论了如何设置恰当的工作环境。还请务必仔细阅读 <xref linkend="chapter-final-preps"/>，它会告诉您在继续 <xref linkend="chapter-temporary-tools"/> 以及后面的工作之前，尤其需要注意的几件事请。</para>

  <para><xref linkend="chapter-temporary-tools"/> 解释了为构建编译套件（工具链）需要安装的多个软件包，在 <xref linkend="chapter-building-system"/> 中将会使用这套工具构建正真的系统。其中有一些包需要解决循环依赖——比如你需要一个编译器来编译出一个编译器。</para>

  <para><xref linkend="chapter-temporary-tools"/> 还展示了如何构建第一阶段的工具链，包括 Binutils 和 GCC（第一阶段的主要意义就是重新安装这两个核心软件包）。下一步将来构建 Glibc，即 C 语言库。Glibc 将使用第一阶段构建的工具链编译。然后，第二阶段的工具链编译就完成了。这次，工具链将会被动态链接到新建立的 Glibc。<xref linkend="chapter-temporary-tools"/> 中剩余的其他包都将使用第二阶段的工具链编译。当这些过程完成之后，除了正在运行的内核外，LFS 的安装过程就不再已赖于宿主发行版了。</para>

  <para>把新系统从宿主发行版中分离出来的工作看起来可能有点多余。<xref linkend="ch-tools-toolchaintechnotes"/> 给出了为什么要这么做的完整技术说明。</para>

  <para>在 <xref linkend="chapter-building-system"/> 中，将构建完整的 LFS 系统。我们将会使用 <command moreinfo="none">chroot</command>（切换成 root 用户的）命令来进入一个虚拟环境并启动一个新的 shell，且整个虚拟环境就将作为 LFS 分区的根目录。这个过程，和重起电脑并指示内核将 LFS 分区挂载为根分区十分相像。只是系统并没有真正重启，而是通过 <command moreinfo="none">chroot</command> 实现的，而这样做的原因是想要实现一个正真可以启动的系统还有很多工作没有完成。使用「chrooting」最大的好处在于，构建 LFS 的同时可以继续使用宿主系统。在等待包编译的过程中，你可以继续正常的使用电脑。</para>

  <para>在完成基本的安装过程之后，您还需要阅读 <xref linkend="chapter-bootscripts"/> 对系统做简单的配置，然后阅读 <xref linkend="chapter-bootable"/> 配置内核和引导器（bootloader）。<xref linkend="chapter-finalizing"/> 包含了一些 LFS 后续使用的建议。完成本手册的所有步骤之后，就可以重启电脑，进入新的 LFS 系统了。</para>

  <para>大致流程就是如此。每一步的细节都会在后续的章节中逐一阐明。在你开始 LFS 的旅途之后，混沌的过程便会渐渐明晰。</para>

</sect1>
  <sect1 id="ch-intro-whatsnew">
  <?dbhtml filename="whatsnew.html"?>

  <title>自上一版手册发布后的变更</title>

  <para>下面列举了上一版手册发布后的一些软件包更新。</para>

  <!--
    Every package in the book is listed in the "Upgraded to:" section.
    Comment/uncomment as needed. DO NOT delete any of these lines unless that
    package is removed from the book entirely.
  -->

  <itemizedlist>
    <title>更新：</title>
    <listitem><para/></listitem>  <!-- satisfy build -->
    <!--<listitem>
    <para>None</para>
    </listitem>-->
    <!--<listitem>
      <para>Acl-&acl-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Attr-&attr-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Autoconf-&autoconf-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Automake-&automake-version;</para>
    </listitem>-->
    <listitem>
      <para>Bash 5.0</para>
    </listitem>
    <!--<listitem>
      <para>Bc &bc-version;</para>
    </listitem>-->
    <listitem>
      <para>Binutils-2.32</para>
    </listitem>
    <listitem>
      <para>Bison-3.3.2</para>
    </listitem>
    <!--<listitem>
      <para>Bzip2-&bzip2-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Check-&check-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Coreutils-&coreutils-version;</para>
    </listitem>-->
    <listitem>
      <para>DejaGNU-1.6.2</para>
    </listitem>
    <listitem revision="systemd">
      <para>D-Bus-1.12.12</para>
    </listitem>
    <listitem>
      <para>Diffutils-3.7</para>
    </listitem>
    
   <listitem>
      <para>E2fsprogs-1.44.5</para>
   </listitem>
   <!--<listitem>
      <para>Expat-&expat-version;</para>
   </listitem>-->
   <!-- <listitem>
      <para>Expect-&expect-version;</para>
   </listitem>-->
   <listitem>
      <para>File-5.36</para>
   </listitem>
    <!--<listitem>
      <para>Findutils-&findutils-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Flex-&flex-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Gawk-&gawk-version;</para>
   </listitem>-->
   <!--<listitem>
      <para>GCC-&gcc-version;</para>
   </listitem>-->
   <listitem>
      <para>GDBM-1.18.1</para>
   </listitem>
    <!--<listitem>
      <para>Gettext-&gettext-version;</para>
    </listitem>-->
    <listitem>
      <para>Glibc-2.29</para>
    </listitem>
    <!--<listitem>
      <para>GMP-&gmp-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Gperf-&gperf-version;</para>
    </listitem>-->
    <listitem>
      <para>Grep-3.3</para>
    </listitem>
    <listitem>
      <para>Groff-1.22.4</para>
    </listitem>
    <!--<listitem>
      <para>GRUB-&grub-version;</para>
    </listitem>-->
    <listitem>
      <para>Gzip-1.10</para>
   </listitem>
    <!--<listitem>
      <para>IANA-Etc-&iana-etc-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Inetutils-&inetutils-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Intltool-&intltool-version;</para>
    </listitem>-->
    <listitem>
      <para>IPRoute2-4.20.0</para>
   </listitem>
    <!--<listitem>
      <para>Kbd-&kbd-version;</para>
    </listitem>-->
    <listitem>
      <para>Kmod-26</para>
   </listitem>
   <!--<listitem>
      <para>Less-&less-version;</para>
   </listitem>-->
    <!--<listitem>
      <para>LFS-Bootscripts-&lfs-bootscripts-version;</para>
    </listitem>-->
    <listitem>
      <para>Libcap-2.26</para>
    </listitem>
    <listitem>
      <para>Libelf-0.176 (from elfutils)</para>
   </listitem>
   <listitem>
      <para>Libpipeline-1.5.1</para>
   </listitem>
    <!--<listitem>
      <para>Libtool-&libtool-version;</para>
    </listitem>-->
    <listitem>
      <para>Linux-4.20.12</para>
    </listitem>
    <!--<listitem>
      <para>M4-&m4-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Make-&make-version;</para>
    </listitem>-->
    <listitem>
      <para>Man-DB-2.8.5</para>
   </listitem>
   <!--<listitem>
      <para>Man-pages-&man-pages-version;</para>
   </listitem>-->
   <listitem>
      <para>Meson-0.49.2</para>
   </listitem>
   <!-- <listitem>
      <para>MPC-&mpc-version;</para>
   </listitem>-->
   <listitem>
      <para>MPFR-4.0.2</para>
   </listitem>
   <!--<listitem>
      <para>Ncurses-&ncurses-version;</para>
   </listitem>-->
   <listitem>
      <para>Ninja-1.9.0</para>
   </listitem>
   <listitem>
      <para>Openssl-1.1.1a</para>
   </listitem>
   <!-- <listitem>
      <para>Patch-&patch-version;</para>
   </listitem>-->
   <listitem>
      <para>Perl-5.28.1</para>
   </listitem>
    <!--<listitem>
      <para>Pkg-config-&pkgconfig-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Procps-ng-&procps-ng-version;</para>
    </listitem>-->
    <listitem>
      <para>Psmisc-23.2</para>
    </listitem>
    <listitem>
      <para>Python-3.7.2</para>
    </listitem>
    <listitem>
      <para>Readline-8.0</para>
    </listitem>
    <listitem>
      <para>Sed-4.7</para>
    </listitem>
    <!--<listitem>
      <para>Shadow-&shadow-version;</para>
    </listitem>-->
    <!--<listitem revision="sysv">
      <para>Sysklogd-&sysklogd-version;</para>
    </listitem>-->
    <listitem revision="systemd">
      <para>systemd-240</para>
    </listitem>
    
    <listitem>
      <para>Tar-1.31</para>
   </listitem>
   <listitem>
      <para>Tcl-8.6.9</para>
   </listitem>
   <!--<listitem>
      <para>Texinfo-&texinfo-version;</para>
   </listitem>-->
   <listitem>
      <para>Tzdata-2018i</para>
   </listitem>
   <listitem>
      <para>Util-Linux-2.33.1</para>
   </listitem>
    <!--<listitem>
      <para>Vim-&vim-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>XML-Parser-&xml-parser-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>XZ-Utils-&xz-version;</para>
    </listitem>-->
    <!--<listitem>
      <para>Zlib-&zlib-version;</para>
    </listitem>-->
  </itemizedlist>

  <!--<itemizedlist>
    <title>Downgraded to:</title>

    <listitem>
      <para>PLACEHOLDER</para>
    </listitem>

  </itemizedlist>-->

  <itemizedlist>
    <title>新增：</title>
    <listitem><para/></listitem>  <!-- satisfy build -->

  </itemizedlist>

  <itemizedlist>
    <title>移除：</title>
    <listitem><para/></listitem>  <!-- satisfy build -->

    <!--<listitem>
      <para>bash-4.4-upstream_fixes-1.patch</para>
   </listitem>-->

  </itemizedlist>

</sect1>
  <sect1 id="ch-scatter-changelog">
  <?dbhtml filename="changelog.html"?>

  <title>更新日志</title>

  <para>这是 Linux From Scratch 手册的  <phrase revision="systemd">8.4-systemd</phrase> 版本，发布于 2019 年 3 月 1 日。如果距离这个时间已超过 6 个月，那么应该已经有更新和更好的版本了。你可以访问 <ulink url="http://www.linuxfromscratch.org/mirrors.html"/> 的任意镜像站点来获取他们。</para>

  <para>下面是本书上一次发布之后的更新列表。</para>

  <itemizedlist>
    <title>更新日志条目：</title>

<!-- Changelog template

    <listitem>
      <para>Date</para>
      <itemizedlist>
        <listitem>
          <para>[name] - New changelog entry.</para>
        </listitem>
        <listitem>
          <para>[name] - Previous changelog entry.</para>
        </listitem>
      </itemizedlist>
    </listitem>

    Note:  If a change is only specific to sysv or systemd, then use
    <listitem revision="sysv"> or <listitem revision="systemd"> as
    appropriate for the entry or if needed the entire day's listitem.
    -->
    <listitem>
      <para>2019-03-01</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - LFS-8.4 发布。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-25</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.20.12。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4425">#4425</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 elfutils-0.176。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4426">#4426</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 file-5.36。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4429">#4429</ulink>。</para>
        </listitem>
        <listitem revision="systemd">
          <para>[renodr] - 为 systemd-240 添加安全补丁，以修复 D-Bus 上 PID1 崩溃的问题。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4428">#4428</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    

    <listitem>
      <para>2019-02-19</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 添加一可选修改至 ninja 的构建过程，以允许使用环境变量 NINJAJOBS。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-14</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.20.8。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4423">#4423</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 修复第 5 章中构建 Python 时，某些宿主机可能使用其相关 header 导致的错误。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-11</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.20.7。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4421">#4421</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 kmod-26。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4422">#4422</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-08</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 更新宿主机系统要求。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-06</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 简化第 5 章中 glibc 的说明。感谢 Romain Geissler 的报告。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-05</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.3.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4418">#4419</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 meson-0.49.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4420">#4420</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-02</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 修复 psmisc URL。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4418">#4418</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 binutils-2.32。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4417">#4417</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-02-01</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.3.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4412">#4412</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 glibc-2.29。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4415">#4415</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 libpipeline-1.5.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4413">#4413</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.20.6。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4409">#4409</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 meson-0.49.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4410">#4410</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 mpfr-4.0.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4416">#4416</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 ninja-1.9.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4414">#4414</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-01-27</para>
      <itemizedlist>
        <listitem>
          <para>[pierre] - 通过添加在构建说明中一条 sed 命令，来修复 tar-1.31 的一个 bug 的说明。同时移除有关测试失败的陈旧注释。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem revision="systemd">
      <para>2019-01-20</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 使用 Docbook XSL 非命名空间版本的样式重新生成 systemd man 手册的 tarball。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem revision="systemd">
      <para>2019-01-11</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 为 systemd-240 添加安全补丁。该补丁用于修正 CVE-2018-16865 和 CVE-2018-16864（日志中的内存损坏导致堆栈溢出/任意代码可执行） 。尽可能快的应用该补丁。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4408">#4408</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-01-10</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.20.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4398">#4398</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 diffutils-3.7。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4401">#4401</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 tar-1.31。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4402">#4402</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 man-db-2.8.5。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4403">#4403</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 bash-5.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4404">#4404</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 readline-8.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4401">#4405</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 iproute2-4.20.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4406">#4406</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 util-linux-2.33.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4407">#4407</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2019-01-01</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 gzip-1.10。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4400">#4400</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 tzdata-2018i。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4399">#4399</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-12-27</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 更新至 linux-4.19.12。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4389">#4389</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 e2fsprogs-1.44.5。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4390">#4390</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 bison-3.2.4。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4391">#4391</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 sed-4.7。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4392">#4392</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 grep-3.3。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4393">#4393</ulink>。</para>
        </listitem>
        <listitem revision="systemd">
          <para>[renodr] - 更新至 systemd-240。包含一个针对 systemd-tmpfiles 的关键修复（权限提升）。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4394">#4394</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 Python-3.7.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4395">#4395</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 groff-1.22.4。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4396">#4396</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-12-12</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 添加一则注意提示 libffi 编译时将根据 CPU 优化。与 GMP 类似，如果将安装被移动到另一个系统，则会导致非法操作错误。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-12-11</para>
      <itemizedlist>
        <listitem revision="systemd">
          <para>[bdubbs] - 更新至 dbus-1.12.12。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4385">#4385</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.19.8。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4387">#4387</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 meson-0.49.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4388">#4388</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-12-01</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 移动 /etc/bash_completions.d/grub 至更好的位置。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4385">#4385</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 dejagnu-1.6.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4382">#4382</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.19.6。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4383">#4383</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 perl-5.28.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4384">#4384</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-25</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.2.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4380">#4380</ulink>。</para>
        </listitem>
        
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-24</para>
      <itemizedlist>
        <listitem>
          <para>[dj] - 更新至 linux-4.19.4。修复 
          <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4381">#4381</ulink>.</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 systemd-239-6b4878d.</para>
        </listitem>
        <listitem revision="systemd">
          <para>[dj] - 添加「wheel」用户组至 systemd 用户组。</para>
        </listitem>
        <listitem>
          <para>[dj] - 添加 touch 至被移动的 coreutils 程序列表，并阐述移动的必要性是为了满足 FHS 合规性。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-21</para>
      <itemizedlist>
        <listitem>
          <para>[renodr] - 添加「wheel」用户组以满足 systemd 的需求。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4376">#4376</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 添加一条 sed 命令以修复 autoconf 测试套件的 bug。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4372">#4372</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 tcl-8.6.9。安全更新。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4375">#4375</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 openssl-1.1.1a。这是一个安全更新。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4379">#4379</ulink>。</para>
        </listitem>
        <listitem revision="systemd">
          <para>[renodr] - 更新至 systemd-239-25d1ba1。将修复三个 systemd 的安全问题。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4377">#4377</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 linux-4.19.3。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4373">#4373</ulink>。</para>
        </listitem>
        <listitem>
          <para>[renodr] - 更新至 elfutils-0.175。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4374">#4374</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-19</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] -  更新至 libcap-2.26。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4378">#4378</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-09</para>
      <itemizedlist>
        
        <listitem>
          <para>[bdubbs] - 更新至 meson-0.48.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4371">#4371</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.2.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4370">#4370</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-11-06</para>
      <itemizedlist>
        
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4367">#4367</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.19.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4368">#4368</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 tzdata-2018g。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4366">#4366</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 util-linux-v2.33。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4353">#4353</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-10-29</para>
      <itemizedlist>
        <listitem>
          <para>[dj] - 更新至 gdbm-1.18.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4364">#4364</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 Python-3.7.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4361">#4361</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-10-27</para>
      <itemizedlist>
        <listitem>
          <para>[dj] - 更新至 iproute2-4.19.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4363">#4363</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 file-5.35。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4359">#4359</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 tzdata-2018f。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4358">#4358</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 meson-0.48.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4357">#4357</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 linux-4.19。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4356">#4356</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-10-10</para>
      <itemizedlist>
        <listitem revision="systemd">
          <para>[dj] - 移除 systemd 说明中指向 /toold/lib64 的错误链接。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4355">#4355</ulink>。</para>
        </listitem>
        <listitem revision="systemd">
          <para>[dj] - 添加 systemd-239-meson-0.48.0_fixes-1.patch 以解决 meson 的构建问题。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 meson-0.48.0。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4351">#4351</ulink>。</para>
        </listitem>
        <listitem>
          <para>[dj] - 更新至 linux-4.18.12。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4352">#4352</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-09-30</para>
      <itemizedlist>
        <listitem revision="systemd">
          <para>[dj] - 恢复第 5 章 Util-Linux 的构建，以避免对 systemd 的相互依赖。</para>
        </listitem>
        <listitem>
          <para>[dj] - 移动 Util-Linux 和 E2fsprogs 的安装至 Procps 之后，以满足 systemd 版 LFS 手册的构建顺序。这将不会影响到 SysV 版的手册。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-09-20</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 清理不需要的符号链接。重排软件包安装顺序，尽可能晚的安装第 6 章中版本特定的软件包。现在就无需在第 5 章构建 util-linux 了，将其移除。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4345">#4345</ulink> 和 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4349">#4349</ulink>。</para>
        </listitem>
        
        <listitem>
          <para>[bdubbs] - 更新至 elfutils-0.174 (libelf)。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4348">#4348</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 psmisc-23.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4347">#4347</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 openssl-1.1.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4346">#4346</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 linux-4.18.9。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4344">#4344</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-09-02</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - 更新至 bison-3.1。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4342">#4342</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 meson-0.47.2。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4341">#4341</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 gdbm-1.18。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4340">#4340</ulink>。</para>
        </listitem>
        <listitem>
          <para>[bdubbs] - 更新至 e2fsprogs-1.44.4。修复 <ulink url="http://wiki.linuxfromscratch.org/lfs/ticket/4338">#4338</ulink>。</para>
        </listitem>
      </itemizedlist>
    </listitem>

    <listitem>
      <para>2018-09-01</para>
      <itemizedlist>
        <listitem>
          <para>[bdubbs] - LFS-8.3 发布。</para>
        </listitem>
      </itemizedlist>
    </listitem>

  </itemizedlist>
</sect1>
  <sect1 id="ch-intro-resources">
  <?dbhtml filename="resources.html"?>

  <title>资源</title>

  <sect2 id="ch-intro-faq">
    <title>FAQ</title>

    <para>如果在构建 LFS 系统的过程中遇到任何的错误，或者是有任何的疑问，亦或者认为本手册存在任何的拼写错误，请先阅读常见问题列表（FAQ）：<ulink url="http://www.linuxfromscratch.org/faq/"/>。</para>

  </sect2>

  <sect2 id="ch-intro-maillists" xreflabel="&#x7B2C; 1 &#x7AE0; - &#x90AE;&#x4EF6;&#x5217;&#x8868;">
    <title>邮件列表</title>

    <para><uri>linuxfromscratch.org</uri> 的服务器上部署了一些和 LFS 项目开发工作相关的邮件列表。其中包括主要开发列表和支持列表，以及一些其他相关话题的讨论列表。如果 FAQ 不能解决您的问题，那么您可以在此搜索邮件列表：<ulink url="http://www.linuxfromscratch.org/search.html"/>。</para>

    <para>关于这些列表的订阅、归档、和其他的信息，都可以访问 <ulink url="http://www.linuxfromscratch.org/mail.html"/> 获取。</para>

  </sect2>

  <!-- FIXME: Remove until such time as we have our own News Server, JH 20060105

  <sect2 id="ch-intro-newsserver">
    <title>News Server</title>

    <para>The mailing lists hosted at <uri>linuxfromscratch.org</uri> are
    also accessible via the Network News Transfer Protocol (NNTP) server.
    All messages posted to a mailing list are copied to the corresponding
    newsgroup, and vice versa.</para>

    <para>The news server is located at
    <uri>news.linuxfromscratch.org</uri>.</para>

  </sect2> -->

  <sect2 id="ch-intro-irc">
    <title>IRC 频道</title>

    <para>有些 LFS 的社区成员也会在 IRC 上为别人提供帮助。在使用这种方法之前，请保证问题在 LFS 的 FAQ 或者是邮件列表中没有提及。您可以通过 <uri>irc.freenode.net</uri> 查找 #LFS-support 加入讨论。</para>

  </sect2>

  <!-- Commentted out until the target link is updated
  <sect2 id="ch-intro-references">
    <title>References</title>

    <para>For additional information on the packages, useful tips are
    available in the LFS Package Reference page located at <ulink
    url="http://www.linuxfromscratch.org/~matthew/LFS-references.html"/>.</para>

  </sect2>  -->

  <sect2 id="ch-intro-mirrors" xreflabel="&#x7B2C; 1 &#x7AE0; - &#x955C;&#x50CF;&#x7AD9;&#x70B9;">
    <title>镜像站点</title>

    <para>LFS 项目在世界范围内有许多镜像站点,方便大家访问我们的网站以及下载所需文件。请访问 LFS 站点 <ulink url="http://www.linuxfromscratch.org/mirrors.html"/> 查看最新的镜像站点列表。</para>

  </sect2>

  <sect2 id="ch-intro-contactinfo">
    <title>联系信息</title>

    <para>请直接通过某个 LFS 邮件列表（上文已列出）提出问题和评论。</para>

  </sect2>

</sect1>
  <sect1 id="ch-intro-askforhelp">
  <?dbhtml filename="askforhelp.html"?>

  <title>帮助</title>

  <para>如果在使用本书的过程中有疑问或碰到问题，可以先去看下 FAQ 页面<ulink url="http://www.linuxfromscratch.org/faq/#generalfaq"/>。那里已经解决了很多经常遇到的问题。如果你的问题在那里找不到答案，可以先尝试找出问题的原因。下面页面里的提示可以提供一些帮你定位问题的帮助：<ulink url="http://www.linuxfromscratch.org/hints/downloads/files/errors.txt"/>。
  </para>

  <para>如果在 FAQ 里找不到你遇到的问题，还可以在这个邮件列表里搜索一下：<ulink url="http://www.linuxfromscratch.org/search.html"/>。</para>

  <para>我们还有一个很棒的 LFS 社区，大家都很乐意通过邮件列表和 IRC 提供协助（参看本书的 <xref linkend="ch-intro-resources"/>）。不过，我们每天收到的支持问题中有很多其实可以通过查看 FAQ 和搜索邮件列表轻松解决。所以为了让我们能最大可能地提供更好的协助，希望你碰到问题能自己先研究一下。这样可以让我们有精力去关注更罕见问题。如果你自己搜索不到解决方式，请在你的帮助请求里收集所有相关信息（下面提到的）。</para>

  <sect2>
    <title>需要提供的信息</title>

    <para>除了对遇到的问题的简短描述外，帮助请求里还需要包含的以下的关键信息：</para>

    <itemizedlist>
      <listitem>
        <para>所用手册的版本（当前版本为 
              
              <phrase revision="systemd">8.4-systemd</phrase>）</para>
      </listitem>
      <listitem>
        <para>用来构建 LFS 的宿主机器的 Linux 发行版以及版本</para>
      </listitem>
      <listitem>
        <para>本手册 <xref linkend="version-check"/> 中脚本的所有输出信息</para>
      </listitem>
      <listitem>
        <para>出现问题的软件包或本手册的章节</para>
      </listitem>
      <listitem>
        <para>精确的错误信息或表现形式</para>
      </listitem>
      <listitem>
        <para>注明你是否已经脱离了本书的内容</para>
      </listitem>
    </itemizedlist>

    <note>
      <para>脱离本手册的内容并<emphasis>不</emphasis>意味着我们就一定不会帮你。毕竟，LFS 还是属于个人爱好。坦率地告知别人对已验证的流程作出的任何改动，有助于我们评估和找到你问题的可能原因。</para>
    </note>

  </sect2>

  <sect2>
    <title> 配置脚本问题</title>

    <para>如果在运行 <command moreinfo="none">configure</command> 脚本时遇到问题，查看一下 <filename moreinfo="none">config.log</filename> 文件。这个文件中可能会包含 <command moreinfo="none">configure</command> 脚本运行时没有输出到屏幕上的错误信息。想寻求帮助的话请包含<emphasis>相关</emphasis>行。</para>

  </sect2>

  <sect2>
    <title>编译问题</title>

    <para>屏幕上的显示输出和各个文件的内容都有助于定位编译发生问题的原因。<command moreinfo="none">configure</command> 和 <command moreinfo="none">make</command> 命令的输出信息都有用。然而通常并不需要在寻求帮助时将这些信息一股脑的贴出来，但是一定要包含足够的相关信息。下面的例子就是在执行 <command moreinfo="none">make</command> 命令出错后应该贴出来的输出信息：</para>

<screen format="linespecific"><computeroutput moreinfo="none">gcc -DALIASPATH=\"/mnt/lfs/usr/share/locale:.\"
-DLOCALEDIR=\"/mnt/lfs/usr/share/locale\"
-DLIBDIR=\"/mnt/lfs/usr/lib\"
-DINCLUDEDIR=\"/mnt/lfs/usr/include\" -DHAVE_CONFIG_H -I. -I.
-g -O2 -c getopt1.c
gcc -g -O2 -static -o make ar.o arscan.o commands.o dir.o
expand.o file.o function.o getopt.o implicit.o job.o main.o
misc.o read.o remake.o rule.o signame.o variable.o vpath.o
default.o remote-stub.o version.o opt1.o
-lutil job.o: In function `load_too_high':
/lfs/tmp/make-3.79.1/job.c:1565: undefined reference
to `getloadavg'
collect2: ld returned 1 exit status
make[2]: *** [make] Error 1
make[2]: Leaving directory `/lfs/tmp/make-3.79.1'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/lfs/tmp/make-3.79.1'
make: *** [all-recursive-am] Error 2</computeroutput></screen>

    <para>在此例子中，很多人可能仅仅就贴出最后的一部分：</para>

<screen format="linespecific"><computeroutput moreinfo="none">make [2]: *** [make] Error 1</computeroutput></screen>

    <para>这样的信息并不能用于诊断问题，实际上它仅仅是告知别人出了问题，却没有指出到底是哪里出现问题。这也就是为什么要提供更加完整的信息。比如在上面的例子中，就告诉别人所执行的命令及相应的错误信息。</para>

    <para>这个链接 <ulink url="http://catb.org/~esr/faqs/smart-questions.html"/> 中的文章告知人们如何在互联网上寻求帮助，可以去看一下，且遵循其中的提问原则进行提问，可以提高获得帮助的概率（亦让别人对你伸出援手更加方便）。</para>

  </sect2>

</sect1>
  <!--<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="livecd.xml"/>-->

</chapter>
</part>

<part id="part2">
<title>准备构建</title>
<?dbhtml filename="part2.html"?>
<chapter id="chapter-partitioning" xreflabel="&#x7B2C; 2 &#x7AE0;" xml:base="chapter02/chapter02.xml">
  <?dbhtml dir="chapter02"?>
  <?dbhtml filename="chapter02.html"?>

  <title>准备宿主系统</title>

  <sect1 id="space-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>本章将检查宿主机上用于构建 LFS 的工具，没有的话，安装它们。然后，会准备用于安装 LFS 的分区。包括建立分区、为分区设置文件系统，挂载分区。</para>

</sect1>
  <sect1 id="pre-hostreqs" xreflabel="Host System Requirements">
  <?dbhtml filename="hostreqs.html"?>

  <title>宿主系统要求</title>

    <para>你的主机系统应具有以下指定最低版本的软件。 对于大多数现代 Linux 发行版来说，这应该不是问题。 另请注意，不少发行版可能会将软件的头文件单独打包，并采用「&lt;package-name&gt;-devel」或「&lt;package-name&gt;-dev」的形式命名。如果你的发行版提供了这样的软件包，请务必安装。</para>

   <para>所列软件包的早期版本可能也能用，但尚未经过测试。</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> （/bin/sh 应该是 bash 的符号链接或硬链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.25</emphasis> （不建议使用 2.32 以后的版本，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> （/usr/bin/yacc 应该是指向 bison 或执行 bison 的小型脚本的链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bzip2-1.0.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-6.9</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> （/usr/bin/awk 应该是 gawk 的链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">GCC-5.2</emphasis> 包括 C++ 编译器，<command moreinfo="none">g++</command> （8.2.0 以后的版本不建议使用，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Glibc-2.11</emphasis> （2.29 以后的版本不建议使用，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-3.2</emphasis></para>

      <para>之所以指定使用这一版本的内核，是因为这是第 6 章构建 <application moreinfo="none">glibc</application> 的需求，开发人员如是建议。udev 也有这个需求。</para>

      <para>如果宿主机内核早于 3.2，则需使用更新版本的内核将其替换。有两种方法可以解决这个问题。首先，查看你的 Linux 供应商是否提供 3.2 或更高版本内核的软件包。如果提供的话，你便能如愿安装了。如果你的供应商不提供合适的内核（的软件包），或者是你不想直接安装，你也可以自己编译内核。编译内核和配置引导的说明（假设宿主机使用 GRUB）位于 <xref linkend="chapter-bootable"/>。</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-4.7</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>请注意，依据本手册的指导构建 LFS 系统需确保上述提到的符号链接无误。虽然指向其他软件（例如 dash，mawk 等）的符号链接可能也可以，但 LFS 开发团队尚未对其进行测试或支持，并且这样做可能导致对于个别软件包在执行命令或者应用某些补丁的时候出现偏差。</para>
  </important>

  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
  <bridgehead renderas="sect2" id="version-check" xreflabel="&#x5BBF;&#x4E3B;&#x7CFB;&#x7EDF;&#x9700;&#x6C42;">
  </bridgehead>
  <!--<title> </title>-->

  <para>查看宿主机系统是否已具备所有软件包的适当版本和编译程序的能力，请运行以下命令：</para>

<!-- ANY additional lines in the script cause a pdf rendering problem-->
<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; version-check.sh &lt;&lt; "EOF"
<literal moreinfo="none">#!/bin/bash
# Simple script to list version numbers of critical development tools
export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -&gt; $MYSH"
echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
unset MYSH

echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1

if [ -h /usr/bin/yacc ]; then
  echo "/usr/bin/yacc -&gt; `readlink -f /usr/bin/yacc`";
elif [ -x /usr/bin/yacc ]; then
  echo yacc is `/usr/bin/yacc --version | head -n1`
else
  echo "yacc not found" 
fi

bzip2 --version 2&gt;&amp;1 &lt; /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1

if [ -h /usr/bin/awk ]; then
  echo "/usr/bin/awk -&gt; `readlink -f /usr/bin/awk`";
elif [ -x /usr/bin/awk ]; then
  echo awk is `/usr/bin/awk --version | head -n1`
else 
  echo "awk not found" 
fi

gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d" " -f2-  # glibc version
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
python3 --version
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1  # texinfo version
xz --version | head -n1
<?hard-pagebreak?>
echo 'int main(){}' &gt; dummy.c &amp;&amp; g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy</literal>
EOF

bash version-check.sh</userinput></screen>
<!--
  <para>同时，还请进行库文件的一致性检查：</para>

<screen role="nodump"><userinput>cat &gt; library-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
for lib in lib{gmp,mpfr,mpc}.la; do
  echo $lib: $(if find /usr/lib* -name $lib|
               grep -q $lib;then :;else echo not;fi) found
done
unset lib</literal>
EOF

bash library-check.sh</userinput></screen>

<para>这些文件应该要么都在或者是都缺失，而不应该只有一两个。</para>
-->

</sect1>
  <sect1 id="stages">
  <?dbhtml filename="stages.html"?>

  <title>分阶段构建 LFS</title>

  <para>LFS 的设计是建立在一个会话中的。这也就是说假定系统在处理的过程中不会关机。但是实际上这并不意味着 LFS 的构建需要一气呵成。但是如果 LFS 恢复时的状态和之前不同，则某些程序必须在此之后重新构建。</para>

  <sect2>
  <title>第 1-4 章</title>

    <para>当在主机系统各种完成此章节的内容，重启时，需要注意一下的内容：</para>

    <itemizedlist>
      <listitem>
         <para>程序在 2.4 节以后都是以 root 用户完成的。所以需要重新将 LFS 的环境变量设置为 <emphasis>ROOT</emphasis>。</para>
      </listitem>
    </itemizedlist>
  </sect2>

  <sect2>
  <title>第 5 章</title>

    <itemizedlist>
      <listitem>
         <para>/mnt/lfs 分区必须挂载。</para>
      </listitem>

      <listitem>
         <para>第 5 章涉及的<emphasis>所有</emphasis>指令都应该由 <emphasis>lfs</emphasis> 用户执行。所以在执行第 5 章的任务之前请先执行 <command moreinfo="none">su - lfs</command>。</para>
      </listitem>

      <listitem>
         <para><xref linkend="ch-tools-generalinstructions"/> 中提及的程序是十分重要的。如果在安装任何软件包时存在问题，请确保所有之前已经解压的软件包已经删除。重新将它们解压后再完成此章节中的所有命令。</para>
      </listitem>
    </itemizedlist>
  </sect2>

  <sect2>
  <title>第 6-8 章</title>

    <itemizedlist>
      <listitem>
         <para> /mnt/lfs 分区必须挂载。</para>
      </listitem>

      <listitem>
         <para> 当进入 chroot 环境，LFS 环境变量必须设置为 root 用户。否则不得使用 LFS 变量。</para>
      </listitem>

      <listitem>
         <para> 必须挂载虚拟文件系统。这可以在进入 chroot 之前或者之后通过改变主机的虚拟终端，以 root 用户执行 <xref linkend="ch-system-bindmount"/> 和 <xref linkend="ch-system-kernfsmount"/> 中的命令。</para>
      </listitem>
    </itemizedlist>
  </sect2>
</sect1>
  <sect1 id="space-creatingpartition">
  <?dbhtml filename="creatingpartition.html"?>

  <title>创建新分区</title>

  <para>与绝大多数其它操作系统相同，安装 LFS 通常需要专门的分区。构建 LFS 系统比较推荐的方法是使用可用的空分区，或者如果条件允许，最好是在未分区的空间里新建分区。</para>

<!--

  <para>It is possible to install an LFS system (in fact even multiple LFS
  systems) on a partition already occupied by another
  operating system and the different systems will co-exist peacefully. The
  document <ulink url="&hints-root;lfs_next_to_existing_systems.txt"/>
  contains notes on how to implement this. This document was last updated
  in 2004. It has not been updated since and it has not been tested with
  recent versions of this LFS book. The document is more than likely not
  usable as-is and you will need to account for changes made to the LFS
  procedures since it was written. This is only recommended for expert LFS
  users.</para>

-->

  <para>最小化的系统需要大约 6 GB 的分区，这足以存储所有的源码包及满足编译的需求。但如果要将 LFS 作为主要的 Linux 系统，可能需要安装其它附加的软件，这将需要额外的空间。考虑到了日后所需的空间，一个 20 GB 的分区是比较合理的。LFS 系统本身并不会占用这么多的空间，但大分区将能提供充裕的临时储存空间，并为完成 LFS 以后添加附加功能留有余地。编译软件包可能需要较大的磁盘空间，但这些空间可以在软件包安装后回收。</para>

  <para>由于编译过程中所需的内存（RAM）可能不足，用一个小型的磁盘分区作为 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 空间是个不错的想法。内核会在此分区中储存较少使用的数据，从而为活动进程提供更多的内存。LFS 系统可以与宿主系统共用 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区，这样就没有必要再新建一个了。</para>

  <para>启动磁盘分区程序，通过如 <command moreinfo="none">cfdisk</command> 或 <command moreinfo="none">fdisk</command> 加上新分区所在的磁盘名——例如 <filename class="devicefile" moreinfo="none">/dev/sda</filename> 若是主盘为 IDE 的话。你需要创建一个 Linux 本地分区，并按需创建 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区。如果你还不知道如何使用这些程序，请参考 <filename moreinfo="none">cfdisk(8)</filename> 或 <filename moreinfo="none">fdisk(8)</filename>。</para>

  <note><para>对于有经验的用户，也可自行定制分区分案。新版 LFS 系统支持软件 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/raid.html">RAID</ulink> 阵列或 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/aboutlvm.html">LVM</ulink> 然而，这些方案需要用到 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/initramfs.html">initramfs</ulink>，这涉及到比较复杂的话题。并不建议首次尝试 LFS 的用户使用这样的分区方法。</para></note>

  <para>请记住新分区的位置（例如，<filename class="devicefile" moreinfo="none">sda5</filename>）。本书中将称其为 LFS 分区。还需要记住 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区的位置。这些将会在<filename moreinfo="none">/etc/fstab</filename> 文件中用到。</para>

  <sect2>
  <title>其它分区问题</title>

  <para>LFS 邮件列表中经常有人问到关于系统分区的建议。这一话题非常主观。大多数发行版默认情况下会使用整个磁盘，仅为交换分区保留一小部分空间，但由于种种原因，这并不适合 LFS。这样做会降低灵活性，使得多个发行版或几个 LFS 版本之间共享数据变得困难，也让备份更耗时，还会导致文件系统结构分配不合理而浪费磁盘空间。</para>

    <sect3>
    <title>根分区</title>

    <para>为 LFS 根分区（不要与 <filename class="directory" moreinfo="none">/root</filename> 目录混淆）分配 10 GB 的空间是比较好的折中方案。这为构建 LFS 和大多数 BLFS 提供了足够的空间，也小到可以轻易创建多个分区用于实验。</para> </sect3>

    <sect3>
    <title>交换分区</title>

    <para>大多数发行版会自动创建交换分区。一般来说，交换分区的推荐大小为物理内存的两倍左右，然而鲜少需要这样做。若是磁盘空间有限，可以设置为 2 GB的交换分区并查看磁盘的交换量。</para>

    <para>发生内存交换其实并不好。通常，你只需要观察磁盘活动以及系统对命令的响应程度就能知道这个系统是否在进行交换。通常在使用非常不合理的命令时才会发生交换，如尝试编辑一个大小为 5 GB 的文件时。如果交换在你的系统上是常态，那最好的办法就是为你的系统添置更多的物理内存。</para> 
    </sect3>

    <sect3>
    <title>Grub Bios 分区</title>

    <para>如果是在 GPT（GUID Partition Table，GUID 分区表）下分 <emphasis>boot 磁盘</emphasis>，那么必然会产生一个约 1 MB 左右的小分区，如果之前没有的话。这个分区可能还没有被格式化，但是它必须存在，GRUB 会在安装引导器的时候用到。如果使用 <command moreinfo="none">fdisk</command>，该分区通常会被标记为「BIOS Boot」。而如果使用的是 <command moreinfo="none">gdisk</command>，则分区代码应为 <emphasis>EF02</emphasis> 。</para>

    <note><para>Grub Bios 分区必须位于 BIOS 用于引导系统的磁盘驱动器上。却不一定要和 LFS 的根分区位于同一个磁盘驱动器。一个系统里的磁盘可能会用到不同类型的分区表。该磁盘仅与 boot 磁盘的分区表类型有关。</para></note>
    </sect3>

    <sect3>
    <title>常用分区</title>

    <para>在分配磁盘时，有些分区不是必须的，但却值得你考虑。以下列表并不全面，仅供参考。</para>

    <itemizedlist>

      <listitem><para>/boot – 强烈推荐。此分区用于存储内核和其它启动信息。为了减少大容量磁盘启动时的潜在问题，尽量将该分区设为磁盘驱动器上第一个物理分区。100 MB 的空间就十分充裕了。</para></listitem>

      <listitem><para>/home – 强烈推荐。home 目录可用于跨发行版或多个 LFS 版本之间共享用户自定义内容。应该将尽量多的磁盘都分配给 home 分区。</para></listitem>

      <listitem><para>/usr – 独立的 /usr 分区常见于瘦客户端服务器或无盘工作站。LFS 通常不需要。5 GB 大小足以应付大部分安装。</para></listitem>

      <listitem><para>/opt – 该目录常用于在 BLFS 中，安装多个像 Gnome 或 KDE 这样无需将文件嵌入 /usr 层次结构的大型软件包。如果使用的话，5 到 10 GB 的空间就足够了。</para>
      </listitem>

      <listitem><para>/tmp – 独立的 /tmp 分区是比较少见的，但这在配置瘦客户端时会有用。如果使用的话，很少超过几 GB。</para></listitem>

      <listitem><para>/usr/src – 该分区非常用于存储 BLFS 源文件并在构建不同版本的 LFS 中共享。它也可用于构建 BLFS 软件包。30-50 GB 的分区可以提供足够的空间。</para></listitem>

    </itemizedlist>

    <para>任何你需要在启动时自动挂载的单独分区都需要写入到 <filename moreinfo="none">/etc/fstab</filename> 文件中。有关如何指定分区的细节将在 <xref linkend="ch-bootable-fstab"/> 中讨论 。</para>

    </sect3>
  </sect2>
</sect1>
  <sect1 id="space-creatingfilesystem">
  <?dbhtml filename="creatingfilesystem.html"?>

  <title>在分区上创建文件系统</title>

  <para>现在已经有了一个空的分区，可以创建文件系统了。LFS 可以使用 Linux 内核能识别的任何文件系统，但最常用的类型是 ext3 和 ext4。当然，至于具体采用哪种文件系统，应该取决于所要存储的文件特点和分区的大小。例如：</para>

  <variablelist>
    <varlistentry>
      <term>ext2</term>
      <listitem><para>适用于那些分区容量不是太大，更新也不频繁的情况，例如 /boot 分区。</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ext3</term>
      <listitem><para>是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常中恢复。是常用作一般需求的文件系统。</para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ext4</term>
      <listitem><para>是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、以及速度的提升。</para>
      </listitem>
    </varlistentry>
  </variablelist>

  <para>其它文件系统，包括 FAT32、NTFS、ReiserFS、JFS 和 XFS 等都在专门领域有其独到的作用。关于这些文件系统更多的信息可以参考<ulink url="http://en.wikipedia.org/wiki/Comparison_of_file_systems"/>。</para>

  <para>LFS 假设要将根分区（/）的文件系统的类型设置为 ext4。运行如下指令，为 LFS 分区创建 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 文件系统：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkfs -v -t ext4 /dev/<replaceable>&lt;xxx&gt;</replaceable></userinput></screen>

  <para>请替换 <replaceable>&lt;xxx&gt;</replaceable> 为实际的 <systemitem class="filesystem" moreinfo="none">/</systemitem> 分区设备名。</para>
<!--
  <para>Replace <replaceable>&lt;xxx&gt;</replaceable> with the name of the LFS
  partition (<filename class="devicefile">sda5</filename> in our previous
  example).</para>

  <note>
    <para>Some host distributions use custom features in their filesystem
    creation tools (E2fsprogs). This can cause problems when booting into your new
    LFS in Chapter 9, as those features will not be supported by the LFS-installed
    E2fsprogs; you will get an error similar to「unsupported filesystem
    features, upgrade your e2fsprogs」. To check if your host system
    uses custom enhancements, run the following command:</para>

<screen role="nodump"><userinput>debugfs -R feature /dev/<replaceable>&lt;xxx&gt;</replaceable></userinput></screen>

    <para>If the output contains features other than
    <option>has_journal</option>, <option>ext_attr</option>,
    <option>resize_inode</option>, <option>dir_index</option>,
    <option>filetype</option>, <option>sparse_super</option>,
    <option>large_file</option> or <option>needs_recovery</option>, then your
    host system may have custom enhancements.  In that case, to avoid later
    problems, you should compile the stock E2fsprogs package and use the
    resulting binaries to re-create the filesystem on your LFS partition:</para>

<screen role="nodump"><userinput>cd /tmp
tar -xzvf /path/to/sources/e2fsprogs-&e2fsprogs-version;.tar.gz
cd e2fsprogs-&e2fsprogs-version;
mkdir -v build
cd build
../configure
make #note that we intentionally don't 'make install' here!
./misc/mke2fs -jv /dev/<replaceable>&lt;xxx&gt;</replaceable>
cd /tmp
rm -rfv e2fsprogs-&e2fsprogs-version;</userinput></screen>
  </note>
-->
  <para>如果你已经有了现成的 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区,不需要重新格式化。如果是新建的 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区，需要用下面的命令初始化：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkswap /dev/<replaceable>&lt;yyy&gt;</replaceable></userinput></screen>

  <para>请替换 <replaceable>&lt;yyy&gt;</replaceable> 为实际的 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区设备名。</para>

</sect1>
  <sect1 id="ch-partitioning-aboutlfs">
  <?dbhtml filename="aboutlfs.html"?>

  <title>设置 $LFS 变量</title>

  <para>在整本书里，会多次用到环境变量 <envar>LFS</envar>。你应该确保这个变量在整个 LFS 构建过程中总是定义了的。它应该被设置为你将要构建的 LFS 系统的目录名——这里我们使用 <filename class="directory" moreinfo="none">/mnt/lfs</filename> 作为例子，但是选择哪一个目录是你的自由。如果你把 LFS 构建到一个单独的分区里，这个目录将成为那个分区的挂载点。选择一个本地目录并用以下命令设置该变量：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">export LFS=<replaceable>/mnt/lfs</replaceable></userinput></screen>

  <para>设置这个变量的好处在于有些命令可以直接写成类似 <command moreinfo="none">mkdir -v $LFS/tools</command>这样。在处理这条命令时，会自动替换「$LFS」为「/mnt/lfs」（或任何这个变量所指的地方）。</para>

  <caution>
  <para>不论何时，当你离开又重新进入这个工作环境时都不要忘了检查 <envar>LFS</envar> 是否设置（比如当你使用 <command moreinfo="none">su</command> 切换到 <systemitem class="username" moreinfo="none">root</systemitem> 或是另一个用户时）。使用如下命令检查 <envar>LFS</envar> 变量是否正确设置：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">echo $LFS</userinput></screen>

  <para>请确保输出的是你构建 LFS 的那个目录的路径，如果你是按照例子设置的，那就是 <filename class="directory" moreinfo="none">/mnt/lfs</filename>。如果你输出的路径不正确，请使用本页前一部分提供的命令把 <envar>$LFS</envar> 重新设置到正确的目录。</para>
  </caution>

  <note><para>确保 <envar>LFS</envar> 变量一直为设置的一个方法是编辑你 home 目录下的 <filename moreinfo="none">.bash_profile</filename> 文件和 <filename moreinfo="none">/root/.bash_profile</filename>，并输入上述 export 命令。另外，在 <filename moreinfo="none">/etc/passwd</filename> 文件中，为所有需要的用户指定 <envar>LFS</envar> 变量的 shell 需要是 bash，以确保 <filename moreinfo="none">/root/.bash_profile</filename> 文件作为登录过程的一部分，并入其中。</para>
  
  <para>另一个考虑是登入宿主系统的方法。如果是通过图形显示管理器登入，那么就不会像寻常那样在虚拟终端启动时，采用用户的 <filename moreinfo="none">.bash_profile</filename> 文件。在这种情况下，需要将 export 命令添加至 root 用户的 <filename moreinfo="none">.bashrc</filename> 中。另外，有些发行版还有指令，在非交互式 bash 的调用中不让 <filename moreinfo="none">.bashrc</filename> 指令运行。在非交互式使用的测试前请保证 export 命令已经添加。</para>
  
  </note>

</sect1>
  <sect1 id="space-mounting">
  <?dbhtml filename="mounting.html"?>

  <title>挂载新分区</title>

  <para>至此，文件系统已经创建妥当，下一步就是访问这些分区了。为此，需要将这些建立的分区挂载到选定的挂载点。本书假定的挂载点为环境变量 <envar>LFS</envar> 指向的地址，如前文所述。</para>

  <para>创建挂载点并用下面的命令挂载 LFS 文件系统：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -pv $LFS
mount -v -t ext4 /dev/<replaceable>&lt;xxx&gt;</replaceable> $LFS</userinput></screen>

  <para>请用 LFS 分区替代 <replaceable>&lt;xxx&gt;</replaceable> 。</para>

  <para>如果 LFS 使用了多个分区（如，<filename class="directory" moreinfo="none">/</filename> 和 <filename class="directory" moreinfo="none">/usr</filename>)，需要挂载：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -pv $LFS
mount -v -t ext4 /dev/<replaceable>&lt;xxx&gt;</replaceable> $LFS
mkdir -v $LFS/usr
mount -v -t ext4 /dev/<replaceable>&lt;yyy&gt;</replaceable> $LFS/usr</userinput></screen>

  <para>请替换 <replaceable>&lt;xxx&gt;</replaceable> 和 <replaceable>&lt;yyy&gt;</replaceable> 为合适的分区名。</para>

  <para>请确保在挂载新分区时没有使用过于严格的权限参数（如 <option>nosuid</option> 或 <option>nodev</option> 选项）。运行不带任何参数的 <command moreinfo="none">mount</command> 命令来查看在挂载 LFS 分区时设置了什么参数。如果设置了 <option>nosuid</option> 和/或 <option>nodev</option> 参数，就需要重新挂载了。</para>

  <warning><para>上述说明假定你在 LFS 的过程中不会重启你的计算机。如果你关闭了你的系统，你将需要在每次重新开始构建过程时重新挂载 LFS 分区，或者修改你宿主系统的 /etc/fstab 文件，让每次重新启动后都自动挂载它。示例如下：

<screen role="nodump" format="linespecific">/dev/<replaceable>&lt;xxx&gt;</replaceable>  /mnt/lfs ext4   defaults      1     1</screen>

  如果你还需使用其它可选分区，那就确保将它们也一并添加。

  </para></warning>


  <para>如果你要使用 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区，请使用 <command moreinfo="none">swapon</command> 命令确保它是可用的：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">/sbin/swapon -v /dev/<replaceable>&lt;zzz&gt;</replaceable></userinput></screen>

  <para>请替换 <replaceable>&lt;zzz&gt;</replaceable> 为 <systemitem class="filesystem" moreinfo="none">swap</systemitem> 分区名。</para>

  <para>至此你已经建立了自己的工作空间，是时候下载软件包了。</para>

</sect1>

</chapter>
<chapter id="chapter-getting-materials" xreflabel="&#x7B2C; 3 &#x7AE0;" xml:base="chapter03/chapter03.xml">
  <?dbhtml dir="chapter03"?>
  <?dbhtml filename="chapter03.html"?>

  <title>软件包和补丁</title>

  <sect1 id="materials-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>本章列出了一张软件包的清单，你需要下载它们来构建一个基础的 Linux 系统。列出的软件版本号便是该软件经过确认可以正常工作的版本，也是成书时我们使用的版本。我们强烈建议不要使用更新的版本，因为某个版本的编译指令并不一定适用于更新版本。最新的软件包会包含许多问题，需要特别对应。这些对应方法会在本书的开发版本中解决并固定下来。</para>

  <para>我们无法保证下载的地址是一直有效的。如果在本书发布后下载地址变了，大部分软件包可以用 Google （<ulink url="http://www.google.com/"/>）解决。如果连搜索也失败了，那不妨试一试 <ulink url="http://www.linuxfromscratch.org/lfs/packages.html#packages"/> 中提到的其他下载地址。</para>

  <para>下载好的软件包和补丁需要保存在某处，这个某处最好是一个在整个构建过程中都能便捷地访问到的地方。另外还需要一个工作目录，用于解压并构建源码。<filename class="directory" moreinfo="none">$LFS/sources</filename> 可以同时作为软件包、补丁的存放所和工作目录。通过这个目录，所有需要的元素都将存储在 LFS 分区中，并且在整个构建过程中都可以访问。</para>

  <para>在开始下载任务之前，先用 <systemitem class="username" moreinfo="none">root</systemitem> 用户执行下面的命令，创建这个目录：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -v $LFS/sources</userinput></screen>

  <para>设置目录的写权限和粘滞模式。「粘滞模式」是指，即便多个用户对某个目录有写权限，但仅有文件的所有者，能在粘滞目录中删除该文件。运行以下命令将开启目录的写权限和粘滞模式：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">chmod -v a+wt $LFS/sources</userinput></screen>

  <para>一个简单的一口气下载所有软件包和补丁的方法是使用 <ulink url="../wget-list">wget-list</ulink> 作为 <command moreinfo="none">wget</command> 的输入。例如：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">wget --input-file=wget-list --continue --directory-prefix=$LFS/sources</userinput></screen>

  <para>LCTT 译注：由于这些文件都分布在国外的不同站点上，因此有些下载的会很慢。非常感谢中国科学技术大学镜像站提供的 LFS 软件包：<ulink url="http://mirrors.ustc.edu.cn/lfs/lfs-packages/8.4/"/></para>

  <para>另外，从 LFS-7.0 开始，多了一个单独的文件 <ulink url="../md5sums">md5sums</ulink>，可以在正式开始前校验所有的文件是否都正确。将这个文件复制到 <filename class="directory" moreinfo="none">$LFS/sources</filename> 目录中并执行：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">pushd $LFS/sources
md5sum -c md5sums
popd</userinput></screen>

</sect1>
  <sect1 id="materials-packages">
  <?dbhtml filename="packages.html"?>

  <title>所有软件包</title>

  <para>下载或使用别的方式获取如下软件包：</para>

  <variablelist role="materials">

    <varlistentry>
      <term>Acl (2.2.53) - <token>513 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url=" "/></para>
        <para>下载： <ulink url="http://download.savannah.gnu.org/releases/acl/acl-2.2.53.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">007aabf1dbb550bcddde52a244cd1070</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Attr (2.4.48) - <token>457 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://savannah.nongnu.org/projects/attr"/></para>
        <para>下载： <ulink url="http://download.savannah.gnu.org/releases/attr/attr-2.4.48.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">bc1e5cb5c96d99b24886f1f527d3bb3d</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Autoconf (2.69) - <token>1,186 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/autoconf/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">50f97f4159805e374639a73e2636f22e</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Automake (1.16.1) - <token>1,499 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/automake/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/automake/automake-1.16.1.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">53f38e7591fa57c3d2cee682be668e5b</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Bash (5.0) - <token>9,898 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/bash/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">2b44b47b905be16f45709648f671820b</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Bc (1.07.1) - <token>411 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/bc/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/bc/bc-1.07.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">cda93857418655ea43590736fc3ca9fc</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Binutils (2.32) - <token>20,288 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/binutils/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/binutils/binutils-2.32.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">0d174cdaf85721c5723bf52355be41e6</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Bison (3.3.2) - <token>2,060 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/bison/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/bison/bison-3.3.2.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">c9b552dee234b2f6b66e56b27e5234c9</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Bzip2 (1.0.6) - <token>764 KB</token>:</term>
      <listitem>
        <!--<para>主页： <ulink url="&bzip2-home;"/></para>-->
        <para>下载： <ulink url="http://anduin.linuxfromscratch.org/LFS/bzip2-1.0.6.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">00b516f4704d4a7cb50a1d97e6e8e15b</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Check (0.12.0) - <token>747 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://libcheck.github.io/check"/></para>
        <para>下载： <ulink url="https://github.com/libcheck/check/releases/download/0.12.0/check-0.12.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">31b17c6075820a434119592941186f70</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Coreutils (8.30) - <token>5,234 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/coreutils/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/coreutils/coreutils-8.30.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">ab06d68949758971fe744db66b572816</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry revision="systemd">
      <term>D-Bus (1.12.12) - <token>2,029 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.freedesktop.org/wiki/Software/dbus"/></para>
        <para>下载： <ulink url="https://dbus.freedesktop.org/releases/dbus/dbus-1.12.12.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">ea11069521beeee4e47f0086596a43c8</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>DejaGNU (1.6.2) - <token>514 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/dejagnu/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.2.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">e1b07516533f351b3aba3423fafeffd6</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Diffutils (3.7) - <token>1,415 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/diffutils/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">4824adc0e95dbbf11dfbdfaad6a1e461</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>E2fsprogs (1.44.5) - <token>7,448 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://e2fsprogs.sourceforge.net/"/></para>
        <para>下载： <ulink url="https://downloads.sourceforge.net/project/e2fsprogs/e2fsprogs/v1.44.5/e2fsprogs-1.44.5.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">8d78b11d04d26c0b2dd149529441fa80</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Elfutils (0.176) - <token>8,444 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://sourceware.org/ftp/elfutils/"/></para>
        <para>下载： <ulink url="https://sourceware.org/ftp/elfutils/0.176/elfutils-0.176.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">077e4f49320cad82bf17a997068b1db9</literal></para>
      </listitem>
    </varlistentry>

    

    <varlistentry>
      <term>Expat (2.2.6) - <token>502 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://libexpat.github.io/"/></para>
        <para>下载： <ulink url="https://prdownloads.sourceforge.net/expat/expat-2.2.6.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">ca047ae951b40020ac831c28859161b2</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Expect (5.45.4) - <token>618 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://core.tcl.tk/expect/"/></para>
        <para>下载： <ulink url="https://prdownloads.sourceforge.net/expect/expect5.45.4.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">00fce8de158422f5ccd2666512329bd2</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>File (5.36) - <token>856 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.darwinsys.com/file/"/></para>
        <para>下载： <ulink url="ftp://ftp.astron.com/pub/file/file-5.36.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">9af0eb3f5db4ae00fffc37f7b861575c</literal></para>

        <note>
          <para>File (5.36) 可能已经不能从列出的地址下载了。该站点管理员在新版本发布后删除了旧版本。合适版本的替代下载地址为： <ulink url="http://www.linuxfromscratch.org/lfs/download.html#ftp"/>。</para>
        </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Findutils (4.6.0) - <token>3,692 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/findutils/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/findutils/findutils-4.6.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">9936aa8009438ce185bea2694a997fc1</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Flex (2.6.4) - <token>1,386 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://github.com/westes/flex"/></para>
        <para>下载： <ulink url="https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">2882e3179748cc9f9c23ec593d6adc8d</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Gawk (4.2.1) - <token>2,916 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gawk/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gawk/gawk-4.2.1.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">95cf553f50ec9f386b5dfcd67f30180a</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>GCC (8.2.0) - <token>61,974 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://gcc.gnu.org/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">4ab282f414676496483b3e1793d07862</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>GDBM (1.18.1) - <token>920 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gdbm/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gdbm/gdbm-1.18.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">988dc82182121c7570e0cb8b4fcd5415</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Gettext (0.19.8.1) - <token>7,041 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gettext/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gettext/gettext-0.19.8.1.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">df3f5690eaa30fd228537b00cb7b7590</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Glibc (2.29) - <token>16,129 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/libc/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/glibc/glibc-2.29.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">e6c279d5b2f0736f740216f152acf974</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>GMP (6.1.2) - <token>1,901 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gmp/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">f58fa8001d60c4c77595fbbb62b63c1d</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Gperf (3.1) - <token>1,188 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gperf/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gperf/gperf-3.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">9e251c0a618ad0824b51117d5d9db87e</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Grep (3.3) - <token>1,440 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/grep/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/grep/grep-3.3.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">05d0718a1b7cc706a4bdf8115363f1ed</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Groff (1.22.4) - <token>4,044 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/groff/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/groff/groff-1.22.4.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">08fb04335e2f5e73f23ea4c3adbf0c5f</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>GRUB (2.02) - <token>5,970 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/grub/"/></para>
        <para>下载： <ulink url="https://ftp.gnu.org/gnu/grub/grub-2.02.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">8a4a2a95aac551fb0fba860ceabfa1d3</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Gzip (1.10) - <token>757 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/gzip/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">691b1221694c3394f1c537df4eee39d3</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Iana-Etc (2.30) - <token>201 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://freecode.com/projects/iana-etc"/></para>
        <para>下载： <ulink url="http://anduin.linuxfromscratch.org/LFS/iana-etc-2.30.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">3ba3afb1d1b261383d247f46cb135ee8</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Inetutils (1.9.4) - <token>1,333 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/inetutils/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/inetutils/inetutils-1.9.4.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">87fef1fa3f603aef11c41dcc097af75e</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Intltool (0.51.0) - <token>159 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://freedesktop.org/wiki/Software/intltool"/></para>
        <para>下载： <ulink url="https://launchpad.net/intltool/trunk/0.51.0/+download/intltool-0.51.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">12e517cac2b57a0121cda351570f1e63</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>IPRoute2 (4.20.0) - <token>691 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.kernel.org/pub/linux/utils/net/iproute2/"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-4.20.0.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">f3dab4c812812bbb5873cb90f471bcbf</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Kbd (2.0.4) - <token>1,008 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://ftp.altlinux.org/pub/people/legion/kbd"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/utils/kbd/kbd-2.0.4.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">c1635a5a83b63aca7f97a3eab39ebaa6</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Kmod (26) - <token>540 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url=" "/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/utils/kernel/kmod/kmod-26.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">1129c243199bdd7db01b55a61aa19601</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Less (530) - <token>332 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.greenwoodsoftware.com/less/"/></para>
        <para>下载： <ulink url="http://www.greenwoodsoftware.com/less/less-530.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">6a39bccf420c946b0fd7ffc64961315b</literal></para>
      </listitem>
    </varlistentry>

    

    <varlistentry>
      <term>Libcap (2.26) - <token>66 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://sites.google.com/site/fullycapable/"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-2.26.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">968ac4d42a1a71754313527be2ab5df3</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Libffi (3.2.1) - <token>920 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://sourceware.org/libffi/"/></para>
        <para>下载： <ulink url="ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">83b89587607e3eb65c70d361f13bab43</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Libpipeline (1.5.1) - <token>965 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://libpipeline.nongnu.org/"/></para>
        <para>下载： <ulink url="http://download.savannah.gnu.org/releases/libpipeline/libpipeline-1.5.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">4c8fe6cd85422baafd6e060f896c61bc</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Libtool (2.4.6) - <token>951 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/libtool/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">1bfb9b923f2c1339b4d2ce1807064aa5</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Linux (4.20.12) - <token>101,841 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.kernel.org/"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/kernel/v4.x/linux-4.20.12.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">edd3015435d60598b99cf6aaf223710e</literal></para>

        <note>
          <para>Linux 内核更新相对比较频繁，大多数时候是因为发现了安全漏洞。当前最新的 4.20.x 内核版本应该都可以使用，除非在勘误页有其他说明。</para>

          <para>对于网速较慢或带宽费用较高的用户如果希望更新 Linux 内核，可以将基线版本的软件包和补丁分开下载。针对次要版本中一连串的补丁程度的更新，这种操作方式也许能让你少费些时间，或者说功夫。</para>

        </note>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>M4 (1.4.18) - <token>1,180 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/m4/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">730bb15d96fffe47e148d1e09235af82</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Make (4.2.1) - <token>1,375 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/make/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/make/make-4.2.1.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">15b012617e7c44c0ed482721629577ac</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Man-DB (2.8.5) - <token>1,746 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.nongnu.org/man-db/"/></para>
        <para>下载： <ulink url="http://download.savannah.gnu.org/releases/man-db/man-db-2.8.5.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">c5c6c3434be14a5527d43b5ad0f09a13</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Man-pages (4.16) - <token>1,592 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.kernel.org/doc/man-pages/"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/docs/man-pages/man-pages-4.16.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">ad9f1ff81276fe8d90d077484d6d4b5e</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Meson (0.49.2) - <token>1,310 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://mesonbuild.com"/></para>
        <para>下载： <ulink url="https://github.com/mesonbuild/meson/releases/download/0.49.2/meson-0.49.2.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">0267b0871266056184c484792572c682</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>MPC (1.1.0) - <token>685 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.multiprecision.org/"/></para>
        <para>下载： <ulink url="https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">4125404e41e482ec68282a2e687f6c73</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>MPFR (4.0.2) - <token>1,409 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.mpfr.org/"/></para>
        <para>下载： <ulink url="http://www.mpfr.org/mpfr-4.0.2/mpfr-4.0.2.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">320fbc4463d4c8cb1e566929d8adc4f8</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Ninja (1.9.0) - <token>187 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://ninja-build.org/"/></para>
        <para>下载： <ulink url="https://github.com/ninja-build/ninja/archive/v1.9.0/ninja-1.9.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">f340be768a76724b83e6daab69009902</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Ncurses (6.1) - <token>3,288 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/ncurses/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/ncurses/ncurses-6.1.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">98c889aaf8d23910d2b92d65be2e737a</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>OpenSSL (1.1.1a) - <token>8,160 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.openssl.org/"/></para>
        <para>下载： <ulink url="https://openssl.org/source/openssl-1.1.1a.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">963deb2272d6be7d4c2458afd2517b73</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Patch (2.7.6) - <token>766 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://savannah.gnu.org/projects/patch/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/patch/patch-2.7.6.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">78ad9937e4caadcba1526ef1853730d5</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Perl (5.28.1) - <token>12,083 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.perl.org/"/></para>
        <para>下载： <ulink url="https://www.cpan.org/src/5.0/perl-5.28.1.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">fbb590c305f2f88578f448581b8cf9c4</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Pkg-config (0.29.2) - <token>1,970 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.freedesktop.org/wiki/Software/pkg-config"/></para>
        <para>下载： <ulink url="https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">f6e931e319531b736fadc017f470e68a</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Procps (3.3.15) - <token>884 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://sourceforge.net/projects/procps-ng"/></para>
        <para>下载： <ulink url="https://sourceforge.net/projects/procps-ng/files/Production/procps-ng-3.3.15.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">2b0717a7cb474b3d6dfdeedfbad2eccc</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Psmisc (23.2) - <token>297 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://psmisc.sourceforge.net/"/></para>
        <para>下载： <ulink url="https://sourceforge.net/projects/psmisc/files/psmisc/psmisc-23.2.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">0524258861f00be1a02d27d39d8e5e62</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Python (3.7.2) - <token>16,648 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.python.org/"/></para>
        <para>下载： <ulink url="https://www.python.org/ftp/python/3.7.2/Python-3.7.2.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">df6ec36011808205beda239c72f947cb</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Python Documentation (3.7.2) - <token>6,072 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="https://docs.python.org/ftp/python/doc/3.7.2/python-3.7.2-docs-html.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">107ade7bb17efd104a22b2d457f4cb67</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Readline (8.0) - <token>2,907 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://tiswww.case.edu/php/chet/readline/rltop.html"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">7e6c1f16aee3244a69aba6e438295ca3</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Sed (4.7) - <token>1,268 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/sed/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/sed/sed-4.7.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">777ddfd9d71dd06711fe91f0925e1573</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Shadow (4.6) - <token>1,639 KB</token>:</term>
      <listitem>
        <!-- <para>主页： <ulink url="&shadow-home;"/></para> -->
        <para>下载： <ulink url="https://github.com/shadow-maint/shadow/releases/download/4.6/shadow-4.6.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">b491fecbf1232632c32ff8f1437fd60e</literal></para>

        <!-- Using http://cdn.debian.net/debian/pool/main/s/shadow/
             for now since alioth has not reconstituted shadow -->
      </listitem>
    </varlistentry>

    

    <varlistentry revision="systemd">
      <term>systemd (240) - <token>7,412 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.freedesktop.org/wiki/Software/systemd/"/></para>
        <para>下载： <ulink url="https://github.com/systemd/systemd/archive/v240/systemd-240.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">0e4f91b513d4b04e2c10a5173e5a87b2</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry revision="systemd">
      <term>systemd Man Pages(240) - <token>460 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.freedesktop.org/wiki/Software/systemd/"/></para>
        <para>下载： <ulink url="http://anduin.linuxfromscratch.org/LFS/systemd-man-pages-240.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">ca49a25e1cf330b02adc07218f430dae</literal></para>

        <note>
          <para>Linux From Scratch 团队自制了 systemd man 手册的源码包。之所以这么做，是为了避免不必要的依赖。</para>
        </note>
      </listitem>
    </varlistentry>


    

    <varlistentry>
      <term>Tar (1.31) - <token>2,052 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/tar/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/tar/tar-1.31.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">bc9a89da1185ceb2210de12552c43ce2</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Tcl (8.6.9) - <token>9,772 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://tcl.sourceforge.net/"/></para>
        <para>下载： <ulink url="https://downloads.sourceforge.net/tcl/tcl8.6.9-src.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">aa0a121d95a0e7b73a036f26028538d4</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Texinfo (6.5) - <token>4,399 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://www.gnu.org/software/texinfo/"/></para>
        <para>下载： <ulink url="http://ftp.gnu.org/gnu/texinfo/texinfo-6.5.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">3715197e62e0e07f85860b3d7aab55ed</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Time Zone Data (2018i) - <token>369 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.iana.org/time-zones"/></para>
        <para>下载： <ulink url="https://www.iana.org/time-zones/repository/releases/tzdata2018i.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">b3f0a1a789480a036e58466cd0702477</literal></para>
      </listitem>
    </varlistentry>

    

    <varlistentry>
      <term>Util-linux (2.33.1) - <token>4,542 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="http://freecode.com/projects/util-linux"/></para>
        <para>下载： <ulink url="https://www.kernel.org/pub/linux/utils/util-linux/v2.33/util-linux-2.33.1.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">6fcfea2043b5ac188fd3eed56aeb5d90</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Vim (8.1) - <token>10,995 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.vim.org"/></para>
        <para>下载： <ulink url="ftp://ftp.vim.org/pub/vim/unix/vim-8.1.tar.bz2"/></para>
        <para>MD5 校验和： <literal moreinfo="none">1739a1df312305155285f0cfa6118294</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>XML::Parser (2.44) - <token>232 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://github.com/chorny/XML-Parser"/></para>
        <para>下载： <ulink url="https://cpan.metacpan.org/authors/id/T/TO/TODDR/XML-Parser-2.44.tar.gz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">af4813fe3952362451201ced6fbce379</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Xz Utils (5.2.4) - <token>1030 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://tukaani.org/xz"/></para>
        <para>下载： <ulink url="https://tukaani.org/xz/xz-5.2.4.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">003e4d0b1b1899fc6e3000b24feddf7c</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Zlib (1.2.11) - <token>457 KB</token>:</term>
      <listitem>
        <para>主页： <ulink url="https://www.zlib.net/"/></para>
        <para>下载： <ulink url="https://zlib.net/zlib-1.2.11.tar.xz"/></para>
        <para>MD5 校验和： <literal moreinfo="none">85adef240c5f370b308da8c938951a68</literal></para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>这些安装包的总计：约 <returnvalue/></para>

</sect1>
  <sect1 id="materials-patches">
  <?dbhtml filename="patches.html"?>

  <title>需要的补丁</title>

  <para>除了下载软件包外，还需要几个补丁。这些补丁修正了软件包中应该由维护者来解决的问题。补丁也会对软件包做一些小调整方便大家使用。构建 LFS 系统需要下面的补丁：</para>

  <variablelist role="materials">
<!--
    <varlistentry>
      <term>Bash 上游修复补丁 - <token>&bash-fixes-patch-size;</token>:</term>
      <listitem>
        <para>下载： <ulink url="&patches-root;&bash-fixes-patch;"/></para>
        <para>MD5 校验和： <literal>&bash-fixes-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
<!--
    <varlistentry>
      <term>Bc 内存泄漏补丁 - <token>&bc-memory-leak-patch-size;</token>:</term>
      <listitem>
        <para>下载： <ulink url="&patches-root;&bc-memory-leak-patch;"/></para>
        <para>MD5 校验和： <literal>&bc-memory-leak-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
    <varlistentry>
      <term>Bzip2 文档补丁 - <token>1.6 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="http://www.linuxfromscratch.org/patches/lfs/8.4/bzip2-1.0.6-install_docs-1.patch"/></para>
        <para>MD5 校验和： <literal moreinfo="none">6a5ac7e89b791aae556de0f745916f7f</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Coreutils 国际化修复补丁  - <token>168 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="http://www.linuxfromscratch.org/patches/lfs/8.4/coreutils-8.30-i18n-1.patch"/></para>
        <para>MD5 校验和： <literal moreinfo="none">a9404fb575dfd5514f3c8f4120f9ca7d</literal></para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term>Flex 修复补丁 - <token>&flex-fixes-patch-size;</token>:</term>
      <listitem>
        <para>下载： <ulink url="&patches-root;&flex-fixes-patch;"/></para>
        <para>MD5 校验和： <literal>&flex-fixes-patch-md5;</literal></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>Gccc ASAN 补丁 - <token>&gcc-asan-patch-size;</token>:</term>
      <listitem>
        <para>下载： <ulink url="&patches-root;&gcc-asan-patch;"/></para>
        <para>MD5 校验和： <literal>&gcc-asan-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
    <varlistentry>
      <term>Glibc FHS 补丁 - <token>2.8 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="http://www.linuxfromscratch.org/patches/lfs/8.4/glibc-2.29-fhs-1.patch"/></para>
        <para>MD5 校验和： <literal moreinfo="none">9a5997c3452909b1769918c759eff8a2</literal></para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term>Glibc Glob Security Patch - <token>&glibc-glob-patch-size;</token>:</term>
      <listitem>
        <para>Download: <ulink url="&patches-root;&glibc-glob-patch;"/></para>
        <para>MD5 sum: <literal>&glibc-glob-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
    <varlistentry>
      <term>Kbd Backspace/Delete 键修复补丁 - <token>12 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="http://www.linuxfromscratch.org/patches/lfs/8.4/kbd-2.0.4-backspace-1.patch"/></para>
        <para>MD5 校验和： <literal moreinfo="none">f75cca16a38da6caa7d52151f7136895</literal></para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term>Ninja Limit Jobs 补丁 - <token>&ninja-limit-jobs-patch-size;</token>:</term>
      <listitem>
        <para>下载: <ulink url="&patches-root;&ninja-limit-jobs-patch;"/></para>
        <para>MD5 校验和: <literal>&ninja-limit-jobs-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
<!--
    <varlistentry>
      <term>Readline 上游修复补丁 - <token>&readline-fixes-patch-size;</token>:</term>
      <listitem>
        <para>下载： <ulink url="&patches-root;&readline-fixes-patch;"/></para>
        <para>MD5 校验和： <literal>&readline-fixes-patch-md5;</literal></para>
      </listitem>
    </varlistentry>
-->
    

    <varlistentry revision="systemd">
      <term>systemd 安全补丁 - <token>14 KB</token>:</term>
      <listitem>
        <para>下载： <ulink url="http://www.linuxfromscratch.org/patches/lfs/8.4/systemd-240-security_fixes-2.patch"/></para>
        <para>MD5 校验和： <literal moreinfo="none">10abebce8ff5d9fd402623ace39b5ab8</literal></para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>这些补丁文件总大小: 约 <returnvalue/></para>

  <para>除了以上所要求的补丁外，还有一些由 LFS 社区创建的可选补丁。这些可选补丁或是解决了一些小问题，或是打开某个默认关闭的功能。请查阅补丁数据库 <ulink url="http://www.linuxfromscratch.org/patches/downloads/"/>，获取适合你系统需求的额外补丁。</para>

</sect1>

</chapter>
<chapter id="chapter-final-preps" xreflabel="&#x7B2C; 4 &#x7AE0;" xml:base="chapter04/chapter04.xml">
  <?dbhtml dir="chapter04"?>
  <?dbhtml filename="chapter04.html"?>

  <title>最后的准备工作</title>

  <sect1 id="prepare-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>在本章，我们还需要为构建临时系统做一些额外的准备工作。我们会在 <filename class="directory" moreinfo="none">$LFS</filename> 中新建一个用于安装临时工具的目录，增加一个非特权用户用于降低风险，并为该用户创建合适的构建环境。我们还会解释用于测量构建 LFS 软件包花费时间的单位，或称「SBUs」，并给出一些关于软件包测试套件的信息。</para>

</sect1>
  <!--<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="aboutlfs.xml"/>-->
  <sect1 id="ch-tools-creatingtoolsdir">
  <?dbhtml filename="creatingtoolsdir.html"?>

  <title>创建目录 $LFS/tools</title>

  <para>所有 <xref linkend="chapter-temporary-tools"/> 中编译的软件都会安装到 <filename class="directory" moreinfo="none">$LFS/tools</filename> 中，以确保和 <xref linkend="chapter-building-system"/> 中编译的软件相互分离。这里编译的软件是临时工具，并不会成为最终的 LFS 系统中的一部分。将这些软件保存在单独的目录中，用完后方便弃置。这样做也可以防止这些程序在宿主机生成目录中突然停止工作（在 <xref linkend="chapter-temporary-tools"/> 中很容易发生意外）。</para>

  <para>以 <systemitem class="username" moreinfo="none">root</systemitem> 用户运行以下的命令来创建需要的文件夹：</para>

<screen format="linespecific"><userinput moreinfo="none">mkdir -v $LFS/tools</userinput></screen>

  <para>下一步是在宿主系统中创建 <filename class="symlink" moreinfo="none">/tools</filename> 的符号链接。将其指向 LFS 分区中新建的目录。同样以 <systemitem class="username" moreinfo="none">root</systemitem> 用户运行下面的命令：</para>

<screen format="linespecific"><userinput moreinfo="none">ln -sv $LFS/tools /</userinput></screen>

  <note>
    <para>上面的命令是正确的。<command moreinfo="none">ln</command> 命令有一些语法变种，所以在报出你觉得可能是错误的信息之前检查一下 <command moreinfo="none">info coreutils ln</command> 和 <filename moreinfo="none">ln(1)</filename>。</para>
  </note>

  <para>创建的符号链接使得编译的工具链总是指向 <filename class="directory" moreinfo="none">/tools</filename> 文件夹，也就是说编译器、汇编器以及链接器无论是在第五章中（我们仍然使用宿主机的一些工具的时）还是之后（当我们「chrooted」到 LFS 分区时）都可以工作。</para>

</sect1>
  <sect1 id="ch-tools-addinguser">
  <?dbhtml filename="addinguser.html"?>

  <title>添加 LFS 用户</title>

  <para>当以 <systemitem class="username" moreinfo="none">root</systemitem> 用户登录时，犯一个小错误可能会破坏或摧毁整个系统。因此，我们建议在本章中以非特权用户编译软件包。你当然可以使用你自己的用户名，但为了使其更容易建立一个干净的工作环境，创建一个名为 <systemitem class="username" moreinfo="none">lfs</systemitem> 的新用户作为新组（同样命名为 <systemitem class="groupname" moreinfo="none">lfs</systemitem>）的成员，并在安装过程中使用这个用户。以 <systemitem class="username" moreinfo="none">root</systemitem> 用户运行以下命令来添加新用户：</para>

<screen format="linespecific"><userinput moreinfo="none">groupadd lfs
useradd -s /bin/bash -g lfs -m -k /dev/null lfs</userinput></screen>

  <variablelist>
    <title>命令行选项释义：</title>

    <varlistentry>
      <term><parameter moreinfo="none">-s /bin/bash</parameter></term>
      <listitem>
        <para>将 <command moreinfo="none">bash</command> 设置为 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户的默认 shell。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">-g lfs</parameter></term>
      <listitem>
        <para>这个选项将用户 <systemitem class="username" moreinfo="none">lfs</systemitem> 添加到组 <systemitem class="groupname" moreinfo="none">lfs</systemitem> 中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">-m</parameter></term>
      <listitem>
        <para>为 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户创建主目录。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">-k /dev/null</parameter></term>
      <listitem>
        <para>这个参数通过改变输入位置为特殊的空（null）设备，以防止可能从框架目录（默认是 <filename class="directory" moreinfo="none">/etc/skel</filename>）复制文件。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">lfs</parameter></term>
      <listitem>
        <para>这是创建的组和用户的实际名称。</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>要以 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户身份登录（相较于以 <systemitem class="username" moreinfo="none">root</systemitem> 身份登录的情况下切换到 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户时，无需为 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户设置密码），需要给 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户一个密码：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">passwd lfs</userinput></screen>

  <para>通过更改目录所有者为 <systemitem class="username" moreinfo="none">lfs</systemitem>，为用户 <systemitem class="username" moreinfo="none">lfs</systemitem> 赋予了访问 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录的所有权限：</para>

<screen format="linespecific"><userinput moreinfo="none">chown -v lfs $LFS/tools</userinput></screen>

  <para>如果你按照建议创建了单独的工作目录，给 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户赋予这个目录的所有权：</para>

<screen format="linespecific"><userinput moreinfo="none">chown -v lfs $LFS/sources</userinput></screen>

  <para>下一步，以 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户身份登录。可以能通过一个虚拟控制台、显示控制器，或者下面的切换用户命令完成：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">su - lfs</userinput></screen>

  <para>这个「<parameter moreinfo="none">-</parameter>」授意 <command moreinfo="none">su</command> 启动登录 shell，而非 non-login shell。关于这两种 shell 类型的区别，可以在 <filename moreinfo="none">bash(1)</filename> 和 <command moreinfo="none">info bash</command> 中查看详细详情。</para>

</sect1>
  <sect1 id="ch-tools-settingenviron">
  <?dbhtml filename="settingenvironment.html"?>

  <title>设置环境</title>

  <para>通过为 <command moreinfo="none">bash</command> shell 创建两个开机启动的文件，设置合适的工作环境。当以 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户身份登录时，运行以下命令创建一个新的 <filename moreinfo="none">.bash_profile</filename> 文件：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; ~/.bash_profile &lt;&lt; "EOF"
<literal moreinfo="none">exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash</literal>
EOF</userinput></screen>

  <para>当以 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户身份登录时，初始 shell 通常是一个 <emphasis>login</emphasis> 的 shell，它先读取宿主机的 <filename moreinfo="none">/etc/profile</filename> 文件（很可能包括一些设定和环境变量），然后是 <filename moreinfo="none">.bash_profile</filename> 文件。<filename moreinfo="none">.bash_profile</filename> 中的命令 <command moreinfo="none">exec env -i.../bin/bash</command> 用一个除了 <envar>HOME</envar>，<envar>TERM</envar> 和 <envar>PS1</envar> 变量外，其他环境完全为空的新 shell 代替运行中的 shell。这能确保不会有潜在的和意想不到的危险环境变量，从宿主机泄露到构建环境中。这样做主要是为了确保环境的干净。</para>

  <para>新的 shell 实例是一个 <emphasis>non-login</emphasis> 的 shell，不会读取 <filename moreinfo="none">/etc/profile</filename> 或者 <filename moreinfo="none">.bash_profile</filename> 文件，而是读取 <filename moreinfo="none">.bashrc</filename>。现在，创建 <filename moreinfo="none">.bashrc</filename> 文件：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; ~/.bashrc &lt;&lt; "EOF"
<literal moreinfo="none">set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/tools/bin:/bin:/usr/bin
export LFS LC_ALL LFS_TGT PATH</literal>
EOF</userinput></screen>

  <para><command moreinfo="none">set +h</command> 命令关闭了 <command moreinfo="none">bash</command> 的哈希功能。哈希通常是个好用的功能——<command moreinfo="none">bash</command> 用一个哈希表来记录可执行文件的完整路径，以规避对 <envar>PATH</envar> 进行检索的时间和对同一个可执行文件的重复寻找。然而，新工具在安装后，应马上使用。通过关闭哈希功能，程序执行的时候就会一直搜索 <envar>PATH</envar>。如此，新编译的工具一旦可用，shell 便能马上在文件夹 <filename class="directory" moreinfo="none">$LFS/tools</filename> 中找到它们，而不会去记录存在于不同地方的旧版该程序。</para>

  <para>设置用户文件新建时的掩码（umask）为 022，以确保新建的文件和目录只有其所有者可写，但任何人都可读可执行（假设系统调用的 <function moreinfo="none">open(2)</function> 使用的是默认模式，新文件将使用 664 权限模式、文件夹为 755 模式）。</para>

  <para><envar>LFS</envar> 变量应设置成选定的挂载点。</para>

  <para><envar>LC_ALL</envar> 变量控制某些程序的本地化，使它们的消息遵循特定国家的惯例。设置 <envar>LC_ALL</envar> 为「POSIX」或「C」（两者是等价的），确保在 chroot 环境中一切能如期望的那样进行。</para>

  <para><envar>LFS_TGT</envar> 变量设置了一个虽非默认，但在构建交叉编译器、连接器和交叉编译临时工作链时，用得上到的兼容的机器说明。<xref linkend="ch-tools-toolchaintechnotes" role=""/>中包含更多信息。</para>

  <para>通过把 <filename class="directory" moreinfo="none">/tools/bin</filename> 放在标准 <envar>PATH</envar> 变量的前面，使得所有在 <xref linkend="chapter-temporary-tools"/> 中安装的程序，一经安装 shell 便能马上使用。与之配合的关闭哈希功能，能在第五章环境中的程序在可用的情况下，限制使用宿主机中旧程序的风险。</para>

  <para>最后，启用刚才创建的用户配置，为构建临时工具完全准备好环境：</para>

<screen format="linespecific"><userinput moreinfo="none">source ~/.bash_profile</userinput></screen>

</sect1>
  <sect1 id="prepare-aboutsbus">
  <?dbhtml filename="aboutsbus.html"?>

  <title>关于 SBUs</title>

  <para>在着手之前,不少人想知道编译和安装一个软件包到底需要多长的时间。因为 Linux From Scratch 能够运行于众多的硬件上，所以具体的编译时间无法一概而论。举一个简单的例子：在最快的系统上，编译最大的软件包（Glibc）需要约 20 分钟，但在慢的系统上有可能需要 3 天！所以，这里使用标准构建单元（SBU）来代替具体的编译时间。</para>

  <para>SBU 衡量方式如下。我们编译的第一个软件包是 <xref linkend="chapter-temporary-tools"/> 的 Binutils。将这个软件包在编译时所需要的时间，作为标准构建单元（SBU）。其它软件的构建时间，都以其为标准进行比较。</para>

  <para>举个例子，假如编译某个软件耗时 4.5 SBUs。这意味着如果这个系统，在编译 Binutils 需要 10 分钟，大概需要<emphasis>约</emphasis> 45 分钟来构建此软件包。很幸运，大部分的系统在生成 Binutils 时花的时间都要比这个系统要短。</para>

  <para>一般来说，SBU 的结果并不完全准确，因为影响编译的因素太多，包括宿主机系统中 GCC 的版本也会影响到。所以更多的时候，这仅仅是提供一个编译和安装时间的预估。然而，在某些情况下，这个数字可能偏差约十几分钟。</para>

  <note>
    <para>对于大多数带有多个处理器（或内核）的现代操作系统而言，可以通过设置环境变量或者是告知 <command moreinfo="none">make</command> 程序具体可用的处理器数目，通过「并行 make」来减少编译的时间。例如，对于 Core2Duo 可以通过以下参数实现两个处理器同时编译：</para>

    <screen role="nodump" format="linespecific"><userinput moreinfo="none">export MAKEFLAGS='-j 2'</userinput></screen>

    <para>或者直接这样来构建：</para>

    <screen role="nodump" format="linespecific"><userinput moreinfo="none">make -j2</userinput></screen>

    <para>以该方式使用多处理器时，SBU 值可能比书中的正常值还要大。某些情况下，make 过程仅仅是简单的就失败了。分析错误日志也十分困难：因为不同处理器之间的执行路线是交错的。如果你在构建过程中遇到了问题，为了正确分析错误信息，最好返回单处理器。</para>
  </note>

</sect1>
  <sect1 id="prepare-abouttestsuites">
  <?dbhtml filename="abouttestsuites.html"?>

  <title>关于测试套件</title>

  <para>很多软件包都提供相应的测试套件。为新构建的软件包运行测试套件是非常好的习惯，因为这样做可以「保证」所有功能都已编译正确。经由一系列的测试，套件往往能够检查出软件包的功能是否都如开发人员预想的那样。然而，这并不能保证所测试的软件包万无一失。</para>

  <para>有一些测试套件要相较而言更为重要。例如，核心工具链软件包——GCC, Binutils 和 Glibc——对于对于一个系统的正常运转起到至关重要的作用。要完成 GCC 和 Glibc 的测试套件可能要花费很长的时间，特别是对于硬件比较慢的设备来说，但还是强烈推荐完成它们！</para>

  <note>
    <para>经验表明，在 <xref linkend="chapter-temporary-tools"/> 中运行测试套件并不是什么好主意。在该章节运行测试将不可避免地面临一个问题，宿主机或多或少会对测试产生影响，这经常导致一些令人摸不着头脑的错误信息。因为在 <xref linkend="chapter-temporary-tools"/> 中构建的这些工具只是临时的，最终我们并不需要它们，所以我们并不推荐普通读者在 <xref linkend="chapter-temporary-tools"/> 中运行测试套件。虽然为测试者和开发者提供了测试套件的说明，但是这依旧是可选项。</para>
  </note>

  <para>对 Binutils 和 GCC 执行测试套件时可能会使伪终端（PTYs）耗尽。造成大量的测试失败。造成问题的原因有很多，但最有可能的原因是宿主系统没能正确设置 <systemitem class="filesystem" moreinfo="none">devpts</systemitem> 文件系统。针对这个问题在 <ulink url="http://www.linuxfromscratch.org/lfs/faq.html#no-ptys"/> 中有更详尽的讨论。</para>

  <para>还有一些测试套件运行错误，是开发人员已知且视为不重要的。查看 <ulink url="http://www.linuxfromscratch.org/lfs/build-logs/8.4/"/> 中的日志，确认这些失败信息是否都是意料之中的。该网址中涉及的内容会贯穿全书所有的测试。</para>

</sect1>

</chapter>
<chapter id="chapter-temporary-tools" xreflabel="&#x7B2C; 5 &#x7AE0;" xml:base="chapter05/chapter05.xml">
  <?dbhtml dir="chapter05"?>
  <?dbhtml filename="chapter05.html"?>

  <title>构建临时系统</title>

  <sect1 id="ch-tools-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>本章将向您展示如何构造一个最小的 Linux 系统。该系统将包含刚好足够构建 <xref linkend="chapter-building-system"/> 中最终 LFS 系统所需的工具，以及一个比最小环境具有更好用户便利性的工作环境。</para>

  <para>构建这个最小系统有两个步骤。第一步，是构建一个与宿主系统无关的新工具链（编译器、汇编器、链接器、库和一些有用的工具）。第二步则是使用该工具链，去构建其它的基础工具。</para>

  <para>本章中编译得到的文件将被安装在目录 <filename class="directory" moreinfo="none">$LFS/tools</filename> 中，以确保在下一章中安装的文件和宿主系统生成的目录相互分离。由于此处编译的软件包都是临时性的，因此，我们不愿意它们污染后面即将构成的 LFS 系统。</para>

</sect1>
  <sect1 id="ch-tools-toolchaintechnotes">
  <?dbhtml filename="toolchaintechnotes.html"?>

  <title>工具链技术说明</title>

  <para>这一节解释总体构建方法之中的某些基本原理和技术细节。本节中的所有问题并无需马上消化。在进行实际构建的过程中，绝大部分的信息会变得愈加清晰。过程中随时都可以查阅本小节的内容。</para>

  <para>纵览 <xref linkend="chapter-temporary-tools"/> 的目标是生成一个临时的系统，这个系统中包含一个已知的较好工具集，并且工具集可以独立于宿主系统。通过使用 <command moreinfo="none">chroot</command>，其余各章中的命令将被包含在此环境中，以保证目标 LFS 系统能够洁净且无故障地生成。该构建过程的设计就是为了使得新读者承担最少的风险，同时还能有最好的指导价值。</para>

  <note>
    <para>在继续前，请留心工作平台的名称，它时常被称为目标三元组。要确定目标三元组的名称有一个简单的法子，那就是运行许多软件包的源码附带的脚本 <command moreinfo="none">config.guess</command>。解压 Binutils 的源码并运行脚本：<userinput moreinfo="none">./config.guess</userinput> 并注意它的输出。举一个例子，Intel 的 32 位处理器输出会是 <emphasis>i686-pc-linux-gnu</emphasis>。而在一个 64 位系统上，则会是 <emphasis>x86_64-pc-linux-gnu</emphasis>。</para>

    <para>也请留心平台的动态链接器的的名称，它时常被称为动态加载器（不要与 Binutils 中的标准链接器 <command moreinfo="none">ld</command> 混为一谈）。动态链接器由 Glibc 提供，用于寻找和加载程序所需的共享库，为程序的运行做准备，以及运行程序。32 位的 Intel 机器，动态链接器的名称是 <filename class="libraryfile" moreinfo="none">ld-linux.so.2</filename>（64 位系统则是 <filename class="libraryfile" moreinfo="none">ld-linux-x86-64.so.2</filename>）。确定动态链接名的一个确定的方法，就是检查随机二进制文件，通过在宿主机运行：<userinput moreinfo="none">readelf -l
    &lt;name of binary&gt; | grep interpreter</userinput> 并注意它的输出。覆盖全平台的权威参考在 Glibc 源码树根目录的 <filename moreinfo="none">shlib-versions</filename> 文件中。</para>
  </note>

  <para>下面是 <xref linkend="chapter-temporary-tools"/> 构建方法的几个关键技术点：</para>

  <itemizedlist>
    <listitem>
      <para>通过改变 <envar>LFS_TGT</envar> 变量的目标系统三段式中的「vendor（供应商）」字段，稍微调整一下工作平台的名称，以保证第一遍构建 Binutils 和 GCC 时能够生成兼容的交叉链接器和交叉编译器。此处的交叉链接器和交叉编译器生成的二进制文件与当前的硬件兼容，而不是用于其它的硬件架构。</para>
    </listitem>
    <listitem>
      <para> 临时库经交叉编译获得。由于交叉编译原本就不应该依赖于宿主系统，因此，通过降低宿主系统的头文件或库进入新工具的可能性，该方法可去除目标系统中潜在的污染。交叉编译的方式，还可以在 64 位硬件平台上同时构建出 32 位和 64 位库。</para>
    </listitem>
    <listitem>
    <para>谨慎地操作 GCC 源码告诉编译器，哪个是即将被采用的目标动态链接器。</para>
    </listitem>
  </itemizedlist>

  <para>Binutils 是首个安装的包，因为无论是执行 GCC 还是 Glibc 的 <command moreinfo="none">configure</command> 时，都将围绕汇编器和链接器实施多项特性测试，来判断哪些软件特性要启用或是禁用。其重要性可能更甚于你对它的第一印象。GCC 或 Glibc 的错误配置会导致工具链出现难以捉摸的问题，可能直到整个构建过程接近尾声时，这些问题才会显现出来。不过，通常情况下，在你进行大量的无用功之前，一次测试套件的失败便会将该错误高亮出来。</para>

  <para>Binutils 将其汇编器和链接器安装在两处，<filename class="directory" moreinfo="none">/tools/bin</filename> 和 <filename class="directory" moreinfo="none">/tools/$LFS_TGT/bin</filename>。有一处的工具是另一处的硬链接。链接器的一个重要方面是它的库搜索顺序。可以给 <command moreinfo="none">ld</command> 传递参数 <parameter moreinfo="none">--verbose</parameter> 获取详细信息。例如，<userinput moreinfo="none">ld --verbose | grep SEARCH</userinput> 将说明当前的搜索路径及其顺序。通过编译一个 dummy（假）程序并向链接器传递 <parameter moreinfo="none">--verbose</parameter> 参数，可显示 <command moreinfo="none">ld</command> 都链接了哪些文件。例如，<userinput moreinfo="none">gcc dummy.c -Wl,--verbose 2&gt;&amp;1 | grep succeeded</userinput> 将显示链接过程中成功打开的所有文件。</para>

  <para>下一个安装的包是 GCC。下面便是运行 GCC 的 <command moreinfo="none">configure</command> 的输出示例：</para>

<screen format="linespecific"><computeroutput moreinfo="none">checking what assembler to use... /tools/i686-lfs-linux-gnu/bin/as
checking what linker to use... /tools/i686-lfs-linux-gnu/bin/ld</computeroutput></screen>

  <para>基于上述原因，这很重要。这还说明了 GCC 的配置脚本并不会搜索 PATH 目录来寻找使用什么工具。不过，在 <command moreinfo="none">gcc</command> 自身的实际运行中，并不需要使用同样的搜索路径。运行：<userinput moreinfo="none">gcc -print-prog-name=ld</userinput> 可获知 <command moreinfo="none">gcc</command> 使用是何种标准链接器。
  </para>

  <para>在编译 dummy（假）程序时，向 <command moreinfo="none">gcc</command> 传递命令行选项 <parameter moreinfo="none">-v</parameter> 可获得详细信息。例如，<userinput moreinfo="none">gcc -v dummy.c</userinput> 将显示预处理器、编译和汇编阶段的详细信息，包括 <command moreinfo="none">gcc</command> 的 include 搜索路径及其顺序。</para>

  <para>下一个安装的是经过净化的 Linux API 头文件。这些头文件可使得标准 C 库（Glibc）与 Linux 内核提供的特性进行交行交互。</para>

  <para>下一个安装的软件包是 Glibc。构建 Glibc 时，最重要的几个注意点是编译器、二进制工具和内核头文件。编译器通常不成问题，因为 Glibc 将一直使用与传递给其配置脚本的 <parameter moreinfo="none">--host</parameter> 参数相关的编译器。如，在我们的这个场景中，编译器就是 <command moreinfo="none">i686-lfs-linux-gnu-gcc</command>。而二进制工具和内核头文件可能就要复杂一些了。因此，请不要冒险，并利用可用的配置开关来强制正确的选择。<command moreinfo="none">configure</command> 运行完毕，目录 <filename class="directory" moreinfo="none">glibc-build</filename> 下的文件 <filename moreinfo="none">config.make</filename> 包含有所有的重要细节。需要注意的是，<parameter moreinfo="none">CC="i686-lfs-gnu-gcc"</parameter> 用来控制使用哪个二进制工具，<parameter moreinfo="none">-nostdinc</parameter> 和 <parameter moreinfo="none">-isystem</parameter> 标志用来控制编译器的 include 搜索路径。这些条目强调了 Glibc 包的一个重要方面，即其构建机制是非常自给自足的，通常并不依赖默工具链的默认设置。</para>

  <para>在第二遍编译 Binutils 过程中，我们能够利用配置开关 <parameter moreinfo="none">--with-lib-path</parameter> 来控制 <command moreinfo="none">ld</command> 的库搜索路径。</para>

  <para>第二遍编译 GCC 时，也需要修改其源代码，以告诉 GCC 使用新的动态链接器。如果不加修改，将导致 GCC 的自身程序中嵌入源自宿主系统目录 <filename class="directory" moreinfo="none">/lib</filename> 中的动态链接器，这违背了独立于宿主系统的目的。正是基于前面的这个出发点，核心工具链是自包含和自托管的。<xref linkend="chapter-temporary-tools"/> 其它的软件包都将在 <filename class="directory" moreinfo="none">/tools</filename> 中的新 Glibc 的基础上进行构建。</para>

  <para>在进入 <xref linkend="chapter-building-system"/>中的 chroot 环境前，将安装的首个主要的软件包是 Glibc，这是因为它天生具有前面提及的自给自足特点。一旦将 Glibc 安装到 <filename class="directory" moreinfo="none">/usr</filename> 中，我们将快速改变工具链的默认设置，然后继续构建目标 LFS 系统的其余部分。</para>

</sect1>
  <sect1 id="ch-tools-generalinstructions">
  <?dbhtml filename="generalinstructions.html"?>

  <title>通用编译指南</title>

  <para>编译软件包时，本指南假设你已知晓这几点：</para>

  <itemizedlist>

  <listitem>
    <para>有几个软件包，在编译之前需要打补丁来规避一些问题。有的补丁在本章和下一章中都需要，但有些只有其中一章需要。因此，如果某章看起来缺少某个补丁的下载说明时，不用担心。安装补丁的时候也许会遇到关于 <emphasis>offset</emphasis> 或者 <emphasis>fuzz</emphasis> 的警告信息。别担心这些警告，补丁还是会成功安装的。</para>
  </listitem>

  <listitem>
    <para>在大部分软件包的编译过程中，屏幕上都可能出现几个警告。这都很正常，可以安全地忽略。这些警告正如它们描述的那样，是对使用过时的 C 或 C++ 语法的警告，而不是这些语法不可用。C 语言的标准经常改变，一些软件包仍然在使用旧的标准。这并不是一个问题，不过确实会弹出警告。</para>
  </listitem>

  <listitem>
    <para>最后确认一次，是否正确设置了 <envar>LFS</envar> 环境变量：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">echo $LFS</userinput></screen>

    <para>确认输出显示的是 LFS 分区挂载点的路径，在我们的例子中，也就是 <filename class="directory" moreinfo="none">/mnt/lfs</filename>。</para>
  </listitem>

  <listitem>

    <para>最后，有两个重要事项必须强调：</para>

    <important>

      <para>编译指南假定你已经正确地设置了 <xref linkend="pre-hostreqs"/> 和符号链接：</para>

      <itemizedlist role="important">

        <listitem override="bullet"><para>shell 使用的是 <command moreinfo="none">bash</command></para></listitem>

        <listitem override="bullet"><para><command moreinfo="none">sh</command> 是到 <command moreinfo="none">bash</command> 的符号链接。</para></listitem>

        <listitem override="bullet"><para><command moreinfo="none">/usr/bin/awk</command> 是到 <command moreinfo="none">gawk</command> 的符号链接。</para></listitem>

        <listitem override="bullet"><para><command moreinfo="none">/usr/bin/yacc</command> 是到 <command moreinfo="none">bison</command> 的符号链接，或者是一个执行 bison 的小脚本。</para></listitem>

      </itemizedlist>
    </important>

    <important>
      <para>再次强调构建的过程：</para>

      <orderedlist numeration="arabic" spacing="compact" inheritnum="ignore" continuation="restarts">
        <listitem>
          <para>把所有源文件和补丁放到 chroot 环境可访问的目录，例如 <filename class="directory" moreinfo="none">/mnt/lfs/sources/</filename>。但是千万<emphasis>不能</emphasis>把源文件放在 <filename class="directory" moreinfo="none">/mnt/lfs/tools/</filename> 中。</para>
        </listitem>
        <listitem>
          <para>进入到源文件目录。</para>
        </listitem>
        <listitem id="buildinstr" xreflabel="&#x8F6F;&#x4EF6;&#x5305;&#x6784;&#x5EFA;&#x8BF4;&#x660E;">
          <para>对于每个软件包：</para>
          <orderedlist numeration="loweralpha" spacing="compact" inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>用 <command moreinfo="none">tar</command> 程序解压要编译的软件包。在第五章中，确保解压软件包时你使用的是 <emphasis>lfs</emphasis> 用户。</para>
            </listitem>
            <listitem>
              <para>进入到解压后创建的目录中。</para>
            </listitem>
            <listitem>
              <para>根据指南说明编译软件包。</para>
            </listitem>
            <listitem>
              <para>回退到源文件目录。</para>
            </listitem>
            <listitem>
              <para>除非特别说明，删除解压出来的目录。</para>
            </listitem>
          </orderedlist>
        </listitem>
      </orderedlist>
    </important>
  </listitem>

  </itemizedlist>

</sect1>
  <sect1 id="ch-tools-binutils-pass1" role="wrap">
  <?dbhtml filename="binutils-pass1.html"?>

  

  <title>Binutils-2.32 - 第 1 遍</title>

  <indexterm zone="ch-tools-binutils-pass1" significance="normal">
    <primary sortas="a-Binutils">Binutils</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/binutils.xml">Binutils 软件包包含一个链接器、一个汇编器、以及其它处理目标文件的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1 SBU</seg>
        <seg>580 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装交叉编译的 Binutils</title>

    <note><para>返回前面章节重新阅读注意事项。了解标记为重要的注意事项能在后面帮你省去很多麻烦。</para></note>

    <para>第一个编译的软件包是 Binutils 软件包，这点很重要，因为 Glibc 和 GCC 都会对可用的链接器和汇编器执行各种测试，以决定启用它们自身的哪些功能。</para>

    <para>Binutils 手册建议，在源码目录之外一个专门的编译目录里面编译 Binutils：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <note>
      <para>为了衡量在本书中其余部分所使用 SBU 值，我们要测量一下这个软件包从配置到包括第一次安装在内的编译时间。为了轻松的做到这点，会用类似 <userinput moreinfo="none">time { ./configure ... &amp;&amp; ...
      &amp;&amp; make install; }</userinput> 的方式将命令包裹在 <command moreinfo="none">time</command> 命令中。</para>
    </note>

    <note><para>第五章中，大致的构建 SBU 值和所需磁盘空间不包括测试套件数据。</para></note>

    <para>现在准备编译 Binutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">../configure --prefix=/tools            \
             --with-sysroot=$LFS        \
             --with-lib-path=/tools/lib \
             --target=$LFS_TGT          \
             --disable-nls              \
             --disable-werror</userinput></screen>


    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--prefix=/tools</parameter></term>
        <listitem>
          <para>告诉配置脚本将 Binutils 程序安装到 <filename class="directory" moreinfo="none">/tools</filename> 文件夹。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-sysroot=$LFS</parameter></term>
        <listitem>
          <para>用于交叉编译，告诉编译系统在 $LFS 中查找所需的目标系统库。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-lib-path=/tools/lib</parameter></term>
        <listitem>
          <para>指定需要配置使用的链接器的库路径。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><envar>--target=$LFS_TGT</envar></term>
        <listitem>
          <para>因为 <envar>LFS_TGT</envar> 变量中的机器描述和 <command moreinfo="none">config.guess</command> 脚本返回的值略有不同，这个选项会告诉 <command moreinfo="none">configure</command> 脚本调整 Binutils 的构建系统来构建一个交叉链接器。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-nls</parameter></term>
        <listitem>
          <para>这会禁止国际化（i18n），因为国际化对临时工具来说没有必要。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-werror</parameter></term>
        <listitem>
          <para>这会防止来自宿主编译器的警告事件导致停止编译。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>继续编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译完成了。通常现在我们会运行测试套件，但在这个初期阶段，测试套件框架（Tcl、Expect 和 DejaGNU）还没有就绪。在此进行测试的收效甚微，因为第一遍编译的程序很快会被第二遍的代替。</para>

    <para>如果是在 x86_64 上构建，创建符号链接，以确保工具链的完整性：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">case $(uname -m) in
  x86_64) mkdir -v /tools/lib &amp;&amp; ln -sv lib /tools/lib64 ;;
esac</userinput></screen>

    <para>安装软件包:</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息位于 <xref linkend="contents-binutils"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-gcc-pass1" role="wrap" xreflabel="gcc-&#x7B2C; 1 &#x904D;">
  <?dbhtml filename="gcc-pass1.html"?>

  

  <title>GCC-8.2.0 - 第 1 遍</title>

  <indexterm zone="ch-tools-gcc-pass1" significance="normal">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/gcc.xml">GCC 软件包包括 GNU 编译器集，其中有 C 和 C++ 的编译器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>11 SBU</seg>
        <seg>2.9 GB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装交叉编译的 GCC</title>

    <para>现在 GCC 需要 GMP、MPFR 和 MPC 软件包。正如在你宿主机的发行版中可能并不包含这些软件包，它们将和 GCC 一起编译。将每个软件包解压到 GCC 的目录下，并重命名解压后得到的目录，以便 GCC 编译过程中能自动使用这些软件：</para>

    <note><para>读者经常对本章节产生误解。过程与之前的章节（<xref linkend="buildinstr"/>）中提到的一样。首先从源目录中解压 gcc 的源码包，然后进入创建的目录中。接着才可以执行下面的指令。</para></note>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc</userinput></screen>

    <para>下面的指令将会修改 GCC 默认动态链接器的位置，以使用安装到 <filename class="directory" moreinfo="none">/tools</filename> 目录中的链接器。并将 <filename class="directory" moreinfo="none">/usr/include</filename> 从 GCC 的 include 检索路径中移除。执行：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>如果上面的内容看起来有些难以理解，那让我们慢慢消化吧。首先，我们复制文件 <filename moreinfo="none">gcc/config/linux.h</filename>，<filename moreinfo="none">gcc/config/i386/linux.h</filename>，和 <filename moreinfo="none">gcc/config/i368/linux64.h</filename>，给复制的文件加上「.orig」后缀。然后第一个 sed 表达式在每个「/lib/ld」，「/lib64/ld」或者「/lib32/ld」实例前面增加「/tools」，第二个 sed 表达式替换「/usr」的硬编码实例。然后，我们添加这改变默认 startfile 前缀到文件末尾的定义语句。注意「/tools/lib/」后面的「/」是必须的。最后，我们用 <command moreinfo="none">touch</command> 更新复制文件的时间戳。当与 <command moreinfo="none">cp -u</command> 一起使用时，可以防止命令被无意中运行两次造成对原始文件意外的更改。</para>

    <para>最后，在 x86_64 的主机上，为 64 位的库设置默认目录名至「lib」：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac</userinput></screen>

<!--
    <para>GCC doesn't detect stack protection correctly, which causes problems
    for the build of Glibc-&glibc-version;, so fix that by issuing the following
    command:</para>

<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>
-->

<!--
    <para>Also fix a problem identified upstream:</para>

<screen><userinput remap="pre">sed -i 's/if \((code.*))\)/if (\1 \&amp;\&amp; \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c</userinput></screen>
-->
    <para>GCC 手册建议在源目录之外一个专门的编译目录中编译 GCC：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 GCC:</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">../configure                                       \
    --target=$LFS_TGT                              \
    --prefix=/tools                                \
    --with-glibc-version=2.11                      \
    --with-sysroot=$LFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++</userinput></screen>
    <variablelist>
      <title>配置选项的含义:</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-newlib</parameter></term>
        <listitem>
          <para>由于还没有可用的 C 库，这确保编译 libgcc 时定义了常数 inhibit_libc。这可以防止编译任何需要 libc 支持的代码。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--without-headers</parameter></term>
        <listitem>
          <para>在创建完整的交叉编译器时，GCC 要求标准头文件和目标系统兼容。对于我们的目的来说，不需要这些头文件。这个选项可以防止 GCC 查找它们。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>GCC 会查找本地已安装的 include 文件的系统位置。默认是 <filename moreinfo="none">/usr/local</filename>。把它设置为 <filename moreinfo="none">/tools</filename> 能把主机位置中的 <filename moreinfo="none">/usr/local</filename> 从 GCC 的搜索路径中排除。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>GCC 默认会在 <filename moreinfo="none">/usr/include</filename> 中查找系统头文件。和 sysroot 选项一起使用，会转换为 <filename moreinfo="none">$LFS/usr/include</filename>。在后面两个章节中头文件会被安装到 <filename moreinfo="none">$LFS/tools/include</filename> 。这个选项确保 gcc 能正确找到它们。第二次编译 GCC 时，同样的选项可以保证不会去寻找主机系统的头文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-shared</parameter></term>
        <listitem>
          <para>这个选项强制 GCC 静态链接到它的内部库。我们这样做是为了避免主机系统可能出现的问题。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-decimal-float, --disable-threads,
        --disable-libatomic, --disable-libgomp, --disable-libmpx,
        --disable-libquadmath, --disable-libssp, --disable-libvtv,
        --disable-libstdcxx</parameter></term>
        <listitem>
          <para>这些选项取消了对十进制浮点数扩展、线程化、libatomic、libgomp、libmpx、libitm、libquadmath、libsanitizer、libssp、libvtv、libcilkrts 和 C++ 标准库的支持。这些功能在编译交叉编译器的时候会导致编译失败，对于交叉编译临时 libc 来说也没有必要。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-multilib</parameter></term>
        <listitem>
          <para>在 x86_64 机器上，LFS 还不支持 multilib 配置。这个选项对 x86 来说无害。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>这个选项确保只编译 C 和 C++ 编译器。这些是现在唯一需要的语言。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>运行命令编译 GCC:</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译完成了。在这里，通常会运行测试套件，但正如前面提到的，测试套件框架还没有准备好。在此进行测试的并没有太多好处，因为第一遍编译的程序很快会被取代。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>
<!--
    <para>Using <parameter>- -disable-shared</parameter> means that the
    <filename>libgcc_eh.a</filename> file isn't created and installed. The
    Glibc package depends on this library as it uses
    <parameter>-lgcc_eh</parameter> within its build system. This dependency
    can be satisfied by creating a symlink to <filename>libgcc.a</filename>,
    since that file will end up containing the objects normally contained in
    <filename>libgcc_eh.a</filename>:</para>

<screen><userinput remap="install">ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&amp;_eh/'`</userinput></screen>
-->
  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-gcc"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-linux-headers" role="wrap">
  <?dbhtml filename="linux-headers.html"?>

  

  <title>Linux-4.20.12 API 头文件</title>

  <indexterm zone="ch-tools-linux-headers" significance="normal">
    <primary sortas="a-Linux">Linux</primary>
    <secondary>tools, API headers</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/linux-headers.xml">Linux API 头文件（在 linux-4.20.12.tar.xz 里）会将内核 API 导出给 Glibc 使用。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>937 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Linux API 头文件</title>

    <para>Linux 内核需要向系统 C 库（也就是 LFS 中的 Glibc）公开应用编程接口（API）。这通过在 Linux 内核源代码 tar 包中包括一些 C 头文件来完成。</para>

    <para>确认这里没有陈旧的文件且不依赖于之前的操作：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">make mrproper</userinput></screen>

    <para>从源代码中提取用户可见的内核头文件。把他们保存在一个临时本地文件夹中然后复制到所需的位置，因为解压过程会移除目标文件夹中任何已有的文件。</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make INSTALL_HDR_PATH=dest headers_install
</userinput><userinput remap="install" moreinfo="none">cp -rv dest/include/* /tools/include</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-linux-headers"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  

  <title>Glibc-2.29</title>

  <indexterm zone="ch-tools-glibc" significance="normal">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/glibc.xml">Glibc 软件包包含了主要的 C 函数库。这个库提供了分配内存、搜索目录、打开关闭文件、读写文件、操作字符串、模式匹配、基础算法等基本程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>5.1 SBU</seg>
        <seg>885 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Glibc</title>

    <para>Glibc 手册建议在源文件夹之外的一个专用文件夹中编译 Glibc：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>下一步，准备编译 Glibc：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=3.2                \
      --with-headers=/tools/include</userinput></screen>
<!--
      libc_cv_forced_unwind=yes          \
      libc_cv_c_cleanup=yes</userinput></screen> -->

    <variablelist>
      <title>配置选项的含义:</title>

      <varlistentry>
        <term><parameter moreinfo="none">--host=$LFS_TGT, --build=$(../scripts/config.guess)</parameter></term>
        <listitem>
          <para>这些选项的组合效果是 Glibc 的构建系统配置它自己用 <filename class="directory" moreinfo="none">/tools</filename> 里面的交叉链接器和交叉编译器交叉编译自己。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-kernel=3.2</parameter></term>
        <listitem>
          <para>这告诉 Glibc 编译能支持 3.2  以及之后的内核库。更早的内核版本不受支持。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>告诉 Glibc 利用刚刚安装在 tools 文件夹中的头文件编译自身，此能够根据内核的具体特性提供更好的优化。</para>
        </listitem>
      </varlistentry>
<!--
      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para>在 <xref linkend="ch-tools-binutils-pass1"/> 中安装的链接器是交叉编译的，在安装完 Glibc 之前不能使用。由于依赖于工作的链接器，这意味着 force-unwind 支持的配置测试会失败。将 libc_cv_forced_unwind=yes 变量传递进去告诉 <command>configure</command> 命令 force-unwind 支持是可用的，不需要进行测试。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term>
        <listitem>
          <para>类似的，我们传递 libc_cv_c_cleanup=yes 到 <command>configure</command> 脚本跳过测试就完成了 C 清理支持的配置。</para>
        </listitem>
      </varlistentry>
-->
<!--  <varlistentry>
        <term><parameter>libc_cv_ctors_header=yes</parameter></term>
        <listitem>
          <para>类似的，我们传递 libc_cv_ctors_header=yes 到 <command>configure</command> 脚本跳过测试就完成了 gcc 构建器支持的配置。</para>
        </listitem>
      </varlistentry>-->

    </variablelist>

    <para>在这个过程中，可能会出现下面的警告：</para>

    <blockquote>
<screen format="linespecific"><computeroutput moreinfo="none">configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para><command moreinfo="none">msgfmt</command> 程序的缺失或者不兼容通常是无害的。这个 <command moreinfo="none">msgfmt</command> 程序是 Gettext 软件包的一部分，主机发行版应该提供了。</para>

    <note><para>有报告说用「parallel make」编译这个软件包的时候会失败。如果出现这种情况，用「-j1」选项重新运行 make 命令。</para></note>

    <para>编译软件包:</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装软件包:</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  <caution>
    <para>到了这里，必须停下来确认新工具链的基本功能(编译和链接)都是像预期的那样正常工作。运行下面的命令进行全面的检查：</para>

<screen format="linespecific"><userinput moreinfo="none">echo 'int main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>如果一切工作正常的话，这里应该没有错误，最后一个命令的输出形式会是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>注意 32 位机器上对应的解释器名字是 <filename moreinfo="none">/tools/lib/ld-linux.so.2</filename>。</para>

    <para>如果输出不是像上面那样或者根本就没有输出，那么可能某些地方出错了。调查并回溯这些步骤，找出问题所在并改正它。在继续之前必须解决这个问题。</para>

    <para>一旦一切都顺利，清理测试文件：</para>

<screen format="linespecific"><userinput moreinfo="none">rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>在后面的编译 Binutils 章节时会再一次检查工具链是否正确编译。如果 Binutils 编译失败，说明之前安装 Binutils、GCC、或者 Glibc 时某些地方出现了错误。</para></note>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-glibc"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-libstdcpp" role="wrap">
  <?dbhtml filename="gcc-libstdc++.html"?>

  

  <title>GCC-8.2.0 中的 Libstdc++</title>

  <indexterm zone="ch-tools-libstdcpp" significance="normal">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, libstdc++</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libstdc++ 是标准的 C++ 库。需要用它来编译 C++ 代码（GCC 的一部分是用 C++ 写的），但是在构建 <xref linkend="ch-tools-gcc-pass1"/> 时，我们需要推迟它的安装进程，因为依赖的 glibc，还未部署在 /tools 目录中。</para>
    
    <para>Libstdc++ 是标准的 C++ 库。g++ 编译器正确运行需要它。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.5 SBU</seg>
        <seg>803 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装目标 Libstdc++</title>

    <note>
      <para><application moreinfo="none">Libstdc++</application> 是 GCC 源文件的一部分。你首先应该解压 GCC 的压缩包，然后进入 <filename moreinfo="none">gcc-8.2.0</filename> 文件夹。</para>
    </note>

    <para>为 Libstdc++ 另外创建一个用于构建的文件夹并进入该文件夹：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 Libstdc++：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">../libstdc++-v3/configure           \
    --host=$LFS_TGT                 \
    --prefix=/tools                 \
    --disable-multilib              \
    --disable-nls                   \
    --disable-libstdcxx-threads     \
    --disable-libstdcxx-pch         \
    --with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--host=...</parameter></term>
        <listitem>
          <para>指示使用我们刚才编译的交叉编译器，而不是  <filename moreinfo="none">/usr/bin</filename> 中的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-libstdcxx-threads</parameter></term>
        <listitem>
          <para>由于我们还没有编译 C 线程库，C++ 的也还不能编译。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-libstdcxx-pch</parameter></term>
        <listitem>
          <para>此选项防止安装预编译文件，此步骤并不需要。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-gxx-include-dir=/tools/$LFS_TGT/include/c++/8.2.0</parameter></term>
        <listitem>
          <para>这是 C++ 编译器搜索标准 include 文件的位置。在一般的编译中，这个信息自动从顶层文件夹中传入 Libstdc++ <command moreinfo="none">configure</command> 选项。在我们的例子中，必须明确给出这信息。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译 libstdc++：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装库：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-gcc"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-binutils-pass2" role="wrap">
  <?dbhtml filename="binutils-pass2.html"?>

  

  <title>Binutils-2.32 - 第 2 遍</title>

  <indexterm zone="ch-tools-binutils-pass2" significance="normal">
    <primary sortas="a-Binutils">Binutils</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/binutils.xml">Binutils 软件包包含一个链接器、一个汇编器、以及其它处理目标文件的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.1 SBU</seg>
        <seg>598 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Binutils</title>

    <para>再次新建一个单独的编译文件夹：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 Binutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">CC=$LFS_TGT-gcc                \
AR=$LFS_TGT-ar                 \
RANLIB=$LFS_TGT-ranlib         \
../configure                   \
    --prefix=/tools            \
    --disable-nls              \
    --disable-werror           \
    --with-lib-path=/tools/lib \
    --with-sysroot</userinput></screen>

    <variablelist>
      <title>新配置选项的含义:</title>

      <varlistentry>
        <term><parameter moreinfo="none">CC=$LFS_TGT-gcc AR=$LFS_TGT-ar RANLIB=$LFS_TGT-ranlib</parameter></term>
        <listitem>
          <para>因为这是真正的原生编译 Binutils，设置这些变量能确保编译系统使用交叉编译器和相关的工具，而不是宿主系统中已有的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-lib-path=/tools/lib</parameter></term>
        <listitem>
          <para>这告诉配置脚本在编译 Binutils 的时候指定库搜索目录，此处将 <filename class="directory" moreinfo="none">/tools/lib</filename> 传递到链接器。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-sysroot</parameter></term>
        <listitem>
          <para>sysroot 功能使链接器可以找到包括在其命令行中的其它共享对象明确需要的共享对象。否则的话，在某些主机上一些软件包可能会编译不成功。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>现在，为下一章的「Re-adjusting」阶段准备链接器：</para>

<screen format="linespecific"><userinput remap="adjust" moreinfo="none">make -C ld clean
make -C ld LIB_PATH=/usr/lib:/lib
cp -v ld/ld-new /tools/bin</userinput></screen>

    <variablelist>
      <title>make 参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">-C ld clean</parameter></term>
        <listitem>
          <para>告诉 make 程序移除所有 <filename class="directory" moreinfo="none">ld</filename> 子目录中编译过的文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-C ld LIB_PATH=/usr/lib:/lib</parameter></term>
        <listitem>
          <para>这个选项重新编译 <filename class="directory" moreinfo="none">ld</filename> 子目录中的所有文件。在命令行中指定 Makefile 的 <envar>LIB_PATH</envar> 变量可以使我们能够重写临时工具的默认值并指向正确的最终路径。该变量的值指定链接器的默认库搜索路径。下一章中会用到这个准备。</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-binutils"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-gcc-pass2" role="wrap">
  <?dbhtml filename="gcc-pass2.html"?>

  

  <title>GCC-8.2.0 -  第 2 遍</title>

  <indexterm zone="ch-tools-gcc-pass2" significance="normal">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 2</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/gcc.xml">GCC 软件包包括 GNU 编译器集，其中有 C 和 C++ 的编译器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>14 SBU</seg>
        <seg>3.4 GB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GCC</title>

    <para>我们第一次编译 GCC 的时候安装了一些内部系统头文件。其中的一个 <filename moreinfo="none">limits.h</filename> 会反过来包括对应的系统头文件 <filename moreinfo="none">limits.h</filename>，在我们的例子中，是 <filename moreinfo="none">/tools/include/limits.h</filename> 。但是，第一次编译 gcc 的时候 <filename moreinfo="none">/tools/include/limits.h</filename> 并不存在，因此 GCC 安装的内部头文件只是部分的自包含文件，并不包括系统头文件的扩展功能。这足以编译临时 libc，但是这次编译 GCC 要求完整的内部头文件。使用和正常情况下 GCC 编译系统使用的相同的命令创建一个完整版本的内部头文件：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">cat gcc/limitx.h gcc/glimits.h gcc/limity.h &gt; \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h</userinput></screen>
<!--
    <para>For x86 machines, the limited number of registers is a bottleneck
    for the system.  Free one up by not using a frame pointer that is not
    needed:</para>

<screen><userinput remap="pre">case `uname -m` in
  i?86) sed -i 's/^T_CFLAGS =$/&amp; -fomit-frame-pointer/' gcc/Makefile.in ;;
esac</userinput></screen>
-->
    <para>再一次更改 GCC 的默认动态链接器的位置，使用安装在  <filename class="directory" moreinfo="none">/tools</filename> 的那个。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>如果是在 x86_64 环境上构建，为 64 位库改变默认目录名至「lib」：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para>和第一次编译 GCC 一样，它要求 GMP、MPFR 和 MPC 软件包。解压 tar 包并把它们重名为到所需的文件夹名称：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">tar -xf ../mpfr-4.0.2.tar.xz
mv -v mpfr-4.0.2 mpfr
tar -xf ../gmp-6.1.2.tar.xz
mv -v gmp-6.1.2 gmp
tar -xf ../mpc-1.1.0.tar.gz
mv -v mpc-1.1.0 mpc</userinput></screen>
<!--
    <para>As in the first build of GCC, fix a problem identified upstream:</para>

<screen><userinput remap="pre">sed -i 's/if \((code.*))\)/if (\1 \&amp;\&amp; \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c</userinput></screen>
-->
    <para>再次创建独立的编译文件夹：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>在开始编译 GCC 之前，记住取消所有会覆盖默认优化选项的环境变量。</para>

    <para>准备编译 GCC:</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">CC=$LFS_TGT-gcc                                    \
CXX=$LFS_TGT-g++                                   \
AR=$LFS_TGT-ar                                     \
RANLIB=$LFS_TGT-ranlib                             \
../configure                                       \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp</userinput></screen>

    <variablelist>
      <title>新配置选项的含义:</title>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>这个选项确保编译了 C 和 C++ 编译器。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-libstdcxx-pch</parameter></term>
        <listitem>
          <para>不为 <filename class="libraryfile" moreinfo="none">libstdc++</filename> 编译预编译的头文件(PCH)。这会花费很多时间，却对我们没有用处。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-bootstrap</parameter></term>
        <listitem>
          <para>对于原生编译的 GCC，默认是做一个「引导」构建。这不仅会编译 GCC 一次，而是会编译很多次。使用初次编译的程序去编译其自身第二次，然后同样地进行第三次。比较第二次和第三次迭代确保其能完美地复制自身。这也能预示编译是正确地。但是，LFS 的构建方法能够提供一个稳定的编译器，避免每次都需要重新引导。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包:</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装软件包:</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>作为画龙点睛，这里创建一个符号链接。很多程序和脚本执行 <command moreinfo="none">cc</command> 而不是 <command moreinfo="none">gcc</command> 来保证程序的通用性，并且在所有的 Unix 类型的系统上都能用，而非仅局限于安装了 GCC 的 Unix 类型的系统。运行 <command moreinfo="none">cc</command> 使得系统管理员不用考虑要安装那种 C 编译器：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv gcc /tools/bin/cc</userinput></screen>

  <caution>
    <para>到了这里，必须停下来确认新工具链的基本功能（编译和链接）都是像预期的那样正常工作。运行下面的命令进行全面的检查：</para>

<screen format="linespecific"><userinput moreinfo="none">echo 'int main(){}' &gt; dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>如果一切工作正常的话，这里应该没有错误，最后一个命令的输出形式会是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>注意 32 位机器的动态链接是 /tools/lib/ld-linux.so.2。</para>

    <para>如果输出不是像上面那样或者根本就没有输出，那么可能某些地方出错了。调查并回溯这些步骤，找出问题所在并改正它。在继续之前必须解决这个问题。首先，使用 <command moreinfo="none">gcc</command> 而不是 <command moreinfo="none">cc</command> 再次进行全面的检查。如果能运行，就符号链接 <filename class="symlink" moreinfo="none">/tools/bin/cc</filename> 就不见了。像上面介绍的那样新建符号链接。下一步，确认 <envar>PATH</envar> 是正确的。这能通过运行 <command moreinfo="none">echo $PATH</command> 检验，验证 <filename class="directory" moreinfo="none">/tools/bin</filename> 在列表的前面。如果 <envar>PATH</envar> 是错误的，这意味着你可能不是以 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户的身份登录或者在前面 <xref linkend="ch-tools-settingenviron"/> 中某些地方出现了错误。</para>

    <para>一旦一切都顺利，清理测试文件：</para>

<screen format="linespecific"><userinput moreinfo="none">rm -v dummy.c a.out</userinput></screen>

  </caution>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-gcc"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-tcl" role="wrap">
  <?dbhtml filename="tcl.html"?>

  

  <title>Tcl-8.6.9</title>

  <indexterm zone="ch-tools-tcl" significance="normal">
    <primary sortas="a-Tcl">Tcl</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Tcl 软件包包含工具命令语言（Tool Command Language）相关程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.9 SBU</seg>
        <seg>66 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Tcl</title>

    <para>此软件包和后面两个包（Expect 和 DejaGNU）用来为 GCC 和 Binutils 还有其他的一些软件包的测试套件提供运行支持。仅仅为了测试目的而安装三个软件包，看上去有点奢侈，虽然因为大部分重要的工具都能正常工作而并不需要去做测试。尽管在本章中并没有执行测试套件（并不做要求），但是在 <xref linkend="chapter-building-system"/> 中都要求执行这些软件包自带的测试套件。</para>

    <para>注意，这里的 Tcl 软件包用的是最小化安装的版本，仅仅是为了运行 LFS 测试。需要完整版的软件包，可参考 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/tcl.html"> BLFS 的 Tcl 流程</ulink>。</para>

    <para>配置 Tcl 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">cd unix
./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不强求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Tcl 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">TZ=UTC make test</userinput></screen>

    <para>Tcl 测试套件在宿主机某些特定条件下会失败，原因很难推测。不过测试套件失败并不奇怪，也不是什么严重的错误。参数 <parameter moreinfo="none">TZ=UTC</parameter> 设定了时区和相应的世界标准时间（UTC），但是只在测试套件运行期间才有效。这个可以保证时钟测试能正常运行。关于 <envar>TZ</envar> 环境变量的细节请参阅本手册 <xref linkend="chapter-bootscripts"/>。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>让安装的库文件可写，这样之后可以删除调试符号。</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">chmod -v u+w /tools/lib/libtcl8.6.so</userinput></screen>

    <para>安装 Tcl 的头文件。后面的软件包 Expect 在编译的时候会用到。</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install-private-headers</userinput></screen>

    <para>现在创建几个必要的软链接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv tclsh8.6 /tools/bin/tclsh</userinput></screen>

  </sect2>

  <sect2 id="contents-tcl" role="content">
    <title>Tcl 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>tclsh (link to tclsh8.6) and tclsh8.6</seg>
        <seg>libtcl8.6.so, libtclstub8.6.a</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="tclsh8.6">
        <term><command moreinfo="none">tclsh8.6</command></term>
        <listitem>
          <para>Tcl 命令终端</para>
          <indexterm zone="ch-tools-tcl tclsh8.6" significance="normal">
            <primary sortas="b-tclsh8.6">tclsh8.6</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tclsh">
        <term><command moreinfo="none">tclsh</command></term>
        <listitem>
          <para>软链接到 tclsh8.6</para>
          <indexterm zone="ch-tools-tcl tclsh" significance="normal">
            <primary sortas="b-tclsh">tclsh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtcl8.6.so">
        <term><filename class="libraryfile" moreinfo="none">libtcl8.6.so</filename></term>
        <listitem>
          <para>Tcl 库</para>
          <indexterm zone="ch-tools-tcl libtcl8.6.so" significance="normal">
            <primary sortas="c-libtcl8.6.so">libtcl8.6.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtclstub8.6.a">
        <term><filename class="libraryfile" moreinfo="none">libtclstub8.6.a</filename></term>
        <listitem>
          <para>Tcl Stub 库</para>
          <indexterm zone="ch-tools-tcl libtclstub8.6.a" significance="normal">
            <primary sortas="c-libtclstub8.6.a">libtclstub8.6.a</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-tools-expect" role="wrap">
  <?dbhtml filename="expect.html"?>

  

  <title>Expect-5.45.4</title>

  <indexterm zone="ch-tools-expect" significance="normal">
    <primary sortas="a-Expect">Expect</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Expect 软件包包含一个实现用脚本和其他交互式程序进行对话的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>3.9 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Expect</title>

    <para>首先，强制 Expect 的 configure 配置脚本使用 <filename moreinfo="none">/bin/stty</filename> 替代宿主机系统里可能存在的 <filename moreinfo="none">/usr/local/bin/stty</filename> 。这样可以保证我们的测试套件工具在工具链的最后一次构建能够正常。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">cp -v configure{,.orig}
sed 's:/usr/local/bin:/bin:' configure.orig &gt; configure</userinput></screen>

    <para>现在配置 Expect 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools       \
            --with-tcl=/tools/lib \
            --with-tclinclude=/tools/include</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-tcl=/tools/lib</parameter></term>
        <listitem>
          <para>这个选项可以保证 configure 配置脚本会从临时工具目录里找 Tcl 的安装位置，而不是在宿主机系统中寻找。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-tclinclude=/tools/include</parameter></term>
        <listitem>
          <para>这个选项会给 Expect 显式地指定 Tcl 内部头文件的位置。通过这个选项可以避免 <command moreinfo="none">configure</command> 脚本不能自动发现 Tcl 头文件位置的情况。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Expect 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make test</userinput></screen>

    <para>请注意 Expect 测试套件已知在某些宿主机特定情况下有过失败的情况，我们还没有完全把握。不过，在这里测试套件运行失败并不奇怪，也不认为是关键问题。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make SCRIPTS="" install</userinput></screen>

    <variablelist>
      <title>make 参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">SCRIPTS=""</parameter></term>
        <listitem>
          <para>这个变量可以避免安装额外的、没有需求的 Expect 脚本。</para>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="contents-expect" role="content">
    <title> Expect 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>expect</seg>
        <seg>libexpect-5.45.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="expect">
        <term><command moreinfo="none">expect</command></term>
        <listitem>
          <para>基于脚本和其他交互式程序通信。</para>
          <indexterm zone="ch-tools-expect expect" significance="normal">
            <primary sortas="b-expect">expect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libexpect">
        <term><filename class="libraryfile" moreinfo="none">libexpect-5.45.so</filename></term>
        <listitem>
          <para>包含一些函数允许 Expect 用作 Tcl 扩展或直接用于 C/C++（不用 Tcl）。</para>
          <indexterm zone="ch-tools-expect libexpect" significance="normal">
            <primary sortas="c-libexpect-5.45">libexpect-5.45</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-tools-dejagnu" role="wrap">
  <?dbhtml filename="dejagnu.html"?>

  

  <title>DejaGNU-1.6.2</title>

  <indexterm zone="ch-tools-dejagnu" significance="normal">
    <primary sortas="a-DejaGNU">DejaGNU</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>DejaGNU 软件包包含了测试其他程序的框架。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>3.2 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 DejaGNU</title>

    <para>配置 DejaGNU 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>要测试编译结果，执行：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

  </sect2>


  <sect2 id="contents-dejagnu" role="content">
    <title>DejaGNU 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>runtest</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="runtest">
        <term><command moreinfo="none">runtest</command></term>
        <listitem>
          <para>一个封装脚本用于定位合适的 <command moreinfo="none">expect</command> 终端然后执行 DejaGNU。</para>
          <indexterm zone="ch-tools-dejagnu runtest" significance="normal">
            <primary sortas="b-runtest">runtest</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-tools-m4" role="wrap">
  <?dbhtml filename="m4.html"?>

  

  <title>M4-1.4.18</title>

  <indexterm zone="ch-tools-m4" significance="normal">
    <primary sortas="a-M4">M4</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/m4.xml">M4 软件包包含一个宏处理器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>20 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 M4</title>

    <para>首先，对应 glibc-2.28 的需求做一些修复：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c
echo "#define _IO_IN_BACKUP 0x100" &gt;&gt; lib/stdio-impl.h</userinput></screen>

    <para>配置 M4 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 M4 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-m4"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-ncurses" role="wrap">
  <?dbhtml filename="ncurses.html"?>

  

  <title>Ncurses-6.1</title>

  <indexterm zone="ch-tools-ncurses" significance="normal">
    <primary sortas="a-Ncurses">Ncurses</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/ncurses.xml">Ncurses 软件包包含用于不依赖于特定终端的字符屏幕处理的库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.6 SBU</seg>
        <seg>41 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Ncurses</title>

    <para>在安装之前，须要确保 <command moreinfo="none">gawk</command> 在第一次配置时已经找到：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i s/mawk// configure</userinput></screen>

    <para>配置 Ncurses 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools \
            --with-shared   \
            --without-debug \
            --without-ada   \
            --enable-widec  \
            --enable-overwrite</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--without-ada</parameter></term>
        <listitem>
          <para>这个选项会保证 Ncurse 不会编译对宿主机系统里可能存在的 Ada 编译器的支持，而这在我们 <command moreinfo="none">chroot</command> 切换环境后就不再可用。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-overwrite</parameter></term>
        <listitem>
          <para>这个选项会告诉 Ncurses 安装它的头文件到 <filename class="directory" moreinfo="none">/tools/include</filename> 目录，而不是 <filename class="directory" moreinfo="none">/tools/include/ncurses</filename> 目录，保证其他软件包可以正常找到 Ncurses 的头文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-widec</parameter></term>
        <listitem>
          <para>这个选项会控制编译宽字符库（比如，<filename class="libraryfile" moreinfo="none">libncursesw.so.6.1</filename>）而不是默认的普通库（比如，<filename class="libraryfile" moreinfo="none">libncurses.so.6.1</filename> ）。这些宽字符库在多字节和传统的 8 位环境下使用，而普通库只能用于 8 位环境。宽字符库和普通库的源代码是兼容的，但并不是二进制兼容。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>这个软件包有测试套件，但是只有在安装后才能执行。测试用例在 <filename class="directory" moreinfo="none">test/</filename> 目录里。查看该目录下的 <filename moreinfo="none">README</filename> 文件了解更多细节。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
ln -s libncursesw.so /tools/lib/libncurses.so</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-ncurses"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-bash" role="wrap">
  <?dbhtml filename="bash.html"?>

  

  <title>Bash-5.0</title>

  <indexterm zone="ch-tools-bash" significance="normal">
    <primary sortas="a-Bash">Bash</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/bash.xml">Bash 软件包包含 Bourne-Again Shell。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.4 SBU</seg>
        <seg>67 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bash</title>
<!--
    <para>First, apply the following patch to fix various bugs that have been
    addressed upstream:</para>

<screen><userinput remap="pre">patch -Np1 -i ../&bash-fixes-patch;</userinput></screen>
-->
    <para>配置 Bash 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools --without-bash-malloc</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--without-bash-malloc</parameter></term>
        <listitem>
          <para>这个选项会禁用 Bash 的内存分配功能（<function moreinfo="none">malloc</function>），这个功能已知会导致段错误。而禁用这个功能后，Bash 将使用 Glibc 的 <function moreinfo="none">malloc</function> 函数，这样会更稳定。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Bash 的话可以用下面的命令：</para>


<screen format="linespecific"><userinput remap="test" moreinfo="none">make tests</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>为使用 <command moreinfo="none">sh</command> 终端的程序创建一个软链接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv bash /tools/bin/sh</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-bash"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-bison" role="wrap">
  <?dbhtml filename="bison.html"?>

  

  <title>Bison-3.3.2</title>

  <indexterm zone="ch-tools-bison" significance="normal">
    <primary sortas="a-Bison">Bison</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/bison.xml">Bison 软件包包含一个语法生成器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>37 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bison</title>

    <para>配置 Bison 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>为了测试结果，输入：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息参见： <xref linkend="contents-bison"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-bzip2" role="wrap">
  <?dbhtml filename="bzip2.html"?>

  

  <title>Bzip2-1.0.6</title>

  <indexterm zone="ch-tools-bzip2" significance="normal">
    <primary sortas="a-Bzip2">Bzip2</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/bzip2.xml">Bzip2 软件包包含压缩和解压缩的程序。用 <command moreinfo="none">bzip2</command> 压缩文本文件能获得比传统的 <command moreinfo="none">gzip</command> 更好的压缩比。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>5.5 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bzip2</title>

    <para>Bzip2 软件包里没有 <command moreinfo="none">configure</command> 配置脚本。用下面的命令编译和测试：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make PREFIX=/tools install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-bzip2"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-coreutils" role="wrap">
  <?dbhtml filename="coreutils.html"?>

  

  <title>Coreutils-8.30</title>

  <indexterm zone="ch-tools-coreutils" significance="normal">
    <primary sortas="a-Coreutils">Coreutils</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/coreutils.xml">Coreutils 软件包包含用于显示和设置基本系统特性的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.8 SBU</seg>
        <seg>148 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Coreutils</title>

    <para>配置 Coreutils 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools --enable-install-program=hostname</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><envar>--enable-install-program=hostname</envar></term>
        <listitem>
          <para>这个选项会允许构建和安装 <command moreinfo="none">hostname</command> 程序——默认是不安装的，但是 Perl 测试套件需要它。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Coreutils 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make RUN_EXPENSIVE_TESTS=yes check</userinput></screen>

    <para>参数 <parameter moreinfo="none">RUN_EXPENSIVE_TESTS=yes</parameter> 会告诉测试套件额外运行对某些系统开销相对大一些（主要是 CPU 运算能力和内存消耗）的测试用例，但是通常对 Linux 来说不是问题。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>
<!--
    <para>The above command refuses to install <filename>su</filename>
    because the program cannot be installed setuid root as a non-privileged
    user. By manually installing it, we can use it for running tests in the
    final system as a non-privileged user. Install it with:</para>

<screen><userinput remap="install">cp -v src/su /tools/bin</userinput></screen>
-->
  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-coreutils"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-diffutils" role="wrap">
  <?dbhtml filename="diffutils.html"?>

  

  <title>Diffutils-3.7</title>

  <indexterm zone="ch-tools-diffutils" significance="normal">
    <primary sortas="a-Diffutils">Diffutils</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/diffutils.xml">Diffutils 软件包包含显示文件和目录差异的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>26 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Diffutils</title>

    <para>配置 Diffutils 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Diffutils 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-diffutils"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-file" role="wrap">
  <?dbhtml filename="file.html"?>

  

  <title>File-5.36</title>

  <indexterm zone="ch-tools-file" significance="normal">
    <primary sortas="a-File">File</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/file.xml">File 软件包包括一个判断给定的某个或某些文件文件类型的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>18 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 File</title>

    <para>配置 File 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 File 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-file"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-findutils" role="wrap">
  <?dbhtml filename="findutils.html"?>

  

  <title>Findutils-4.6.0</title>

  <indexterm zone="ch-tools-findutils" significance="normal">
    <primary sortas="a-Findutils">Findutils</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/findutils.xml">Findutils 软件包包含查找文件的程序。这些程序提供递归搜索目录树、创建、管理以及搜索数据库（通常比递归式的 find 要快，但如果数据库最近没有更新的话结果不可靠）。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>36 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Findutils</title>

    <para>首先，对应 glibc-2.28 的需求做一些修复：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' gl/lib/*.c
sed -i '/unistd/a #include &lt;sys/sysmacros.h&gt;' gl/lib/mountlist.c
echo "#define _IO_IN_BACKUP 0x100" &gt;&gt; gl/lib/stdio-impl.h</userinput></screen>

    <para>配置 Findutils 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Findutils 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-findutils"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-gawk" role="wrap">
  <?dbhtml filename="gawk.html"?>

  

  <title>Gawk-4.2.1</title>

  <indexterm zone="ch-tools-gawk" significance="normal">
    <primary sortas="a-Gawk">Gawk</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/gawk.xml">Gawk 软件包包含用于操作文本文件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>43 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gawk</title>

    <para>配置 Gawk 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Gawk 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-gawk"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-gettext" role="wrap">
  <?dbhtml filename="gettext.html"?>

  

  <title>Gettext-0.19.8.1</title>

  <indexterm zone="ch-tools-gettext" significance="normal">
    <primary sortas="a-Gettext">Gettext</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/gettext.xml">Gettext 软件包包含用于国际化和本土化的工具。这允许用 NLS（Native Language Support，本地语言支持） 编译程序，使得能以用户的本地语言输出信息。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.9 SBU</seg>
        <seg>173 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gettext</title>

    <para>对于我们这次用到的临时工具集，我们只需要编译安装 Gettext 软件包里的 3 个程序。</para>

    <para>配置 Gettext 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">cd gettext-tools
EMACS="no" ./configure --prefix=/tools --disable-shared</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">EMACS="no"</parameter></term>
        <listitem>
          <para>这个选项会禁止配置脚本侦测安装 Emacs Lisp 文件的位置，已知在某些系统中会引起错误。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-shared</parameter></term>
        <listitem>
          <para>这次我们不需要安装任何的 Gettext 动态库，所以不需要编译。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make -C gnulib-lib
make -C intl pluralx.c
make -C src msgfmt
make -C src msgmerge
make -C src xgettext</userinput></screen>

    <para>因为只编译了 3 个程序，在不编译 Gettext 的额外支持库的情况下，测试套件是不可能成功运行的。所以在这个阶段建议不要尝试运行测试套件。</para>

    <para>安装 <command moreinfo="none">msgfmt</command>、<command moreinfo="none">msgmerge</command> 和 <command moreinfo="none">xgettext</command> 程序：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -v src/{msgfmt,msgmerge,xgettext} /tools/bin</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-gettext"/>.</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-grep" role="wrap">
  <?dbhtml filename="grep.html"?>

  

  <title>Grep-3.3</title>

  <indexterm zone="ch-tools-grep" significance="normal">
    <primary sortas="a-Grep">Grep</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/grep.xml">Grep 软件包包含用于在文件中搜索的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>24 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Grep</title>

    <para>配置 Grep 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Grep 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-grep"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-gzip" role="wrap">
  <?dbhtml filename="gzip.html"?>

  

  <title>Gzip-1.10</title>

  <indexterm zone="ch-tools-gzip" significance="normal">
    <primary sortas="a-Gzip">Gzip</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/gzip.xml">Gzip 软件包包含用于压缩和解压文件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>10 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gzip</title>

    <para>配置 Gzip 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Gzip 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-gzip"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-make" role="wrap">
  <?dbhtml filename="make.html"?>

  

  <title>Make-4.2.1</title>

  <indexterm zone="ch-tools-make" significance="normal">
    <primary sortas="a-Make">Make</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/make.xml">Make 软件包包含一个用于编译软件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>13 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Make</title>

    <para>首先，解决一个 glibc-2.27 或更高版本带来的问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '211,217 d; 219,229 d; 232 d' glob/glob.c</userinput></screen>

    <para>配置 Make 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools --without-guile</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--without-guile</parameter></term>
        <listitem>
          <para>这个选项会保证 Make-4.2.1 不会链接宿主系统上可能存在的 Guile 库，而在下一章里通过 <command moreinfo="none">chroot</command> 切换环境后便不再有效了。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Make 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-make"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-patch" role="wrap">
  <?dbhtml filename="patch.html"?>

  

  <title>Patch-2.7.6</title>

  <indexterm zone="ch-tools-patch" significance="normal">
    <primary sortas="a-Patch">Patch</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/patch.xml">Patch 软件包包含一个通过打「补丁」创建或修改文件的程序，补丁文件通常由  <command moreinfo="none">diff</command> 程序生成。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>12 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Patch</title>

    <para>配置 Patch 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Patch 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-patch"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-perl" role="wrap">
  <?dbhtml filename="perl.html"?>

  

  <title>Perl-5.28.1</title>

  <indexterm zone="ch-tools-perl" significance="normal">
    <primary sortas="a-Perl">Perl</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/perl.xml">Perl 软件包包含实用信息抽取与报告语言。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.6 SBU</seg>
        <seg>275 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Perl</title>

    <para>配置 Perl 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">sh Configure -des -Dprefix=/tools -Dlibs=-lm -Uloclibpth -Ulocincpth</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">-des</parameter></term>
        <listitem>
          <para>这是三个选项地的组合：-d 对所有选项使用默认值；-e 确保完成所有任务；-s 静默，不产生非必要输出。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Uloclibpth amd -Ulocincpth</parameter></term>
        <listitem>
          <para>这些条目中未定义的变量，会促使配置过程去寻找宿主系统中已经存在的本地安装的组件。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>虽然 Perl 软件包自带测试套件，最好还是等下一章中它被完整安装之后再运行。</para>

    <para>这次我们只需要安装一小部分的应用和库。</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -v perl cpan/podlators/scripts/pod2man /tools/bin
mkdir -pv /tools/lib/perl5/5.28.1
cp -Rv lib/* /tools/lib/perl5/5.28.1</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-perl"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-Python" role="wrap">
  <?dbhtml filename="Python.html"?>

  

  <title>Python-3.7.2</title>

  <indexterm zone="ch-tools-Python" significance="normal">
    <primary sortas="a-Python">Python</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/python.xml">软件包 Python 3 包含了 Python 的开发环境。对于面向对象编程，书写脚本，构建大型程序的原型，或者开发整个应用程序而言，非常有用。</para>

    <segmentedlist>
    <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.5 SBU</seg>
        <seg>371 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Python</title>

    <para>这个软件包首先构建 Python 解释器，然后是一些标准的 Python模块。构建模块的主要脚本是用 Python 编写的，并使用宿主机 <filename class="directory" moreinfo="none">/usr/include</filename> 和 <filename class="directory" moreinfo="none">/usr/lib</filename> 目录的硬编码路径。以此防止他们被使用，输入：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/def add_multiarch_paths/a \        return' setup.py</userinput></screen>

    <para>配置 Python 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools --without-ensurepip</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--without-ensurepip</parameter></term>
        <listitem>
          <para>该选项用于禁用现阶段好不需要的 Python 安装程序。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>编译完成。测试套件需求 TK 和 X Windows，此时无法运行。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-python" role="."/></para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-sed" role="wrap">
  <?dbhtml filename="sed.html"?>

  

  <title>Sed-4.7</title>

  <indexterm zone="ch-tools-sed" significance="normal">
    <primary sortas="a-Sed">Sed</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/sed.xml">Sed 软件包包含一个流编辑器。</para>

    <segmentedlist>
    <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>20 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Sed</title>

    <para>配置 Sed 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Sed 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-sed"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-tar" role="wrap">
  <?dbhtml filename="tar.html"?>

  

  <title>Tar-1.31</title>

  <indexterm zone="ch-tools-tar" significance="normal">
    <primary sortas="a-Tar">Tar</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/tar.xml">Tar 软件包包含一个归档程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>38 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Tar</title>

    <para>配置 Tar 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Tar 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-tar"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-texinfo" role="wrap">
  <?dbhtml filename="texinfo.html"?>

  

  <title>Texinfo-6.5</title>

  <indexterm zone="ch-tools-texinfo" significance="normal">
    <primary sortas="a-Texinfo">Texinfo</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/texinfo.xml">Texinfo 软件包包含用于读、写以及转换信息页的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>104 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Texinfo</title>

    <para>配置 Texinfo 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

    <note>
      <para>作为配制过程的一部分，有一个测试会指出 TestXS_la-TestXS.lo 有一处错误。这与 LFS 没有关系，可以忽略。</para>
    </note>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Texinfo 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-texinfo"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-util-linux" role="wrap" revision="systemd">
  <?dbhtml filename="util-linux.html"?>

  

  <title>Util-linux-2.33.1</title>

  <indexterm zone="ch-tools-util-linux" significance="normal">
    <primary sortas="a-Util-linux">Util-linux</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Util-linux 软件包包含了各种各样的小工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1 SBU</seg>
        <seg>147 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Util-linux</title>

    <para>配置 Util-linux 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools                \
            --without-python               \
            --disable-makeinstall-chown    \
            --without-systemdsystemunitdir \
            --without-ncurses              \
            PKG_CONFIG=""</userinput></screen>

    <variablelist>
      <title>配置脚本参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--without-python</parameter></term>
        <listitem>
          <para>这个选项会禁止使用宿主系统中可能安装了的 <application moreinfo="none">Python</application>。这样可以避免构建一些不必要的捆绑应用。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-makeinstall-chown</parameter></term>
        <listitem>
          <para>这个选项会禁止在安装的时候使用 <command moreinfo="none">chown</command> 命令。这对我们安装到 /tools 目录没有意义而且可以避免使用 root 用户安装。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--without-ncurses</parameter></term>
        <listitem>
          <para>这个选项会禁止在构建的过程中使用 ncurses 库。在往 /tools 目录安装时没有必要使用 ncurses 库，而且这样做还能避免一些宿主发行版带来的问题。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--without-systemdsystemunitdir</parameter></term>
        <listitem>
          <para>对于使用 systemd 的系统，这个软件包会尝试安装 systemd 特定文件到 /tools 下一个不存在的目录里。这个选项可以避免这个不必要的动作。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><envar>PKG_CONFIG=""</envar></term>
        <listitem>
          <para>设定这个环境变量可以避免增加一些宿主机上存在却不必要的功能。请注意这里设定环境变量的方式和 LFS 其他部分放在命令前面的方式不同。在这里是为了展示一下使用 configure 脚本配置时设定环境变量的另一种方式。</para>
        </listitem>
      </varlistentry>
     </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-utillinux"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-xz" role="wrap">
  <?dbhtml filename="xz.html"?>

  

  <title>Xz-5.2.4</title>

  <indexterm zone="ch-tools-xz" significance="normal">
    <primary sortas="a-xz">Xz</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para xml:base="../chapter06/xz.xml">Xz 软件包包含用于压缩和解压文件的程序。它提供 lzma 和更新的 xz 压缩格式功能。和传统的 <command moreinfo="none">gzip</command> 或 <command moreinfo="none">bzip2</command> 命令相比，用 <command moreinfo="none">xz</command> 压缩文本文件能获得更好的压缩率。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>18 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Xz</title>

    <para>配置 Xz 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/tools</userinput></screen>

   <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译已经完成。之前说过，不要求为本章中所构建的临时工具运行测试套件。不过你仍然要测试 Xz 的话可以用下面的命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>关于这个软件包的详细资料请参见：
    <xref linkend="contents-xz"/>。</para>

  </sect2>

</sect1>
  <sect1 id="ch-tools-stripping">
  <?dbhtml filename="stripping.html"?>

  <title>清理无用内容</title>

  <para>本小节里的步骤是可选的，但如果你的 LFS 分区容量比较小，知道有些不必要的内容可以被删除也是挺好的。目前编译好的可执行文件和库大概会有 70MB 左右不需要的调试符号。可以通过下面的命令移除这些符号：</para>

<screen format="linespecific"><userinput moreinfo="none">strip --strip-debug /tools/lib/*
/usr/bin/strip --strip-unneeded /tools/{,s}bin/*</userinput></screen>

  <para>这两个命令会跳过一些文件，并提示不可识别的文件格式。大多数是脚本文件而不是二进制文件。同样还可以用宿主系统里的 strip 命令为 /tools 目录下的 strip 二进制文件清理无用内容。</para>

  <para>注意<emphasis>不要</emphasis>对库文件使用 <parameter moreinfo="none">--strip-unneeded</parameter> 选项。静态库会被损坏导致整个工具链将会需要全部重新编译。</para>

  <para>更节省更多空间，还可以删除帮助文档：</para>

<screen format="linespecific"><userinput moreinfo="none">rm -rf /tools/{,share}/{info,man,doc}</userinput></screen>

  <para>删除不需要的文件：</para>

<screen format="linespecific"><userinput moreinfo="none">find /tools/{lib,libexec} -name \*.la -delete</userinput></screen>

  <para>这个时候，你应该在 <envar>$LFS</envar> 分区中为下个阶段编译安装 Glibc 和 GCC 预留至少 3GB 剩余空间。如果你可以编译安装 Glibc，那其他的就不会有问题了。</para>

</sect1>
  <sect1 id="ch-tools-changingowner">
  <?dbhtml filename="changingowner.html"?>

  <title>改变属主</title>

  <note>
    <para>本书余下部分的命令都必须以 <systemitem class="username" moreinfo="none">root</systemitem> 用户身份执行而不再是 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户。另外，再次确认下 <envar>$LFS</envar> 变量在 <systemitem class="username" moreinfo="none">root</systemitem> 用户环境下也有定义。</para>
  </note>

  <para>当前，<filename class="directory" moreinfo="none">$LFS/tools</filename> 目录属于 <systemitem class="username" moreinfo="none">lfs</systemitem> 用户，这是一个只存在于宿主系统上的帐号。如果继续保持 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录的现状，其中的文件将属于一个没有相关联帐号的用户 ID。这很危险，因为随后创建的用户有可能会分配到相同的用户 ID，从而变成 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录及其中所有文件的属主，以致留下恶意操作这些文件的可能。</para>

  <para>为了解决这个问题，你可以在随后新的 <systemitem class="username" moreinfo="none">lfs</systemitem> 系统里创建 <filename moreinfo="none">/etc/passwd</filename> 文件时增加一个 lfs 用户，并注意给它分配和宿主系统里相同的用户和组 ID。不过更好的方式是，通过下面的命令将 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录的属主改为 <systemitem class="username" moreinfo="none">root</systemitem> 用户：</para>

<screen format="linespecific"><userinput moreinfo="none">chown -R root:root $LFS/tools</userinput></screen>

  <para>尽管 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录可以在 LFS 系统构建完成后删除，但仍然可以保留下来用于
构建额外的<emphasis>相同版本</emphasis> LFS 系统。备份 <filename class="directory" moreinfo="none">$LFS/tools</filename> 目录到底有多少好处取决于你个人。</para>

  <caution>
    <para>如果你想保留临时工具用来构建新的 LFS 系统，<emphasis>现在</emphasis>就要备份好。本书随后第六章中的指令将对当前的工具做些调整，导致在构建新系统时会失效。</para>
  </caution>

</sect1>

</chapter>
</part>

<part id="part3">
<title>构建 LFS 系统</title>
<?dbhtml filename="part3.html"?>
<chapter id="chapter-building-system" xreflabel="Chapter&#xA0;6" xml:base="chapter06/chapter06.xml">
  <?dbhtml dir="chapter06"?>
  <?dbhtml filename="chapter06.html"?>

  <title>安装基本的系统软件</title>

  <sect1 id="ch-system-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>在本章中，我们会进入构建环境开始认真地构建 LFS 系统了。我们将 chroot 到之前准备好的临时迷你 Linux 系统，做一些最后的准备工作，然后就开始安装软件包。</para>

  <para>安装软件很简单。尽管很多时候安装指令能更短而且更具通用性，但我们还是选择为每个软件包都提供完整的指令，以减小引起错误的可能性。了解 Linux 系统如何工作的关键就是知道每个软件包的作用以及为什么你（或系统）需要它。</para>

  <para>我们不建议在编译时使用优化。这虽然可以让程序运行得快那么一点点，但是却也有可能增加编译难度，以及在运行时出问题。如果在打开优化后编译失败，请试一下关闭优化编译看看。就算打开优化通过了编译，考虑到源代码和编译工具之间的复杂交互，仍然存在编译不正确的风险。还有需要注意 <option>-march</option> 和 <option>-mtune</option> 选项除了本书指定的值都未经测试。这有可能导致工具链软件包（Binutils、GCC 和 Glibc）发生问题。对比使用编译优化带来的好处与风险，这样做经常是得不偿失。第一次构建 LFS 系统还是推荐不要使用自定义优化。这样构建出来的系统一样会运行得很快，于此同时还很稳定。</para>

  <para>本章里安装软件包的顺序需要严格遵守，这是为了保证不会有程序意外地依赖与 <filename class="directory" moreinfo="none">/tools</filename> 路径的硬链相关的目录。同样的理由，不要同时编译不同的软件包。并行地编译也许能节省一点时间（特别是在双 CPU 电脑上），但是它可能会导致程序里存在包含到 <filename class="directory" moreinfo="none">/tools</filename> 目录的硬链接，这样的话在这个目录移除后程序就不能正常工作了。</para>

  <para>在安装指令之前，每个页面都提供了关于软件包的信息，包括其中所包含内容的精确描述，构建需求的大致时间，以及在过程中需求磁盘空间的大小。在安装指令之后，是一个该软件包即将安装的程序和库（及概要说明）的列表。</para>

  <note><para>第六章里软件包的 SBU 数值和所需磁盘空间包含了可能存在的测试套件数据。</para></note>

  <sect2>
    <title>关于库</title>

    <para>总的来说，LFS 的编辑们并不推荐构建和安装静态库。许多静态库的初衷已经赶不上现在的 Linux 系统了。而且将静态库链接到程序还有不好之处。假设库更新需要移除一个安全问题，所有使用该静态库的程序都需要重新链接到新的库。由于静态库并不会总那么明显，有哪些相关的程序（以及需要链接的程序）很可能都不知道。</para>

    <para>第六章的程序，我们移除或禁止了大部分静态库的安装。通常通过在 <command moreinfo="none">configure</command> 命令中使用 <option>--disable-static</option> 项，便可以做到。有些情况下，可能用到其他代替的办法。当然也有少数情况，特别是 glibc 和 gcc 使用的静态库在软件包的构建过程中是必不可少的。</para>

    <para>更多关于库的讨论，请参考 BLFS 中 <ulink url="http://www.linuxfromscratch.org/blfs//view/8.4/introduction/libraries.html">库：静态还是共享？</ulink> 章节。</para>

  </sect2>

</sect1>
  <sect1 id="ch-system-kernfs">
  <?dbhtml filename="kernfs.html"?>

  <title>准备虚拟内核文件系统</title>

  <indexterm zone="ch-system-kernfs" significance="normal">
    <primary sortas="e-/dev/">/dev/*</primary>
  </indexterm>

    <para>内核会挂载几个文件系统用于自己和用户空间程序交换信息。这些文件系统是虚拟的，并不占用实际磁盘空间，它们的内容会放在内存里。</para>

    <para>开始先创建将用来挂载文件系统的目录：</para>

<screen format="linespecific"><userinput moreinfo="none">mkdir -pv $LFS/{dev,proc,sys,run}</userinput></screen>

  <sect2>
    <title>创建初始设备节点</title>

    <para>在内核引导系统的时候，它依赖于几个设备节点，特别是 <filename class="devicefile" moreinfo="none">console</filename> 和 <filename class="devicefile" moreinfo="none">null</filename> 两个设备。设备点必须创建在硬盘上以保证在 <command moreinfo="none">udevd</command> 启动前是可用的，特别是在使用 <parameter moreinfo="none">init=/bin/bash</parameter> 启动 Linux 时。运行以下命令创建设备节点：</para>

<screen format="linespecific"><userinput moreinfo="none">mknod -m 600 $LFS/dev/console c 5 1
mknod -m 666 $LFS/dev/null c 1 3</userinput></screen>

  </sect2>

  <sect2 id="ch-system-bindmount">
    <title>挂载和激活 /dev</title>

      <para>通常激活 <filename class="directory" moreinfo="none">/dev</filename> 目录下设备的方式是在 <filename class="directory" moreinfo="none">/dev</filename> 目录挂载一个虚拟文件系统（比如 <systemitem class="filesystem" moreinfo="none">tmpfs</systemitem>），然后允许在检测到设备或打开设备时在这个虚拟文件系统里动态创建设备节点。这个通常是在启动过程中由 udev 完成。由于我们的新系统还没有 udev，也没有被引导，有必要手动挂载和激活  <filename class="directory" moreinfo="none">/dev</filename> 这可以通过绑定挂载宿主机系统的 <filename class="directory" moreinfo="none">/dev</filename> 目录来实现。绑定挂载是一种特殊的挂载模式，它允许在另外的位置创建某个目录或挂载点的镜像。运行下面的命令来实现：</para>

<screen format="linespecific"><userinput moreinfo="none">mount -v --bind /dev $LFS/dev</userinput></screen>

  </sect2>

  <sect2 id="ch-system-kernfsmount">
    <title>挂载虚拟文件系统</title>

      <para>现在挂载剩下的虚拟内核文件系统：</para>

<screen format="linespecific"><userinput moreinfo="none">mount -vt devpts devpts $LFS/dev/pts -o gid=5,mode=620
mount -vt proc proc $LFS/proc
mount -vt sysfs sysfs $LFS/sys
mount -vt tmpfs tmpfs $LFS/run</userinput></screen>

    <variablelist>
      <title>挂载选项 devpts 的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">gid=5</parameter></term>
        <listitem>
          <para>以确保所有由 devpts 创建的设备节点属于 GID 5 之下。这个 ID 日后将用于 <systemitem class="groupname" moreinfo="none">tty</systemitem> 组。我们使用 GID 来代替组名，原因是宿主系统可能为 <systemitem class="groupname" moreinfo="none">tty</systemitem> 组使用其他的 ID。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">mode=0620</parameter></term>
        <listitem>
          <para>以确保所有 devpts 创建的设备节点的属性为 0620 （属主用户可读写，组成员可写）。与上一个选项同时使用，可以保证 devpts 所创建的设备节点能满足 grantpt() 函数的要求，这就意味着不需要 Glibc （默认不安装的）帮助程序 <command moreinfo="none">pt_chown</command> 了。</para>
        </listitem>
      </varlistentry>

    </variablelist>

      <para>在某些宿主机系统里，<filename moreinfo="none">/dev/shm</filename> 是一个指向 <filename class="directory" moreinfo="none">/run/shm</filename> 的软链接。这个 /run 下的 tmpfs 文件系统已经在之前挂载了，所以在这里只需要创建一个目录。</para>

<screen format="linespecific"><userinput moreinfo="none">if [ -h $LFS/dev/shm ]; then
  mkdir -pv $LFS/$(readlink $LFS/dev/shm)
fi</userinput></screen>

  </sect2>

</sect1>
  <sect1 id="ch-system-pkgmgt">
  <?dbhtml filename="pkgmgt.html"?>

  <title>软件包管理</title>

  <para>软件包管理经常被请求加入到 LFS 手册中。软件包管理器可以追踪安装的文件，方便软件包的移除和升级。不仅是二进制执行文件和库文件，包管理器还会处理配置文件的安装。在你想太多之前，答案是「不」——本节不讨论也不向大家推荐任何特定的软件包管理器，只是总结了一下关于软件包管理的常用技术和工作原理。对你而言最完美的软件包管理器可能就在这些技术之中，也可能由这些技术的其中几个组合而成。本节还简要的提了一些在升级软件包时可能遇到的问题。</para>

  <para>为什么 LFS 或 BLFS 手册里不采用任何软件包管理器的一些原因：</para>

  <itemizedlist>
    <listitem>
      <para>使用软件包管理偏离了本手册的主要目标——教大家 Linux 系统是如何构建出来的。</para>
    </listitem>

    <listitem>
      <para>存在很多软件包管理的解决方案，每一个都有自己的长处和缺点。很难选择一种适合所有人的方式。</para>
    </listitem>
  </itemizedlist>

  <para>关于软件包管理有很多资料，可以访问 <ulink url="http://www.linuxfromscratch.org/hints/list.html">Hints Project</ulink> 看看是否可以解决你的需求。</para>

  <sect2>
    <title>升级问题</title>

    <para>软件包管理器可以在软件新版本发布后轻松升级。一般来说 LFS 和 BLFS 手册里的指令是可以用来升级版本。下面是一些在你准备升级软件包时需要注意的事情，特别是运行中系统需更加注意。</para>

    <itemizedlist>
      <listitem>
        <para>如果需要升级 Glibc 到新版本（比如，从 glibc-2.19 升级到 glibc-2.20），重新构建整个 LFS 会比较安全。虽然你 <emphasis>也许</emphasis> 能够按依赖关系重新编译所有的软件包，不过我们不建议这样做。</para>
      </listitem>

      <listitem>
        <para>如果某个包含的动态库的软件包升级了，而且库名字有所改变，那么所有动态链接到这个库的软件包都需要重新链接新的库。（请注意软件包版本和库名字并不存在相关性）。举个例子，说软件包  foo-1.2.3 安装了一个叫 <filename class="libraryfile" moreinfo="none">libfoo.so.1</filename>  的动态库。然后你将软件包升级到了新版本 foo-1.2.4 安装的动态库叫 <filename class="libraryfile" moreinfo="none">libfoo.so.2</filename> 了。在这种情况下，所有动态链接到 <filename class="libraryfile" moreinfo="none">libfoo.so.1</filename> 的软件包都需要重新编译链接到 <filename class="libraryfile" moreinfo="none">libfoo.so.2</filename>。注意在所有依赖软件包重新编译完成之前，请勿删除之前的库文件。</para>
      </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>软件包管理技术</title>

    <para>下面介绍一些常见的软件包管理技巧。在决定用哪种包管理方式之前，先研究一下各种不同的技术，特别是某些方案的不足之处。</para>

    <sect3>
      <title>所有一切都在我脑袋里！</title>

      <para>是的，这也算一种软件包管理技术。有些人觉得不需要管理软件包，是因为他们非常熟悉软件包，知道每个包都安装了哪些文件。也有些用户不需要管理软件包，是因为他们会在某个软件包有更改后重建整个系统。</para>

    </sect3>

    <sect3>
      <title>在独立目录里安装</title>

      <para>这是一种简单的软件包管理方式，不需要其他额外的软件来管理软件的安装。每一个软件包都被装到一个独立的目录里。例如，软件包 foo-1.1 安装到目录 <filename class="directory" moreinfo="none">/usr/pkg/foo-1.1</filename> 中并创建一个软链接 <filename moreinfo="none">/usr/pkg/foo</filename> 指向 <filename class="directory" moreinfo="none">/usr/pkg/foo-1.1</filename>。在安装新版本 foo-1.2 的时候，它会被装到目录 <filename class="directory" moreinfo="none">/usr/pkg/foo-1.2</filename> 中，然后用指向新版本的软链替代之前的软链接。</para>

      <para>类似 <envar>PATH</envar>、<envar>LD_LIBRARY_PATH</envar>、<envar>MANPATH</envar>、<envar>INFOPATH</envar> 和 <envar>CPPFLAGS</envar> 之类的环境变量变量需要包含 <filename moreinfo="none">/usr/pkg/foo</filename> 目录。在管理大量软件包时，这种方式就不可行了。</para>

    </sect3>

    <sect3>
      <title>软链接方式软件包管理</title>

      <para>这是前一种软件包管理技术的变种。每个软件包的安装方式都和之前的方式类似。但不是建立目录的软链接，而是把每个文件都链接到 <filename class="directory" moreinfo="none">/usr</filename> 目录结构里。这样就不需要扩展环境变量了。即使软链接会被用户创建，由于（一些工具的）自动创建，许多软件包管理器仍旧采用了这种方式进行管理。其中比较流行的有 Stow、Epkg、Graft 和 Depot。</para>

      <para>这种安装方式需要伪装，这样软件包会认为自己被装到了 <filename class="directory" moreinfo="none">/usr</filename> 目录下，而实际上它被装到了 <filename class="directory" moreinfo="none">/usr/pkg</filename>  目录下。在这种方式下，安装并不是一件琐碎的小事。例如，假如你准备安装一个软件包 libfoo-1.1。下面的指令可能不会正确地安装：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">./configure --prefix=/usr/pkg/libfoo/1.1
make
make install</userinput></screen>

      <para>安装本身倒是没有问题，但是可能一些依赖包不会像你期望的那样链接到 libfoo 库。如果你要编译一个链接 libfoo 的软件，你可能会注意到它实际上链接到的是 <filename class="libraryfile" moreinfo="none">/usr/pkg/libfoo/1.1/lib/libfoo.so.1</filename> 而不是你所期望的 <filename class="libraryfile" moreinfo="none">/usr/lib/libfoo.so.1</filename>。正确的方式是使用 <envar>DESTDIR</envar> 策略来伪装软件包的安装过程。这种方式需要像下面这样操作：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">./configure --prefix=/usr
make
make DESTDIR=/usr/pkg/libfoo/1.1 install</userinput></screen>

      <para>大多数软件包支持这种方式，但也有一些例外。对于不兼容的软件包，你可能需要自己手动安装，或许你会发现将这些有问题的包安装到 <filename class="directory" moreinfo="none">/opt</filename> 目录下会更简单些。</para>

    </sect3>

    <sect3>
      <title>基于时间戳</title>

      <para>在这种方式里，在安装之前会创建一个时间戳文件。在安装之后，用一行简单的 <command moreinfo="none">find</command> 命令加上合适的参数就可以生成在时间戳文件创建之后所安装的所有文件列表。有一个采用这种方式的包管理器叫做 install-log。</para>

      <para>这种方式的优点是非常简单，但是它有两个缺陷。比如，在安装过程中，所安装文件采用的是其它时间戳而不是当前时间，那这些文件将不能被软件包管理器跟踪到。还有，这种方式只能在一次安装一个软件包的情况下使用。如果在不同的终端里同时安装两个不同的软件包，此时的安装日志就不可靠了。</para>

    </sect3>

    <sect3>
      <title>追踪安装脚本</title>

      <para>在这种方式里，安装脚本所使用的命令都会被记录下来。有两种技术，一种是：</para>

      <para>设定环境变量 <envar>LD_PRELOAD</envar> 指向一个在安装前预加载的库。在安装过程中，这个库会追踪软件包安装脚本里所包含的各种执行文件比如 <command moreinfo="none">cp</command>、<command moreinfo="none">install</command>、<command moreinfo="none">mv</command>，以及追踪会修改文件系统的系统调用。要让这种方式有效的话，所有的执行文件需要动态链接到没有 suid 或 sgid 标志位的库。预加载这个库可能会引起安装过程中一些意外的副作用。因此，建议做一些测试以保证软件包管理器不会造成破坏并且记录了所有适当的文件。</para>

      <para>第二种技术是使用 <command moreinfo="none">strace</command> 命令，它会记录下安装脚本执行过程中所有的系统调用。</para>
    </sect3>

    <sect3>
      <title>创建软件包存档</title>

      <para>在这种方式里，像之前的软链接软件包管理方式里所描述的那样，软件包被伪装安装到一个独立的目录树里。在安装完成后，会将已安装文件打包成一个软件包存档。然后这个存档会用来在本地机器或其他机器上安装软件包。</para>

      <para>这种方式为商业发行版中的大多数包管理器所采用。例子有 RPM（顺带提一下，这也是 <ulink url="http://refspecs.linuxfoundation.org/lsb.shtml">Linux 标准规范</ulink> 中指定的包管理器），pkg-utils，Debian 的 apt，和 Gentoo 的 Portage 系统。如何在 LFS 系统里采用这种包管理方式的简单描述，请参看 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/fakeroot.txt"/>.</para>

      <para>创建带有依赖关系的软件包存档非常复杂，已经超出 LFS 手册范围了。</para>

      <para>Slackware 使用一个基于 <command moreinfo="none">tar</command> 的系统来创建软件包存档。这套系统不像那些更复杂的包管理器，有意地不处理包依赖关系。关于 Slackware 包管理器的详细信息，请参看 <ulink url="http://www.slackbook.org/html/package-management.html"/>。</para>
    </sect3>

    <sect3>
      <title>基于用户的软件包管理</title>

      <para>这种方式，是 LFS 特有的，由 Matthias Benkmann 所设计，可以在  <ulink url="http://www.linuxfromscratch.org/hints/list.html">Hints Project</ulink> 中能找到。在这种方式里，每个软件包都由一个单独的用户安装到标准的位置。文件属于某个软件包可以通过检查用户 ID 轻松识别出来。关于这种方式的利弊比较复杂，就不再本节中赘述了。详细的信息请参看 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/more_control_and_pkg_man.txt"/>。</para>

    </sect3>

  </sect2>

  <sect2>
    <title>在多个系统上部署 LFS</title>

    <para>LFS 系统的一个优点是没有那种需要依赖其在磁盘系统中的位置的文件。克隆一份 LFS 到和宿主机器相似配置的机器上，简单到只要对包含根目录的 LFS 分区（对于一个基本的 LFS 构建不压缩的话大概有 250MB）使用 <command moreinfo="none">tar</command> 命令打包，然后通过网络传输或光盘拷贝到新机器上展开即可。在这之后，需要调整一些配置文件。需要更新的配置文件包括：
    <filename moreinfo="none">/etc/hosts</filename>,
    <filename moreinfo="none">/etc/fstab</filename>,
    <filename moreinfo="none">/etc/passwd</filename>,
    <filename moreinfo="none">/etc/group</filename>,
    <phrase revision="systemd">
      <filename moreinfo="none">/etc/shadow</filename>, 和
      <filename moreinfo="none">/etc/ld.so.conf</filename>。
    </phrase>
    
    </para>

    <para>根据系统硬件和原始内核配置文件的差异，可能还需要重新编译一下内核。</para>

    <note><para>据报告，当这样的复制发生在两个相近却又不完全相同的架构时会发生问题。例如，Intel 系统的指令集就和 AMD 处理器的不同，还有一些较新版的处理器可能会有一些在较早版本中不能支持的指令。</para></note>

    <para>最后，通过 <xref linkend="ch-bootable-grub"/> 中介绍的方法来使新系统可以引导。</para>

  </sect2>

</sect1>
  <sect1 id="ch-system-chroot">
  <?dbhtml filename="chroot.html"?>

  <title>进入 Chroot 环境</title>

  <para>现在可以切换到 chroot 环境开始构建和安装最终的 LFS 系统了。以 <systemitem class="username" moreinfo="none">root</systemitem> 用户运行下面的命令进入此环境，从现在开始，就只剩下准备的那些临时工具了：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">chroot "$LFS" /tools/bin/env -i \
    HOME=/root                  \
    TERM="$TERM"                \
    PS1='(lfs chroot) \u:\w\$ ' \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
    /tools/bin/bash --login +h</userinput></screen>

  <para>给 <command moreinfo="none">env</command> 命令传递 <parameter moreinfo="none">-i</parameter> 选项会清除这个 chroot 切换进去的环境中的所有变量。随后，只需重新设定 <envar>HOME</envar>、<envar>TERM</envar>、<envar>PS1</envar> 、和 <envar>PATH</envar> 变量。<parameter moreinfo="none">TERM=$TERM</parameter> 将会把 <envar>TERM</envar> 设定成 chroot 外环境相同的值。许多程序需要这个变量才能正常工作，比如 <command moreinfo="none">vim</command> 和 <command moreinfo="none">less</command>。如果还需设定其他变量，如 <envar>CFLAGS</envar> 或 <envar>CXXFLAGS</envar>，正好在这一起设置了。</para>

  <para>在这之后，<envar>LFS</envar> 变量就不再需要了，因为后面所有工作都将被限定在 LFS 文件系统中。因为我们已经告诉 Bash 终端 <filename class="directory" moreinfo="none">$LFS</filename> 就是当前的根目录（<filename class="directory" moreinfo="none">/</filename>）目录。</para>

  <para>注意要将 <filename class="directory" moreinfo="none">/tools/bin</filename> 放在 <envar>PATH</envar> 变量的最后。意思是在每个软件的最后版本编译安装好后就不再使用临时工具了。这还需要让 shell 不要「记住」每个可执行文件的位置——这样的话，还要给 <command moreinfo="none">bash</command> 加上 <parameter moreinfo="none">+h</parameter> 选项来关闭其哈希功能。</para>

  <para>注意一下 <command moreinfo="none">bash</command> 的提示符是 <computeroutput moreinfo="none">I have no name!</computeroutput> 这是正常的，因为这个时候 <filename moreinfo="none">/etc/passwd</filename> 文件还没有被创建。</para>

  <note>
    <para>非常重要，从本章开始，后续章节中的命令都要在 chroot 环境下运行。如果因为某种原因（比如说重启）离开了这个环境，请保证要按照 <xref linkend="ch-system-bindmount"/> 和 <xref linkend="ch-system-kernfsmount"/> 中所说的那样挂载虚拟内核文件系统，并在继续构建之前重新运行 chroot 进入环境。</para>
  </note>

</sect1>
  <sect1 id="ch-system-creatingdirs">
  <?dbhtml filename="creatingdirs.html"?>

  <title>创建目录</title>

  <para>现在准备创建 LFS 文件系统里的一些目录结构。使用下面的命令创建一个标准的目录树：</para>

<screen format="linespecific"><userinput moreinfo="none">mkdir -pv /{bin,boot,etc/{opt,sysconfig},home,lib/firmware,mnt,opt}
mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
install -dv -m 0750 /root
install -dv -m 1777 /tmp /var/tmp
mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
mkdir -v  /usr/libexec
mkdir -pv /usr/{,local/}share/man/man{1..8}

case $(uname -m) in
 x86_64) mkdir -v /lib64 ;;
esac

mkdir -v /var/{log,mail,spool}
ln -sv /run /var/run
ln -sv /run/lock /var/lock
mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}</userinput></screen>

  <para>一般目录默认会按 755 的权限创建，但是这并不适用于所有的目录。在上面的命令里，有两个改动——一个是 <systemitem class="username" moreinfo="none">root</systemitem> 的 home 目录，另一个是存放临时文件的目录。</para>

  <para>第一个模式改动能保证不是所有人都能进入 <filename class="directory" moreinfo="none">/root</filename> 目录——同样一般用户也需要为他/她的 home 目录设置这样的模式。第二个模式改动能保证所有用户对目录 <filename class="directory" moreinfo="none">/tmp</filename> 和 <filename class="directory" moreinfo="none">/var/tmp</filename> 都是可写的，但又不能移除其他用户的文件。后面的这个限制是由所谓的「粘滞位」实现的，即位掩码 1777 中的最高位（1）。</para>

  <sect2>
    <title>关于 FHS 兼容性</title>

    <para>这个目录树是基于文件系统目录结构标准（FHS）（参看 <ulink url="https://wiki.linuxfoundation.org/en/FHS"/>）。FHS 标准还规定了要有 <filename class="directory" moreinfo="none">/usr/local/games</filename> 和 <filename class="directory" moreinfo="none">/usr/share/games</filename> 目录。我们只创建了我们需要的目录。然而，如果你更喜欢严格遵守 FHS 标准，创建这些目录也无妨。</para>

  </sect2>

</sect1>
  <sect1 id="ch-system-createfiles">
  <?dbhtml filename="createfiles.html"?>

  <title>创建必要的文件和符号链接</title>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/etc/passwd">/etc/passwd</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/etc/group">/etc/group</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/var/run/utmp">/var/run/utmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/var/log/btmp">/var/log/btmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/var/log/lastlog">/var/log/lastlog</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles" significance="normal">
    <primary sortas="e-/var/log/wtmp">/var/log/wtmp</primary>
  </indexterm>

  <para>有些程序里会使用写死的路径调用其它暂时还未安装的程序。为了满足这种类型程序的需要，我们将创建一些符号链接，在完成本章内容后这些软件会安装好，并替代之前的符号链接：</para>

<screen format="linespecific"><userinput moreinfo="none">ln -sv /tools/bin/{bash,cat,chmod,dd,echo,ln,mkdir,pwd,rm,stty,touch} /bin
ln -sv /tools/bin/{env,install,perl,printf}         /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1}                  /usr/lib
ln -sv /tools/lib/libstdc++.{a,so{,.6}}             /usr/lib

install -vdm755 /usr/lib/pkgconfig

ln -sv bash /bin/sh</userinput></screen>

<!--for lib in blkid lzma mount uuid
do
    ln -sv /tools/lib/lib$lib.so* /usr/lib
done-->
<!--ln -svf /tools/include/blkid    /usr/include
ln -svf /tools/include/libmount /usr/include
ln -svf /tools/include/uuid     /usr/include-->
<!--for pc in blkid mount uuid
do
    sed 's@tools@usr@g' /tools/lib/pkgconfig/${pc}.pc \
        > /usr/lib/pkgconfig/${pc}.pc
done-->
  <variablelist>
    <title>每个链接的目的：</title>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/bash</filename></parameter></term>
      <listitem>
        <para>许多 <command moreinfo="none">bash</command> 脚本指定了 <filename moreinfo="none">/bin/bash</filename>。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/cat</filename></parameter></term>
      <listitem>
        <para>这个路径在 Glibc 的配置脚本里写死了。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/dd</filename></parameter></term>
      <listitem>
        <para>到 <filename moreinfo="none">dd</filename> 的路径将写死在<filename moreinfo="none">/usr/bin/libtool</filename> 实用工具中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/echo</filename></parameter></term>
      <listitem>
        <para>这个是为了满足 Glibc 测试套件里的一个测试用例，它会检测 <filename moreinfo="none">/bin/echo</filename>。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/usr/bin/env</filename></parameter></term>
      <listitem>
        <para>这个路径名硬编码到许多软件包的构建过程中。
        <!-- systemd  This may not be needed if we move sysd to the end--></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/usr/bin/install</filename></parameter></term>
      <listitem>
        <para>到 <filename moreinfo="none">install</filename> 的路径将写死在 <filename moreinfo="none">/usr/lib/bash/Makefile.inc</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/ln</filename></parameter></term>
      <listitem>
        <para>到 <filename moreinfo="none">ln</filename> 的路径将写死在 <filename moreinfo="none">/usr/lib/perl5/5.28.1/&lt;target-triplet&gt;/Config_heavy.pl</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/pwd</filename></parameter></term>
      <listitem>
        <para>某些 <command moreinfo="none">configure</command> 脚本，特别是 Glibc 的，写死了这个路径。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/rm</filename></parameter></term>
      <listitem>
        <para>到 <filename moreinfo="none">rm</filename> 的路径将写死在 <filename moreinfo="none">/usr/lib/perl5/5.28.1/&lt;target-triplet&gt;/Config_heavy.pl</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/stty</filename></parameter></term>
      <listitem>
        <para>这个路径在 Expect 软件中写死了，所以在 Binutils 和 GCC 测试套件中会需要它。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/usr/bin/perl</filename></parameter></term>
      <listitem>
        <para>许多 Perl 脚本写死了这个路径调用 <command moreinfo="none">perl</command> 执行程序。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/usr/lib/libgcc_s.so{,.1}</filename></parameter></term>
      <listitem>
        <para>Glibc 需要这个让 pthreads 库正常工作。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/usr/lib/libstdc++{,.6}</filename></parameter></term>
      <listitem>
        <para>在 Glibc 的一些测试套件和对于 GMP 的 C++ 支持中会需要。</para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term><parameter><filename>/usr/lib/libstdc++.la</filename></parameter></term>
      <listitem>
        <para>This prevents a <filename class="directory">/tools</filename>
        reference that would otherwise be in
        <filename>/usr/lib/libstdc++.la</filename> after GCC is installed.</para>
      </listitem>
    </varlistentry>
-->
    <!--<varlistentry revision="systemd">-->
<!--    <varlistentry>
      <term><parameter><filename>/usr/lib/lib{blkid,lzma,mount,uuid}.{a,la,so*}</filename></parameter></term>
      <listitem>
        <para>这些链接可以防止实用程序获取 <filename class="directory">/tools</filename> 目录中不必要的引用。</para>
      </listitem>
    </varlistentry>-->

    <varlistentry>
      <term><parameter moreinfo="none"><filename moreinfo="none">/bin/sh</filename></parameter></term>
      <listitem>
        <para>许多 shell 脚本写死了位置 <filename moreinfo="none">/bin/sh</filename>。</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>由于历史原因，Linux 在文件 <filename moreinfo="none">/etc/mtab</filename> 中维护一个已挂载文件系统的列表。而现代内核改为在内部维护这个列表，并通过 <filename class="directory" moreinfo="none">/proc</filename> 文件系统输出给用户。为了满足一些依赖 <filename moreinfo="none">/etc/mtab</filename> 文件的应用程序，我们要创建下面的符号链接：</para>

<screen format="linespecific"><userinput moreinfo="none">ln -sv /proc/self/mounts /etc/mtab</userinput></screen>

  <para>为了让 <systemitem class="username" moreinfo="none">root</systemitem> 用户能正常登录，而且「root」的名字能被正常识别，必须在文件 <filename moreinfo="none">/etc/passwd</filename> 和 <filename moreinfo="none">/etc/group</filename>  中写入相应的内容。</para>

  <para>运行下面的命令创建 <filename moreinfo="none">/etc/passwd</filename> 文件：</para>



<screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/passwd &lt;&lt; "EOF"
<literal moreinfo="none">root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
systemd-bus-proxy:x:72:72:systemd Bus Proxy:/:/bin/false
systemd-journal-gateway:x:73:73:systemd Journal Gateway:/:/bin/false
systemd-journal-remote:x:74:74:systemd Journal Remote:/:/bin/false
systemd-journal-upload:x:75:75:systemd Journal Upload:/:/bin/false
systemd-network:x:76:76:systemd Network Management:/:/bin/false
systemd-resolve:x:77:77:systemd Resolver:/:/bin/false
systemd-timesync:x:78:78:systemd Time Synchronization:/:/bin/false
systemd-coredump:x:79:79:systemd Core Dumper:/:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false</literal>
EOF</userinput></screen>

  <para><systemitem class="username" moreinfo="none">root</systemitem>  用户的实际密码（这里的「x」只是占位符）将在后面创建。</para>

  <para>运行下面的命令创建 <filename moreinfo="none">/etc/group</filename> 文件：</para>



<screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/group &lt;&lt; "EOF"
<literal moreinfo="none">root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
kvm:x:61:
systemd-bus-proxy:x:72:
systemd-journal-gateway:x:73:
systemd-journal-remote:x:74:
systemd-journal-upload:x:75:
systemd-network:x:76:
systemd-resolve:x:77:
systemd-timesync:x:78:
systemd-coredump:x:79:
wheel:x:97:
nogroup:x:99:
users:x:999:</literal>
EOF</userinput></screen>

  <para>这里创建的用户组没有参照任何标准——它们一部分是为了满足本章中配置 udev 的需要，还有一部分来自一些现存 Linux 发行版的通用设定。另外，某些测试套件也依赖特定用户或组。而 Linux 标准规范 （LSB，参见 <ulink url="http://www.linuxbase.org"/>）只要求以组 ID（GID）为 0 创建用户组 
  <systemitem class="groupname" moreinfo="none">root</systemitem> 以及以 GID 为 1 创建用户组 <systemitem class="groupname" moreinfo="none">bin</systemitem>。系统管理员可以自由分配其它所有用户组名字和 GID，因为优秀的程序不会依赖 GID 数字，而是使用组名。</para>

  <para>为了移除「I have no name!」的提示符，可以打开一个新 shell。由于完整的 Glibc 已经在 <xref linkend="chapter-temporary-tools"/> 里装好了，而且已经创建好了 <filename moreinfo="none">/etc/passwd</filename> 和 <filename moreinfo="none">/etc/group</filename> 文件，用户名和组名就可以正常解析了：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">exec /tools/bin/bash --login +h</userinput></screen>

  <para>注意这里使用了 <parameter moreinfo="none">+h</parameter> 参数。这样会告诉 <command moreinfo="none">bash</command> 不要使用它内建的路径哈希功能。而不加这个参数的话，<command moreinfo="none">bash</command> 将会记住曾经执行过程序的路径。为了在新编译安装好程序后就能马上使用，参数 <parameter moreinfo="none">+h</parameter> 将在本章中一直使用。</para>

  <para>程序 <command moreinfo="none">login</command>、<command moreinfo="none">agetty</command> 和 <command moreinfo="none">init</command>（还有一些其它的）会使用一些日志文件来记录信息，比如谁在什么时候登录了系统。不过，在日志文件不存在的时候这些程序一般不会写入。下面初始化一下日志文件并加上合适的权限：</para>

<screen format="linespecific"><userinput moreinfo="none">touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp</userinput></screen>

  <para>文件 <filename moreinfo="none">/var/log/wtmp</filename> 会记录所有的登录和登出动作。文件 <filename moreinfo="none">/var/log/lastlog</filename> 会记录每个用户的最后一次登录时间。文件 <filename moreinfo="none">/var/log/faillog</filename> 会记录失败的登录尝试。文件 <filename moreinfo="none">/var/log/btmp</filename> 会记录非法的登录尝试。</para>

  <note><para>文件 <filename moreinfo="none">/run/utmp</filename> 会记录当前已登录的用户。这个文件会在启动脚本中动态创建。</para></note>

</sect1>
  <sect1 id="ch-system-linux-headers" role="wrap">
  <?dbhtml filename="linux-headers.html"?>

  

  <title>Linux-4.20.12 API 头文件</title>

  <indexterm zone="ch-system-linux-headers" significance="normal">
    <primary sortas="a-Linux">Linux</primary>
    <secondary>API headers</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux API 头文件（在 linux-4.20.12.tar.xz 里）会将内核 API 导出给 Glibc 使用。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>941 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Linux API 头文件的安装</title>

    <para>Linux 内核需要提供一个应用编程接口（API）供系统的 C 库（LFS 中的 Glibc）调用。这通过整理 Linux 内核源码包中的多个 C 头文件来完成。</para>

    <para>确保在之前的动作里没有留下旧文件和依赖关系：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">make mrproper</userinput></screen>

    <para>现在要从源代码里解压出用户需要的内核头文件。因为解压过程会删除目标目录下所有文件，所以我们会先输出到一个本地中间目录后再拷贝到需要的地方。而且里面还有一些隐藏文件是给内核开发人员用的，而 LFS 不需要，所以会将它们从中间目录里删除。</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make INSTALL_HDR_PATH=dest headers_install
find dest/include \( -name .install -o -name ..install.cmd \) -delete
</userinput><userinput remap="install" moreinfo="none">cp -rv dest/include/* /usr/include</userinput></screen>

  </sect2>

  <sect2 id="contents-linux-headers" role="content">
    <title>Linux API 头文件内容</title>

    <segmentedlist>
      <segtitle>安装的头文件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>/usr/include/asm/*.h, /usr/include/asm-generic/*.h,
        /usr/include/drm/*.h, /usr/include/linux/*.h, /usr/include/misc/*.h,
        /usr/include/mtd/*.h, /usr/include/rdma/*.h, /usr/include/scsi/*.h, 
        /usr/include/sound/*.h, /usr/include/video/*.h, 
        和 /usr/include/xen/*.h</seg>
        <seg>/usr/include/asm, /usr/include/asm-generic, /usr/include/drm,
        /usr/include/linux, /usr/include/misc, /usr/include/mtd, 
        /usr/include/rdma, /usr/include/scsi, /usr/include/sound, 
        /usr/include/video, 和 /usr/include/xen</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="asm">
        <term><filename class="headerfile" moreinfo="none">/usr/include/asm/*.h</filename></term>
        <listitem>
          <para>Linux API ASM 头文件</para>
          <indexterm zone="ch-system-linux-headers asm" significance="normal">
            <primary sortas="e-/usr/include/asm/*.h">/usr/include/asm/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="asm-generic">
        <term><filename class="headerfile" moreinfo="none">/usr/include/asm-generic/*.h</filename></term>
        <listitem>
          <para>Linux API ASM 通用头文件</para>
          <indexterm zone="ch-system-linux-headers asm-generic" significance="normal">
            <primary sortas="e-/usr/include/asm-generic/*.h">/usr/include/asm-generic/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="drm">
        <term><filename class="headerfile" moreinfo="none">/usr/include/drm/*.h</filename></term>
        <listitem>
          <para>Linux API DRM 头文件</para>
          <indexterm zone="ch-system-linux-headers drm" significance="normal">
            <primary sortas="e-/usr/include/drm/*.h">/usr/include/drm/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="linux">
        <term><filename class="headerfile" moreinfo="none">/usr/include/linux/*.h</filename></term>
        <listitem>
          <para>Linux API Linux 头文件</para>
          <indexterm zone="ch-system-linux-headers linux" significance="normal">
            <primary sortas="e-/usr/include/linux/*.h">/usr/include/linux/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mtd">
        <term><filename class="headerfile" moreinfo="none">/usr/include/mtd/*.h</filename></term>
        <listitem>
          <para>Linux API MTD 头文件</para>
          <indexterm zone="ch-system-linux-headers mtd" significance="normal">
            <primary sortas="e-/usr/include/mtd/*.h">/usr/include/mtd/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rdma">
        <term><filename class="headerfile" moreinfo="none">/usr/include/rdma/*.h</filename></term>
        <listitem>
          <para>Linux API RDMA 头文件</para>
          <indexterm zone="ch-system-linux-headers rdma" significance="normal">
            <primary sortas="e-/usr/include/rdma/*.h">/usr/include/rdma/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scsi">
        <term><filename class="headerfile" moreinfo="none">/usr/include/scsi/*.h</filename></term>
        <listitem>
          <para>Linux API SCSI 头文件</para>
          <indexterm zone="ch-system-linux-headers scsi" significance="normal">
            <primary sortas="e-/usr/include/scsi/*.h">/usr/include/scsi/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sound">
        <term><filename class="headerfile" moreinfo="none">/usr/include/sound/*.h</filename></term>
        <listitem>
          <para>Linux API 音频头文件</para>
          <indexterm zone="ch-system-linux-headers sound" significance="normal">
            <primary sortas="e-/usr/include/sound/*.h">/usr/include/sound/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="video">
        <term><filename class="headerfile" moreinfo="none">/usr/include/video/*.h</filename></term>
        <listitem>
          <para>Linux API 视频头文件</para>
          <indexterm zone="ch-system-linux-headers video" significance="normal">
            <primary sortas="e-/usr/include/video/*.h">/usr/include/video/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xen">
        <term><filename class="headerfile" moreinfo="none">/usr/include/xen/*.h</filename></term>
        <listitem>
          <para>Linux API Xen 头文件</para>
          <indexterm zone="ch-system-linux-headers xen" significance="normal">
            <primary sortas="e-/usr/include/xen/*.h">/usr/include/xen/*.h</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-man-pages" role="wrap">
  <?dbhtml filename="man-pages.html"?>

  

  <title>Man-pages-4.16</title>

  <indexterm zone="ch-system-man-pages" significance="normal">
    <primary sortas="a-Man-pages">Man-pages</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Man-pages 软件包里包含了超过 2,200 份 man 手册页面。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>28 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Man-pages</title>

    <para>运行下面的命令安装 Man-pages：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-manpages" role="content">
    <title>Man-pages 内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>

      <seglistitem>
        <seg>各种 man 手册页面</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="man-pages">
        <term><filename moreinfo="none">man pages</filename></term>
        <listitem>
          <para>描述 C 编程语言函数，重要的设备文件，以及主要的配置文件</para>
          <indexterm zone="ch-system-man-pages man-pages" significance="normal">
            <primary sortas="e-man-pages">man pages</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  

  <title>Glibc-2.29</title>

  <indexterm zone="ch-system-glibc" significance="normal">
    <primary sortas="a-Glibc">Glibc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Glibc 软件包包含了主要的 C 函数库。这个库提供了分配内存、搜索目录、打开关闭文件、读写文件、操作字符串、模式匹配、基础算法等基本程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>22 SBU</seg>
        <seg>3.2 GB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Glibc</title>

    <note><para>Glibc 构建系统是独立的，并且会完美地安装，即使编译器指定的文件和链接器仍然指向 <filename class="directory" moreinfo="none">/tools</filename>。在 Glibc 安装之前，不能调整指定的文件和链接器，因为 Glibc 的 autoconf 测试会给出错误结果并阻碍目标实现干净的构建。</para></note>

    <para>有些 Glibc 程序会用到和 FHS 不兼容的 <filename class="directory" moreinfo="none">/var/db</filename> 目录来存储它们的运行时数据。打上如下的补丁让这些程序在 FHS 兼容的位置存储它们的运行时数据。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">patch -Np1 -i ../glibc-2.29-fhs-1.patch</userinput></screen>
<!--
    <para>Fix a minor security issue with glob functions:</para>

<screen><userinput remap="pre">patch -Np1 -i ../&glibc-glob-patch;</userinput></screen>
-->
    <para>首先创建一个兼容性符号链接，以避免在最终的 glibc 中存在 /tool 中的引用：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">ln -sfv /tools/lib/gcc /usr/lib</userinput></screen>

    <para>决定 GCC 的 include 目录，并顺应 LSB 规范创建一个软链接。此外，x86_64 情况下，为了使动态加载器正确运作，再创建一个兼容性的软链接：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">case $(uname -m) in
    i?86)    GCC_INCDIR=/usr/lib/gcc/$(uname -m)-pc-linux-gnu/8.2.0/include
            ln -sfv ld-linux.so.2 /lib/ld-lsb.so.3
    ;;
    x86_64) GCC_INCDIR=/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include
            ln -sfv ../lib/ld-linux-x86-64.so.2 /lib64
            ln -sfv ../lib/ld-linux-x86-64.so.2 /lib64/ld-lsb-x86-64.so.3
    ;;
esac</userinput></screen>

    <para>删除一个以前的构建尝试可能遗留下来的文件：
    </para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">rm -f /usr/include/limits.h</userinput></screen>

    <para>Glibc 文档里建议在 Glibc 特定编译目录下编译：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>配置 Glibc 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">CC="gcc -isystem $GCC_INCDIR -isystem /usr/include" \
../configure --prefix=/usr                          \
             --disable-werror                       \
             --enable-kernel=3.2                    \
             --enable-stack-protector=strong        \
             libc_cv_slibdir=/lib
unset GCC_INCDIR</userinput></screen>

   <variablelist>
      <title>选项和新参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">CC="gcc -isystem $GCC_INCDIR -isystem /usr/include"</parameter></term>
        <listitem>
          <para>设置 gcc 和系统的 include 目录以避免在调试符号中引入无效路径。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-werror</parameter></term>
        <listitem>
          <para>选项像禁用了传递给 GCC 的 -Werror 选项。为了测试套件，此项必不可少。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-stack-protector=strong</parameter></term>
        <listitem>
          <para>该选项通过添加额外代码检查缓冲区溢出（例如，堆栈粉碎攻击）来增强系统安全性。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">libc_cv_slibdir=/lib</parameter></term>
        <listitem>
          <para>该变量为所有系统设置正确的库。我们不希望使用 lib64 。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <important>
      <para>在本小节里，运行 Glibc 的测试套件是很关键的。在任何情况下都不要跳过这个测试。</para>
    </important>

    <para>通常会有一些测试不能通过。若是下面列出的这些失败，通常就可以安心的无视了。</para>

<!-- Use remap="make" here to work around a jhalfs issue. -->
<screen format="linespecific"><userinput remap="make" moreinfo="none">case $(uname -m) in
  i?86)   ln -sfnv $PWD/elf/ld-linux.so.2        /lib ;;
  x86_64) ln -sfnv $PWD/elf/ld-linux-x86-64.so.2 /lib ;;
esac</userinput></screen>

    <note><para>在 chroot 环境的这个阶段需要上面的符号链接以运行测试。在接下来的安装中，这些链接将会被覆盖。</para></note>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>你可能会看到一些失败的测试项。Glibc 的测试套件对宿主系统有一定的依赖。下面是一些 LFS 版本中最常见的问题：</para>

    <itemizedlist>

      <listitem>
        <para><emphasis>misc/tst-ttyname</emphasis> 已知会在 LFS 的 chroot 环境中失败。</para>
      </listitem>

      <listitem>
        <para><emphasis>inet/tst-idna_name_classify</emphasis> 已知会在 LFS 的 chroot 环境中失败。</para>
      </listitem>

      <listitem>
        <para><emphasis>posix/tst-getaddrinfo4</emphasis> 和 <emphasis>posix/tst-getaddrinfo5</emphasis> 可能在某些架构上失败。</para>
      </listitem>

      <listitem>
        <para><emphasis>nss/tst-nss-files-hosts-multi</emphasis> 由于未知的原因，测试可能失败。</para>
      </listitem>

      <listitem>
        <para><emphasis>rt/tst-cputimer{1,2,3}</emphasis> 测试取决于宿主机的系统内核。众所周知，内核版本 4.14.91–4.14.96、4.19.13–4.19.18 和 4.20.0–4.20.5 是会导致这些测试失败的。</para>
      </listitem>

      <listitem>
        <para>如果你系统的 CPU 不是相对较新的 Intel 或 AMD 处理器，数学运算测试有时候会失败。</para>
      </listitem>
<!--
      <listitem>
        <para>The
        <emphasis>nptl/tst-thread-affinity-{pthread,pthread2,sched}</emphasis>
        tests may fail for reasons that have not been determined.  </para>
      </listitem>

      <listitem>
        <para>Other tests known to fail on some architectures are
        malloc/tst-malloc-usable and nptl/tst-cleanupx4. </para>
      </listitem>
-->
    </itemizedlist>

    <para>虽然这只是无关紧要的消息，在安装 Glibc 时会报告找不到 <filename moreinfo="none">/etc/ld.so.conf</filename> 文件。下面的方式可以避免这个警告：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">touch /etc/ld.so.conf</userinput></screen>

    <para>修复生成的 Makefile 以跳过一个没有必要的完整性检查，该检查在部分 LFS 环境中会失败：
    </para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">sed '/test-installation/s@$(PERL)@echo not running@' -i ../Makefile</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>为 <command moreinfo="none">nscd</command> 安装配置文件并创建运行时目录：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -v ../nscd/nscd.conf /etc/nscd.conf
mkdir -pv /var/cache/nscd</userinput></screen>

    <para revision="systemd">为 <command moreinfo="none">nscd</command> 安装系统支持文件：</para>

    <screen revision="systemd" format="linespecific"><userinput remap="install" moreinfo="none">install -v -Dm644 ../nscd/nscd.tmpfiles /usr/lib/tmpfiles.d/nscd.conf
install -v -Dm644 ../nscd/nscd.service /lib/systemd/system/nscd.service</userinput></screen>

    <para>接着，安装可以使系统响应不同语言的地域设置。没有一个地域是必需的，但是如果缺少了其中的某些，可能会导致在未来的软件包测试套件中，跳过了重要的测试项目。</para>

    <para>单独的语言环境可以用 <command moreinfo="none">localedef</command> 程序安装。例如，下面第一个 <command moreinfo="none">localedef</command> 命令将 <filename moreinfo="none">/usr/share/i18n/locales/cs_CZ</filename> 字符表定义组合在一起，并将结果附加到 <filename moreinfo="none">/usr/share/i18n/charmaps/UTF-8.gz</filename> 文件末尾。下面的命令将安装能完美覆盖测试所需语言环境的最小集合：</para>

<screen role="nodump" format="linespecific"><userinput remap="locale-test" moreinfo="none">mkdir -pv /usr/lib/locale
localedef -i POSIX -f UTF-8 C.UTF-8 2&gt; /dev/null || true
localedef -i cs_CZ -f UTF-8 cs_CZ.UTF-8
localedef -i de_DE -f ISO-8859-1 de_DE
localedef -i de_DE@euro -f ISO-8859-15 de_DE@euro
localedef -i de_DE -f UTF-8 de_DE.UTF-8
localedef -i el_GR -f ISO-8859-7 el_GR
localedef -i en_GB -f UTF-8 en_GB.UTF-8
localedef -i en_HK -f ISO-8859-1 en_HK
localedef -i en_PH -f ISO-8859-1 en_PH
localedef -i en_US -f ISO-8859-1 en_US
localedef -i en_US -f UTF-8 en_US.UTF-8
localedef -i es_MX -f ISO-8859-1 es_MX
localedef -i fa_IR -f UTF-8 fa_IR
localedef -i fr_FR -f ISO-8859-1 fr_FR
localedef -i fr_FR@euro -f ISO-8859-15 fr_FR@euro
localedef -i fr_FR -f UTF-8 fr_FR.UTF-8
localedef -i it_IT -f ISO-8859-1 it_IT
localedef -i it_IT -f UTF-8 it_IT.UTF-8
localedef -i ja_JP -f EUC-JP ja_JP
localedef -i ja_JP -f SHIFT_JIS ja_JP.SIJS 2&gt; /dev/null || true
localedef -i ja_JP -f UTF-8 ja_JP.UTF-8
localedef -i ru_RU -f KOI8-R ru_RU.KOI8-R
localedef -i ru_RU -f UTF-8 ru_RU.UTF-8
localedef -i tr_TR -f UTF-8 tr_TR.UTF-8
localedef -i zh_CN -f GB18030 zh_CN.GB18030
localedef -i zh_HK -f BIG5-HKSCS zh_HK.BIG5-HKSCS</userinput></screen>

    <para>另外，安装适合你自己国家/地区、语言和字符集的语言环境。</para>

    <para>或者，也可以一次性安装在 <filename moreinfo="none">glibc-2.29/localedata/SUPPORTED</filename> 文件里列出的所有语言环境（包括以上列出的所有语言环境以及其它更多），执行下面这个非常耗时的命令：</para>

<screen format="linespecific"><userinput remap="locale-full" moreinfo="none">make localedata/install-locales</userinput></screen>

    <para>你需要的语言环境几乎不太可能没有列在 <filename moreinfo="none">glibc-2.29/localedata/SUPPORTED</filename> 文件中，但如果真的没有可以使用 <command moreinfo="none">localedef</command> 命令创建和安装。</para>

    <note><para>当前，Glibc 在解决国际化域名时使用 libidn2。此为运行时依赖。如果需要此功能，可以参考 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/libidn2.html">BLFS libidn2 页</ulink> 相关的安装指令。</para></note>

  </sect2>

  <sect2 id="conf-glibc" role="configuration">
    <title>配置 Glibc</title>

    <indexterm zone="conf-glibc" significance="normal">
      <primary sortas="e-/etc/nsswitch.conf">/etc/nsswitch.conf</primary>
    </indexterm>

    <indexterm zone="conf-glibc" significance="normal">
      <primary sortas="e-/etc/localtime">/etc/localtime</primary>
    </indexterm>

  <sect3>
  <title>添加 nsswitch.conf</title>

    <para>由于 Glibc 的默认状态在网络环境下工作的并不好，所以需要创建 <filename moreinfo="none">/etc/nsswitch.conf</filename> 文件。</para>

    <para>创建新的 <filename moreinfo="none">/etc/nsswitch.conf</filename> 通过以下命令：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/nsswitch.conf &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/nsswitch.conf

passwd: files
group: files
shadow: files

hosts: files dns
networks: files

protocols: files
services: files
ethers: files
rpc: files

# End /etc/nsswitch.conf</literal>
EOF</userinput></screen>

    </sect3>

    <sect3>
    <title>添加时区数据</title>

    <para>通过以下命令安装并启动时区数据：</para>
<screen format="linespecific"><userinput moreinfo="none">tar -xf ../../tzdata2018i.tar.gz

ZONEINFO=/usr/share/zoneinfo
mkdir -pv $ZONEINFO/{posix,right}

for tz in etcetera southamerica northamerica europe africa antarctica  \
          asia australasia backward pacificnew systemv; do
    zic -L /dev/null   -d $ZONEINFO       ${tz}
    zic -L /dev/null   -d $ZONEINFO/posix ${tz}
    zic -L leapseconds -d $ZONEINFO/right ${tz}
done

cp -v zone.tab zone1970.tab iso3166.tab $ZONEINFO
zic -d $ZONEINFO -p America/New_York
unset ZONEINFO</userinput></screen>

    <variablelist>
      <title>zic 命令的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">zic -L /dev/null ...</parameter></term>
        <listitem>
          <para>这会创建没有时间补偿的 posix 时区数据。一般将它们同时放在 <filename class="directory" moreinfo="none">zoneinfo</filename> 和 <filename class="directory" moreinfo="none">zoneinfo/posix</filename>。另外需要将 POSIX 时区数据放到 <filename class="directory" moreinfo="none">zoneinfo</filename> 目录下，否则很多测试套件会报错。在嵌入式平台，如果存储空间紧张而且你也不准备更新时区，也可以不用 <filename class="directory" moreinfo="none">posix</filename> 目录从而节省 1.9MB，但是一些应用程序或测试套件也许会出错。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter moreinfo="none">zic -L leapseconds ...</parameter></term>
        <listitem>
          <para>这会创建包含时间补偿的 right 时区数据。在嵌入式平台，空间比较紧张而且你也不打算更新时区或者不需要准确时间，你可以忽略 <filename class="directory" moreinfo="none">right</filename> 目录从而节省 1.9MB。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter moreinfo="none">zic ... -p ...</parameter></term>
        <listitem>
          <para>这会创建 <filename moreinfo="none">posixrules</filename> 文件。我们使用纽约是因为 POSIX 要求夏令时规则与 US 标准一致。</para>
        </listitem>
      </varlistentry>
    </variablelist>


    <para>一种确定本地时区的方式是运行下面的脚本：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">tzselect</userinput></screen>

    <para>在询问了几个关于位置的问题后，脚本会输出所在时区的名字（比如 <emphasis>America/Edmonton</emphasis>)）。在 <filename class="directory" moreinfo="none">/usr/share/zoneinfo</filename> 文件中也有其它一些可用时区，比如 <emphasis>Canada/Eastern</emphasis> 或 <emphasis>EST5EDT</emphasis>，这些时区并没有被脚本列出来但也是可以使用的。</para>

    <para>然后运行下面的命令创建 <filename moreinfo="none">/etc/localtime</filename> 文件：</para>



<screen revision="systemd" format="linespecific"><userinput moreinfo="none">ln -sfv /usr/share/zoneinfo/<replaceable>&lt;xxx&gt;</replaceable> /etc/localtime</userinput></screen>

    <para>将命令中的 <replaceable>&lt;xxx&gt;</replaceable> 替换成你所在实际时区的名字（比如 Canada/Eastern）。</para>

  </sect3>

  <sect3 id="conf-ld" role="configuration">
    <title>配置动态库加载器</title>

    <indexterm zone="conf-ld" significance="normal">
      <primary sortas="e-/etc/ld.so.conf">/etc/ld.so.conf</primary>
    </indexterm>

    <para>默认情况下，动态库加载器（<filename class="libraryfile" moreinfo="none">/lib/ld-linux.so.2</filename>）会搜索目录 <filename class="directory" moreinfo="none">/lib</filename> 和 <filename class="directory" moreinfo="none">/usr/lib</filename> 查找程序运行时所需的动态库文件。如果库文件不在 <filename class="directory" moreinfo="none">/lib</filename> 和 <filename class="directory" moreinfo="none">/usr/lib</filename> 目录下，需要把它所在目录加到 <filename moreinfo="none">/etc/ld.so.conf</filename> 文件里，保证动态库加载器能找到这些库。通常有两个目录包含额外的动态库，<filename class="directory" moreinfo="none">/usr/local/lib</filename> 和 <filename class="directory" moreinfo="none">/opt/lib</filename>，把这两个目录加到动态库加载器的搜索路径中。</para>

    <para>运行下面的命令创建一个新文件 <filename moreinfo="none">/etc/ld.so.conf</filename></para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/ld.so.conf
/usr/local/lib
/opt/lib
</literal>
EOF</userinput></screen>

  <para>如果需要的话，动态库加载器也可以查找目录并包含里面配置文件的内容。通常在这个包含目录下的文件只有一行字指向库目录。运行下面的命令增加这个功能：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt;&gt; /etc/ld.so.conf &lt;&lt; "EOF"
<literal moreinfo="none"># Add an include directory
include /etc/ld.so.conf.d/*.conf
</literal>
EOF
mkdir -pv /etc/ld.so.conf.d</userinput></screen>

  </sect3>
  </sect2>

  <sect2 id="contents-glibc" role="content">
    <title>Glibc 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>catchsegv, gencat, getconf, getent, iconv, iconvconfig, ldconfig,
        ldd, lddlibc4, locale, localedef, makedb, mtrace, nscd, 
        pldd, sln, sotruss, sprof, tzselect, xtrace,
        zdump, 和 zic</seg>
        <seg>ld-2.29.so, libBrokenLocale.{a,so}, libSegFault.so, libanl.{a,so},
        libc.{a,so}, libc_nonshared.a, libcidn.so,
        libcrypt.{a,so}, libdl.{a,so}, libg.a, libieee.a, libm.{a,so},
        libmcheck.a, libmemusage.so, libnsl.{a,so}, libnss_compat.so,
        libnss_dns.so, libnss_files.so, libnss_hesiod.so, libnss_nis.so,
        libnss_nisplus.so, libpthread.{a,so},
        libpthread_nonshared.a, libresolv.{a,so}, librpcsvc.a, librt.{a,so},
        libthread_db.so, 和 libutil.{a,so}</seg>
        <seg>/usr/include/arpa, /usr/include/bits, /usr/include/gnu,
        /usr/include/net, /usr/include/netash, /usr/include/netatalk,
        /usr/include/netax25, /usr/include/neteconet, /usr/include/netinet,
        /usr/include/netipx, /usr/include/netiucv, /usr/include/netpacket,
        /usr/include/netrom, /usr/include/netrose, /usr/include/nfs,
        /usr/include/protocols, /usr/include/rpc, /usr/include/rpcsvc,
        /usr/include/sys, /usr/lib/audit, /usr/lib/gconv, /usr/lib/locale,
        /usr/libexec/getconf, /usr/share/i18n, /usr/share/zoneinfo,
        /var/cache/nscd, 和 /var/lib/nss_db</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="catchsegv">
        <term><command moreinfo="none">catchsegv</command></term>
        <listitem>
          <para>可以在程序因为段错误终止的时候创建栈调用历史</para>
          <indexterm zone="ch-system-glibc catchsegv" significance="normal">
            <primary sortas="b-catchsegv">catchsegv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gencat">
        <term><command moreinfo="none">gencat</command></term>
        <listitem>
          <para>生成消息条目</para>
          <indexterm zone="ch-system-glibc gencat" significance="normal">
            <primary sortas="b-gencat">gencat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getconf">
        <term><command moreinfo="none">getconf</command></term>
        <listitem>
          <para>显示文件系统相关的系统配置变量的值</para>
          <indexterm zone="ch-system-glibc getconf" significance="normal">
            <primary sortas="b-getconf">getconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getent">
        <term><command moreinfo="none">getent</command></term>
        <listitem>
          <para>获取系统数据库的内容</para>
          <indexterm zone="ch-system-glibc getent" significance="normal">
            <primary sortas="b-getent">getent</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconv">
        <term><command moreinfo="none">iconv</command></term>
        <listitem>
          <para>字符集转换</para>
          <indexterm zone="ch-system-glibc iconv" significance="normal">
            <primary sortas="b-iconv">iconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="iconvconfig">
        <term><command moreinfo="none">iconvconfig</command></term>
        <listitem>
          <para>创建 <command moreinfo="none">iconv</command> 快速加载模块配置文件</para>
          <indexterm zone="ch-system-glibc iconvconfig" significance="normal">
            <primary sortas="b-iconvconfig">iconvconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldconfig">
        <term><command moreinfo="none">ldconfig</command></term>
        <listitem>
          <para>配置动态链接器的运行时环境</para>
          <indexterm zone="ch-system-glibc ldconfig" significance="normal">
            <primary sortas="b-ldconfig">ldconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldd">
        <term><command moreinfo="none">ldd</command></term>
        <listitem>
          <para>报告某个程序或动态库所依赖的动态库</para>
          <indexterm zone="ch-system-glibc ldd" significance="normal">
            <primary sortas="b-ldd">ldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lddlibc4">
        <term><command moreinfo="none">lddlibc4</command></term>
        <listitem>
          <para>协助 <command moreinfo="none">ldd</command> 处理某些目标文件</para>
          <indexterm zone="ch-system-glibc lddlibc4" significance="normal">
            <primary sortas="b-lddlibc4">lddlibc4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="locale">
        <term><command moreinfo="none">locale</command></term>
        <listitem>
          <para>输出当前语言环境的大量信息</para>
          <indexterm zone="ch-system-glibc locale" significance="normal">
            <primary sortas="b-locale">locale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="localedef">
        <term><command moreinfo="none">localedef</command></term>
        <listitem>
          <para>编译语言环境规格</para>
          <indexterm zone="ch-system-glibc localedef" significance="normal">
            <primary sortas="b-localedef">localedef</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="makedb">
        <term><command moreinfo="none">makedb</command></term>
        <listitem>
          <para>根据输入的文本创建简单数据库</para>
          <indexterm zone="ch-system-glibc makedb" significance="normal">
            <primary sortas="b-makedb">makedb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mtrace">
        <term><command moreinfo="none">mtrace</command></term>
        <listitem>
          <para>读取并解析内存跟踪文件，然后用方便人阅读的格式显示一个摘要</para>
          <indexterm zone="ch-system-glibc mtrace" significance="normal">
            <primary sortas="b-mtrace">mtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nscd">
        <term><command moreinfo="none">nscd</command></term>
        <listitem>
          <para>一个后台服务程序，提供最常用名字服务请求的缓存</para>
          <indexterm zone="ch-system-glibc nscd" significance="normal">
            <primary sortas="b-nscd">nscd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pldd">
        <term><command moreinfo="none">pldd</command></term>
        <listitem>
          <para>列出运行中进程正在使用的动态共享目标</para>
          <indexterm zone="ch-system-glibc pldd" significance="normal">
            <primary sortas="b-pldd">pldd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sln">
        <term><command moreinfo="none">sln</command></term>
        <listitem>
          <para>一个静态链接的 <command moreinfo="none">ln</command> 程序</para>
          <indexterm zone="ch-system-glibc sln" significance="normal">
            <primary sortas="b-sln">sln</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sotruss">
        <term><command moreinfo="none">sotruss</command></term>
        <listitem>
          <para>跟踪指定命令里的动态库函数调用</para>
          <indexterm zone="ch-system-glibc sotruss" significance="normal">
            <primary sortas="b-sotruss">sotruss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sprof">
        <term><command moreinfo="none">sprof</command></term>
        <listitem>
          <para>读取并显示共享目标分析数据</para>
          <indexterm zone="ch-system-glibc sprof" significance="normal">
            <primary sortas="b-sprof">sprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tzselect">
        <term><command moreinfo="none">tzselect</command></term>
        <listitem>
          <para>询问用户该系统的地理位置并给出相应的时区描述</para>
          <indexterm zone="ch-system-glibc tzselect" significance="normal">
            <primary sortas="b-tzselect">tzselect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xtrace">
        <term><command moreinfo="none">xtrace</command></term>
        <listitem>
          <para>跟踪程序执行过程并打印当前执行的函数</para>
          <indexterm zone="ch-system-glibc xtrace" significance="normal">
            <primary sortas="b-xtrace">xtrace</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zdump">
        <term><command moreinfo="none">zdump</command></term>
        <listitem>
          <para>时区数据输出工具</para>
          <indexterm zone="ch-system-glibc zdump" significance="normal">
            <primary sortas="b-zdump">zdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zic">
        <term><command moreinfo="none">zic</command></term>
        <listitem>
          <para>时区数据编译工具</para>
          <indexterm zone="ch-system-glibc zic" significance="normal">
            <primary sortas="b-zic">zic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.so">
        <term><filename class="libraryfile" moreinfo="none">ld-2.29.so</filename></term>
        <listitem>
          <para>用于动态库执行的辅助程序</para>
          <indexterm zone="ch-system-glibc ld.so" significance="normal">
            <primary sortas="c-ld.so">ld-2.29.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libBrokenLocale">
        <term><filename class="libraryfile" moreinfo="none">libBrokenLocale</filename></term>
        <listitem>
          <para>Glibc 内部的一个粗暴破解用来修复损坏程序（比如，一些 Motif 应用）。查看文件 <filename moreinfo="none">glibc-2.29/locale/broken_cur_max.c</filename> 里的注释来了解更多信息</para>
          <indexterm zone="ch-system-glibc libBrokenLocale" significance="normal">
            <primary sortas="c-libBrokenLocale">libBrokenLocale</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libSegFault">
        <term><filename class="libraryfile" moreinfo="none">libSegFault</filename></term>
        <listitem>
          <para>段错误信号处理函数，<command moreinfo="none">catchsegv</command> 会用到</para>
          <indexterm zone="ch-system-glibc libSegFault" significance="normal">
            <primary sortas="c-libSegFault">libSegFault</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libanl">
        <term><filename class="libraryfile" moreinfo="none">libanl</filename></term>
        <listitem>
          <para>一个异步名字查找库</para>
          <indexterm zone="ch-system-glibc libanl" significance="normal">
            <primary sortas="c-libanl">libanl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libc">
        <term><filename class="libraryfile" moreinfo="none">libc</filename></term>
        <listitem>
          <para>主要的 C 库</para>
          <indexterm zone="ch-system-glibc libc" significance="normal">
            <primary sortas="c-libc">libc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcidn">
        <term><filename class="libraryfile" moreinfo="none">libcidn</filename></term>
        <listitem>
          <para>Glibc 内部用于在函数 <function moreinfo="none">getaddrinfo()</function> 中处理国际化域名</para>
          <indexterm zone="ch-system-glibc libcidn" significance="normal">
            <primary sortas="c-libcidn">libcidn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcrypt">
        <term><filename class="libraryfile" moreinfo="none">libcrypt</filename></term>
        <listitem>
          <para>密码学函数库</para>
          <indexterm zone="ch-system-glibc libcrypt" significance="normal">
            <primary sortas="c-libcrypt">libcrypt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libdl">
        <term><filename class="libraryfile" moreinfo="none">libdl</filename></term>
        <listitem>
          <para>动态链接接口函数库</para>
          <indexterm zone="ch-system-glibc libdl" significance="normal">
            <primary sortas="c-libdl">libdl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libg">
        <term><filename class="libraryfile" moreinfo="none">libg</filename></term>
        <listitem>
          <para>不包含函数的一个空库。以前是 <command moreinfo="none">g++</command> 的运行时库</para>
          <indexterm zone="ch-system-glibc libg" significance="normal">
            <primary sortas="c-libg">libg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libieee">
        <term><filename class="libraryfile" moreinfo="none">libieee</filename></term>
        <listitem>
          <para>链接该模块会强制使用电气与电子工程师协会（IEEE) 定义的数学函数错误处理规则。默认的是 POSIX.1 错误处理</para>
          <indexterm zone="ch-system-glibc libieee" significance="normal">
            <primary sortas="c-libieee">libieee</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libm">
        <term><filename class="libraryfile" moreinfo="none">libm</filename></term>
        <listitem>
          <para>数学运算函数库</para>
          <indexterm zone="ch-system-glibc libm" significance="normal">
            <primary sortas="c-libm">libm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmcheck">
        <term><filename class="libraryfile" moreinfo="none">libmcheck</filename></term>
        <listitem>
          <para>链接这个库后会打开内存分配检查</para>
          <indexterm zone="ch-system-glibc libmcheck" significance="normal">
            <primary sortas="c-libmcheck">libmcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmemusage">
        <term><filename class="libraryfile" moreinfo="none">libmemusage</filename></term>
        <listitem>
          <para>Used by <command moreinfo="none">memusage</command> 命令用它来协助收集应用程序里内存使用信息</para>
          <indexterm zone="ch-system-glibc libmemusage" significance="normal">
            <primary sortas="c-libmemusage">libmemusage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnsl">
        <term><filename class="libraryfile" moreinfo="none">libnsl</filename></term>
        <listitem>
          <para>网络服务函数库</para>
          <indexterm zone="ch-system-glibc libnsl" significance="normal">
            <primary sortas="c-libnsl">libnsl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnss">
        <term><filename class="libraryfile" moreinfo="none">libnss</filename></term>
        <listitem>
          <para>名称服务切换函数库，包含了解析主机名、用户名、组名、别称、服务、协议等等的函数</para>
          <indexterm zone="ch-system-glibc libnss" significance="normal">
            <primary sortas="c-libnss">libnss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpthread">
        <term><filename class="libraryfile" moreinfo="none">libpthread</filename></term>
        <listitem>
          <para>POSIX 线程函数库</para>
          <indexterm zone="ch-system-glibc libpthread" significance="normal">
            <primary sortas="c-libpthread">libpthread</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libresolv">
        <term><filename class="libraryfile" moreinfo="none">libresolv</filename></term>
        <listitem>
          <para>包含了创建、发送和解析互联网域名服务器封包的函数</para>
          <indexterm zone="ch-system-glibc libresolv" significance="normal">
            <primary sortas="c-libresolv">libresolv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librpcsvc">
        <term><filename class="libraryfile" moreinfo="none">librpcsvc</filename></term>
        <listitem>
          <para>包含了提供杂项 RPC 服务的函数</para>
          <indexterm zone="ch-system-glibc librpcsvc" significance="normal">
            <primary sortas="c-librpcsvc">librpcsvc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="librt">
        <term><filename class="libraryfile" moreinfo="none">librt</filename></term>
        <listitem>
          <para>包含了实现 POSIX.1b 实时扩展里规定的大部分接口的函数</para>
          <indexterm zone="ch-system-glibc librt" significance="normal">
            <primary sortas="c-librt">librt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libthread_db">
        <term><filename class="libraryfile" moreinfo="none">libthread_db</filename></term>
        <listitem>
          <para>包含了方便构建多线程程序调试工具的函数</para>
          <indexterm zone="ch-system-glibc libthread_db" significance="normal">
            <primary sortas="c-libthread_db">libthread_db</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libutil">
        <term><filename class="libraryfile" moreinfo="none">libutil</filename></term>
        <listitem>
          <para>包含各种 Unix 应用程序中用到的「标准」函数的代码</para>
          <indexterm zone="ch-system-glibc libutil" significance="normal">
            <primary sortas="c-libutil">libutil</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-adjusting">
  <?dbhtml filename="adjusting.html"?>

  <title>调整工具链</title>

  <para>现在最后的 C 语言库已经装好了，是时候调整工具链，让新编译的程序链接到这些新的库上。</para>

  <para>首先，备份 <filename class="directory" moreinfo="none">/tools</filename> 链接器，然后用我们在第五章调整过的链接器代替它。我们还会创建一个链接，链接到 <filename class="directory" moreinfo="none">/tools/$(uname -m)-pc-linux-gnu/bin</filename> 的副本：</para>

<screen format="linespecific"><userinput moreinfo="none">mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(uname -m)-pc-linux-gnu/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(uname -m)-pc-linux-gnu/bin/ld</userinput></screen>

  <para>接下来，修改 GCC 参数文件，让它指向新的动态连接器。只需删除所有「/tools」的实例，这样应该可以留下到达动态链接器的正确路径。还要调整参数文件，这样 GCC 就知道怎样找到正确的头文件和 Glibc 启动文件。一个 <command moreinfo="none">sed</command> 命令就能完成这些：</para>

<screen format="linespecific"><userinput moreinfo="none">gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' &gt;      \
    `dirname $(gcc --print-libgcc-file-name)`/specs</userinput></screen>

  <para>直观地检查参数文件来确认预期的变化已确实完成是个好办法。</para>

  <para>确保已调整的工具链的基本功能（编译和链接）都能如期进行是非常必要的。怎样做呢？执行下面这条命令：</para>

<screen os="a" format="linespecific"><userinput moreinfo="none">echo 'int main(){}' &gt; dummy.c
cc dummy.c -v -Wl,--verbose &amp;&gt; dummy.log
readelf -l a.out | grep ': /lib'</userinput></screen>

  <para os="b">如果没有任何错误，上条命令的输出应该是（不同的平台上的动态链接器可能名字不同）：</para>

<screen os="c" format="linespecific"><computeroutput moreinfo="none">[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

  <para>注意在 64 位系统中，虽然我们的动态链接位于 <filename class="directory" moreinfo="none">/lib</filename> 中，但却可以通过 /lib64 中的符号链接访问。</para>

  <note><para>32 位系统的解释器应该是 /lib/ld-linux.so.2.</para></note>

  <para os="d">现在确保我们已经设置好了启动文件：</para>

<screen os="e" format="linespecific"><userinput moreinfo="none">grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log</userinput></screen>

  <para os="f">上一条命令的输出应该是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">/usr/lib/../lib/crt1.o succeeded
/usr/lib/../lib/crti.o succeeded
/usr/lib/../lib/crtn.o succeeded</computeroutput></screen>

  <para os="g">确保链接器能找到正确的头文件：</para>

<screen format="linespecific"><userinput moreinfo="none">grep -B1 '^ /usr/include' dummy.log</userinput></screen>

  <para os="h">这条命令应该返回如下输出：</para>

<screen format="linespecific"><computeroutput moreinfo="none">#include &lt;...&gt; search starts here:
 /usr/include</computeroutput></screen>

  <para os="i">接下来，确认新的链接器已经在使用正确的搜索路径：</para>

<screen os="j" format="linespecific"><userinput moreinfo="none">grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'</userinput></screen>

  <para os="k">应该忽略指向带有 '-linux-gnu' 的路径，上条命令的输出应该是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">SEARCH_DIR("/usr/lib")
SEARCH_DIR("/lib")</computeroutput></screen>

  <para os="l">然后我们要确定我们使用的是正确的 libc：</para>

<screen os="m" format="linespecific"><userinput moreinfo="none">grep "/lib.*/libc.so.6 " dummy.log</userinput></screen>

  <para os="n">上条命令的输出应该为：</para>

<screen os="o" format="linespecific"><computeroutput moreinfo="none">attempt to open /lib/libc.so.6 succeeded</computeroutput></screen>

  <para os="p">最后，确保 GCC 使用的是正确的动态链接器：</para>

<screen os="q" format="linespecific"><userinput moreinfo="none">grep found dummy.log</userinput></screen>

  <para os="r">上条命令的结果应该是（不同的平台上链接器名字可以不同）：</para>

<screen os="s" format="linespecific"><computeroutput moreinfo="none">found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2</computeroutput></screen>

  <para os="t">如果显示的结果不一样或者根本没有显示，那就出了大问题。检查并回溯之前的步骤，找到出错的地方并改正。最有可能的原因是参数文件的调整出了问题。在进行下一步之前所有的问题都要解决。</para>

  <para os="u">确保一切正常之后，清除测试文件：</para>

<screen os="v" format="linespecific"><userinput moreinfo="none">rm -v dummy.c a.out dummy.log</userinput></screen>

</sect1>
  <sect1 id="ch-system-zlib" role="wrap">
  <?dbhtml filename="zlib.html"?>

  

  <title>Zlib-1.2.11</title>

  <indexterm zone="ch-system-zlib" significance="normal">
    <primary sortas="a-Zlib">Zlib</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Zlib 软件包包括一些程序所使用的压缩和解压缩例程。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>4.4 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Zlib</title>

    <para>准备编译 Zlib：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>输入命令查看结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包:</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>共享库需要移动到 <filename class="directory" moreinfo="none">/lib</filename>，因此需要重建 <filename class="extension" moreinfo="none">.so</filename> 里面的 <filename class="directory" moreinfo="none">/usr/lib</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libz.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libz.so) /usr/lib/libz.so</userinput></screen>

  </sect2>

  <sect2 id="contents-zlib" role="content">
    <title>Zlib 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>libz.{a,so}</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libz">
        <term><filename class="libraryfile" moreinfo="none">libz</filename></term>
        <listitem>
          <para>包括一些程序所使用的压缩和解压缩功能。</para>
          <indexterm zone="ch-system-zlib libz" significance="normal">
            <primary sortas="c-libz">libz</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-file" role="wrap">
  <?dbhtml filename="file.html"?>

  

  <title>File-5.36</title>

  <indexterm zone="ch-system-file" significance="normal">
    <primary sortas="a-File">File</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>File 软件包包括一个判断给定的某个或某些文件文件类型的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>18 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 File</title>

    <para>准备编译 File：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>输入命令检查结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 id="contents-file" role="content">
    <title>File 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>file</seg>
        <seg>libmagic.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="file">
        <term><command moreinfo="none">file</command></term>
        <listitem>
          <para>为每个文件归类；这可以通过一些测试达到——文件系统测试，魔术数字测试还有语言测试。</para>
          <indexterm zone="ch-system-file file" significance="normal">
            <primary sortas="b-file">file</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmagic">
        <term><filename class="libraryfile" moreinfo="none">libmagic</filename></term>
        <listitem>
          <para>包含程序 <command moreinfo="none">file</command> 进行魔术数字识别的例程。</para>
          <indexterm zone="ch-system-file libmagic" significance="normal">
            <primary sortas="c-libmagic">libmagic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-readline" role="wrap">
  <?dbhtml filename="readline.html"?>

  

  <title>Readline-8.0</title>

  <indexterm zone="ch-system-readline" significance="normal">
    <primary sortas="a-Readline">Readline</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Readline 软件包是提供命令行编辑和历史功能的库的集合。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>15 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Readline</title>

    <para>重装 Readline 会使旧的库移动到 &lt;libraryname&gt;.old。通常来说这并不是什么问题，但一些情况下可能引起 <command moreinfo="none">ldconfig</command> 链接错误。可以通过下面的两个 sed 命令避免这个问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/MV.*old/d' Makefile.in
sed -i '/{OLDSUFF}/c:' support/shlib-install</userinput></screen>

    <para>准备编译 Readline：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/readline-8.0</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make SHLIB_LIBS="-L/tools/lib -lncursesw"</userinput></screen>

    <variablelist>
      <title>make 选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">SHLIB_LIBS="-L/tools/lib -lncursesw"</parameter></term>
        <listitem>
          <para>该选项强制 Readline 链接到 <filename class="libraryfile" moreinfo="none">libncursesw</filename> 库。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make SHLIB_LIBS="-L/tools/lib -lncursesw" install</userinput></screen>

    <para>现在移动动态库到更合适的位置并修正一些文件权限和符号链接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/lib{readline,history}.so.* /lib
chmod -v u+w /lib/lib{readline,history}.so.*
ln -sfv ../../lib/$(readlink /usr/lib/libreadline.so) /usr/lib/libreadline.so
ln -sfv ../../lib/$(readlink /usr/lib/libhistory.so ) /usr/lib/libhistory.so</userinput></screen>

    <para>如果需要的话，安装帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -v -m644 doc/*.{ps,pdf,html,dvi} /usr/share/doc/readline-8.0</userinput></screen>

  </sect2>

  <sect2 id="contents-readline" role="content">
    <title>Readline 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>libhistory.so 和 libreadline.so</seg>
        <seg>/usr/include/readline, /usr/share/readline, 和
        /usr/share/doc/readline-8.0</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libhistory">
        <term><filename class="libraryfile" moreinfo="none">libhistory</filename></term>
        <listitem>
          <para>为重新查看历史行提供一致的用户界面</para>
          <indexterm zone="ch-system-readline libhistory" significance="normal">
            <primary sortas="c-libhistory">libhistory</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libreadline">
        <term><filename class="libraryfile" moreinfo="none">libreadline</filename></term>
        <listitem>
          <para>提供一组用于操纵文本进入交互式会话程序的命令</para>
          <indexterm zone="ch-system-readline libreadline" significance="normal">
            <primary sortas="c-libreadline">libreadline</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-m4" role="wrap">
  <?dbhtml filename="m4.html"?>

  

  <title>M4-1.4.18</title>

  <indexterm zone="ch-system-m4" significance="normal">
    <primary sortas="a-M4">M4</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>M4 软件包包含一个宏处理器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.4 SBU</seg>
        <seg>33 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 M4</title>

    <para>首先，对应 glibc-2.28 的需求做一些修复：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c
echo "#define _IO_IN_BACKUP 0x100" &gt;&gt; lib/stdio-impl.h</userinput></screen>

    <para>准备编译 M4：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-m4" role="content">
    <title>M4 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>m4</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="m4">
         <!-- Don't remove the extra space, it prevet a FOP warning. -->
        <term><command moreinfo="none">m4 </command></term>
        <listitem>
          <para>复制给定的文件并扩展其中包括的宏[这些宏或者是内建的或是用户定义的，可以有任何数目的参数。除了进行宏扩展，<command moreinfo="none">m4</command> 还有用于包含命名文件、运行 Unix 命令、进行整数运算、操作文本、递归等内建函数。<command moreinfo="none">m4</command> 程序可以作为一个编译器的前端，也可以作为一个宏处理器使用。]</para>
          <indexterm zone="ch-system-m4 m4" significance="normal">
            <primary sortas="b-m4">m4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-bc" role="wrap">
  <?dbhtml filename="bc.html"?>

  

  <title>Bc-1.07.1</title>

  <indexterm zone="ch-system-bc" significance="normal">
    <primary sortas="a-Bc">Bc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Bc 软件包包括一个任意精度数值处理的语言。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>4.1 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bc</title>

    <para>首先，更改内部脚本用 <command moreinfo="none">sed</command> 代替 <command moreinfo="none">ed</command>：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">cat &gt; bc/fix-libmath_h &lt;&lt; "EOF"
#! /bin/bash
sed -e '1   s/^/{"/' \
    -e     's/$/",/' \
    -e '2,$ s/^/"/'  \
    -e   '$ d'       \
    -i libmath.h

sed -e '$ s/$/0}/' \
    -i libmath.h
EOF</userinput></screen> 

    <para>创建临时符号链接，以便软件包能找到 readline 库，并确认所需的 libncurses 库可用。虽然现在这些库位于 /tools/lib 中，但在本章节的最后系统将改用 /usr/lib。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">ln -sv /tools/lib/libncursesw.so.6 /usr/lib/libncursesw.so.6
ln -sfv libncursesw.so.6 /usr/lib/libncurses.so</userinput></screen>

    <para>修复一个由于在 LFS 早期阶段缺少文件所导致的 <command moreinfo="none">configure</command> 问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i -e '/flex/s/as_fn_error/: ;; # &amp;/' configure</userinput></screen>

    <para>准备编译 Bc：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr           \
            --with-readline         \
            --mandir=/usr/share/man \
            --infodir=/usr/share/info</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-readline</parameter></term>
        <listitem>
          <para>该选项告诉 Bc 使用系统中已经安装的 <filename class="libraryfile" moreinfo="none">readline</filename> 库而不是使用自带的 readline 版本。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>运行下面的命令来测试 bc。这会输出好多内容，因此你可能希望重定向到一个文件。测试中会有很小的比例（10 分之 12,144）最后一位数字会有舍入误差。</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">echo "quit" | ./bc/bc -l Test/checklib.b</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-bc" role="content">
    <title>Bc 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>bc 和 dc</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bc">
        <term><command moreinfo="none">bc</command></term>
        <listitem>
          <para>一个命令行计算器</para>
          <indexterm zone="ch-system-bc bc" significance="normal">
            <primary sortas="b-bc">bc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dc">
        <term><command moreinfo="none">dc</command></term>
        <listitem>
          <para>逆波兰命令行计算器</para>
          <indexterm zone="ch-system-bc dc" significance="normal">
            <primary sortas="b-dc">dc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-binutils" role="wrap">
  <?dbhtml filename="binutils.html"?>

  

  <title>Binutils-2.32</title>

  <indexterm zone="ch-system-binutils" significance="normal">
    <primary sortas="a-Binutils">Binutils</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Binutils 软件包包含一个链接器、一个汇编器、以及其它处理目标文件的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>6.9 SBU</seg>
        <seg>4.9 GB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Binutils</title>

    <para>通过一个简单测试验证在 chroot 环境下 PTY 工作正常：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">expect -c "spawn ls"</userinput></screen>

    <para>这个命令应该输出以下内容：</para>

<screen format="linespecific"><computeroutput moreinfo="none">spawn ls</computeroutput></screen>

    <para>假如输出包括下面的信息，那么表示没有为 PTY 操作设置好环境。在运行 Binutils 和 GCC 的测试套件之前需要解决这个问题：</para>

<screen format="linespecific"><computeroutput moreinfo="none">The system has no more ptys.
Ask your system administrator to create more.</computeroutput></screen>

    <para>Binutils 的文档建议在一个专用的编译目录中编译 Binutils：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>配置 Binutils 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">../configure --prefix=/usr       \
             --enable-gold       \
             --enable-ld=default \
             --enable-plugins    \
             --enable-shared     \
             --disable-werror    \
             --enable-64-bit-bfd \
             --with-system-zlib</userinput></screen>
    <variablelist>
      <title>配置参数的意义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-gold</parameter></term>
        <listitem>
          <para>构建 gold 链接器并将其安装为 ld.gold（紧挨着默认链接器）。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-ld=default</parameter></term>
        <listitem>
          <para>构建原来的 bdf 链接器并将其安装为 ld（默认链接器）和 ld.bfd。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-plugins</parameter></term>
        <listitem>
          <para>为链接器启用插件支持。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-64-bit-bfd</parameter></term>
        <listitem>
           <para>启用 64 位支持（针对字宽较窄的主机）。64 位系统可能没什么必要，但也不会有什么坏处。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-system-zlib</parameter></term>
        <listitem>
          <para>使用安装的 zlib 库替代自带的版本构建。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make tooldir=/usr</userinput></screen>

    <variablelist>
      <title>make 参数的含义:</title>

      <varlistentry>
        <term><parameter moreinfo="none">tooldir=/usr</parameter></term>
        <listitem>
          <para>一般来说，tooldir (最终存放可执行文件的目录) 设置为 <filename class="directory" moreinfo="none">$(exec_prefix)/$(target_alias)</filename>。例如，x86_64 机器会把它扩展为 <filename class="directory" moreinfo="none">/usr/x86_64-unknown-linux-gnu</filename>。因为这是个自定制的系统，并不需要 <filename class="directory" moreinfo="none">/usr</filename>中的特定目标目录。如果系统用于交叉编译（例如，在 Intel 机器上编译能生成在 PowerPC 机器上运行的代码的软件包）会使用 <filename class="directory" moreinfo="none">$(exec_prefix)/$(target_alias)</filename>。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <important>
      <para>本章节中的 Binutils 测试套件至关重要，任何情况下都不能跳过。</para>
    </important>

    <para>查看结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make -k check</userinput></screen>

    <para>已知一个测试 debug_msg.sh 会失败。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make tooldir=/usr install</userinput></screen>

  </sect2>

  <sect2 id="contents-binutils" role="content">
    <title>Binutils 内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>addr2line, ar, as, c++filt, elfedit, gprof, ld, ld.bfd, ld.gold, nm,
        objcopy, objdump, ranlib, readelf, size, strings, 和 strip</seg>
        <seg>libbfd.{a,so} 和 libopcodes.{a,so}</seg>
        <seg>/usr/lib/ldscripts</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="addr2line">
        <term><command moreinfo="none">addr2line</command></term>
        <listitem>
          <para>转换程序地址为文件名称和行号；给定一个地址和可执行文件的名称，它使用可执行文件中的调试信息来判断与该地址关联的源文件以及行号。</para>
          <indexterm zone="ch-system-binutils addr2line" significance="normal">
            <primary sortas="b-addr2line">addr2line</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ar">
        <term><command moreinfo="none">ar</command></term>
        <listitem>
          <para>创建、更改以及抽取归档文件。</para>
          <indexterm zone="ch-system-binutils ar" significance="normal">
            <primary sortas="b-ar">ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="as">
        <term><command moreinfo="none">as</command></term>
        <listitem>
          <para>一个将 <command moreinfo="none">gcc</command> 的输出汇编到目标文件的汇编器。</para>
          <indexterm zone="ch-system-binutils as" significance="normal">
            <primary sortas="b-as">as</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="c-filt">
        <term><command moreinfo="none">c++filt</command></term>
        <listitem>
          <para>链接器用来过滤 C++ 和 Java 符号以及防止重载函数冲突。</para>
          <indexterm zone="ch-system-binutils c-filt" significance="normal">
            <primary sortas="b-c++filt">c++filt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="elfedit">
        <term><command moreinfo="none">elfedit</command></term>
        <listitem>
          <para>更新 ELF 文件的 ELF 文件头。</para>
          <indexterm zone="ch-system-binutils elfedit" significance="normal">
            <primary sortas="b-elfedit">elfedit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gprof">
        <term><command moreinfo="none">gprof</command></term>
        <listitem>
          <para>显示调用关系图配置数据。</para>
          <indexterm zone="ch-system-binutils gprof" significance="normal">
            <primary sortas="b-gprof">gprof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld">
        <term><command moreinfo="none">ld</command></term>
        <listitem>
          <para>一个将多个目标文件和归档文件合并为单一文件，重定位数据及绑定符号引用的链接器。</para>
          <indexterm zone="ch-system-binutils ld" significance="normal">
            <primary sortas="b-ld">ld</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.gold">
        <term><command moreinfo="none">ld.gold</command></term>
        <listitem>
          <para>一个阉割版的 ld，仅支持 elf 对象文件格式</para>
          <indexterm zone="ch-system-binutils ld.gold" significance="normal">
            <primary sortas="b-ld.gold">ld.gold</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ld.bfd">
        <term><command moreinfo="none">ld.bfd</command></term>
        <listitem>
          <para>到 <command moreinfo="none">ld</command> 的硬链接。</para>
          <indexterm zone="ch-system-binutils ld.bfd" significance="normal">
            <primary sortas="b-ld.bfd">ld.bfd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nm">
        <term><command moreinfo="none">nm</command></term>
        <listitem>
          <para>列出指定目标文件中出现的符号。</para>
          <indexterm zone="ch-system-binutils nm" significance="normal">
            <primary sortas="b-nm">nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="objcopy">
        <term><command moreinfo="none">objcopy</command></term>
        <listitem>
          <para>转换某种类型的目标文件到另一种类型。</para>
          <indexterm zone="ch-system-binutils objcopy" significance="normal">
            <primary sortas="b-objcopy">objcopy</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="objdump">
        <term><command moreinfo="none">objdump</command></term>
        <listitem>
          <para>显示给定目标文件的信息，用选项可以控制显示特定信息；显示的信息对于使用编译工具的程序员非常有用。</para>
          <indexterm zone="ch-system-binutils objdump" significance="normal">
            <primary sortas="b-objdump">objdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ranlib">
        <term><command moreinfo="none">ranlib</command></term>
        <listitem>
          <para>生成归档文件内容的索引并保存到归档文件；索引列出了所有归档文件成员——可重定位的目标文件定义的符号。</para>
          <indexterm zone="ch-system-binutils ranlib" significance="normal">
            <primary sortas="b-ranlib">ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="readelf">
        <term><command moreinfo="none">readelf</command></term>
        <listitem>
          <para>显示 ELF 类型的二进制文件的信息。</para>
          <indexterm zone="ch-system-binutils readelf" significance="normal">
            <primary sortas="b-readelf">readelf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="size">
        <term><command moreinfo="none">size</command></term>
        <listitem>
          <para>列出所给目标文件各部分大小和总的大小。</para>
          <indexterm zone="ch-system-binutils size" significance="normal">
            <primary sortas="b-size">size</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="strings">
        <term><command moreinfo="none">strings</command></term>
        <listitem>
          <para>对每个给定文件，输出不低于指定长度（默认是4）的可打印字符序列；对于目标文件，它默认只打印初始化和引导部分的字符串，而对于其它类型的文件扫描整个文件。</para>
          <indexterm zone="ch-system-binutils strings" significance="normal">
            <primary sortas="b-strings">strings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="strip">
        <term><command moreinfo="none">strip</command></term>
        <listitem>
          <para>从目标文件中去除符号。</para>
          <indexterm zone="ch-system-binutils strip" significance="normal">
            <primary sortas="b-strip">strip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbfd">
        <term><filename class="libraryfile" moreinfo="none">libbfd</filename></term>
        <listitem>
          <para>二进制文件描述库。</para>
          <indexterm zone="ch-system-binutils libbfd" significance="normal">
            <primary sortas="c-libbfd">libbfd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libopcodes">
        <term><filename class="libraryfile" moreinfo="none">libopcodes</filename></term>
        <listitem>
          <para>一个库用于处理操作码——「可读文本」版的处理器指令；用于构建类似 <command moreinfo="none">objdump</command> 的工具。</para>
          <indexterm zone="ch-system-binutils libopcodes" significance="normal">
            <primary sortas="c-libopcodes">libopcodes</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gmp" role="wrap">
  <?dbhtml filename="gmp.html"?>

  

  <title>GMP-6.1.2</title>

  <indexterm zone="ch-system-gmp" significance="normal">
    <primary sortas="a-GMP">GMP</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GMP 软件包包含一些数学库。这里有对任意精度数值计算很有用的函数。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.3 SBU</seg>
        <seg>61 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GMP</title>

    <note>
      <para>如果你是为 32 位的 x86 系统编译，但是你的 CPU 可以运行 64 位代码<emphasis>并且</emphasis>环境中你有指定的 <envar>CFLAGS</envar>，那么配置脚本会尝试配置为 64 位并导致失败。用下面的 方式执行配置命令来避免这个问题：
<screen role="nodump" format="linespecific"><userinput moreinfo="none"><parameter moreinfo="none">ABI=32</parameter> ./configure ...</userinput></screen></para>
    </note>

    <note>
      <para>GMP 的默认设定会为主机的处理器优化库。如果你不需要完美符合主机 CPU 的库，可以通过下方命令创建通用库，这样的话契合度会差一些：

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cp -v configfsf.guess config.guess
cp -v configfsf.sub   config.sub</userinput></screen></para>
    </note>

    <para>准备编译 GMP：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --enable-cxx     \
            --disable-static \
            --docdir=/usr/share/doc/gmp-6.1.2</userinput></screen>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-cxx</parameter></term>
        <listitem>
          <para>这个参数启用 C++ 支持</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--docdir=/usr/share/doc/gmp-6.1.2</parameter></term>
        <listitem>
          <para>这个变量指定保存文档的正确位置</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包并生成 HTML 文档：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make
make html</userinput></screen>

    <important>
      <para>该章节 GMP 的测试套件至关重要，任何情况下都不能跳过。</para>
    </important>

    <para>查看结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check 2&gt;&amp;1 | tee gmp-check-log</userinput></screen>
 
    <caution><para>GMP 中的代码对于其构建的处理器进行了高度优化。有时，检测处理器的代码会误认系统的功能，并在测试中报错，或是在其他应用使用 GMP 库的时候显示消息「Illegal instruction（非法指令）」。在这种情况下，GMP 需要重新配置选项 --build=x86_64-unknown-linux-gnu 并重新构建。</para></caution>

    <para>确认测试套件中所有的 190 个测试都通过了。通过输入下面的命令检查结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">awk '/# PASS:/{total+=$3} ; END{print total}' gmp-check-log</userinput></screen>

    <para>安装软件包和文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
make install-html</userinput></screen>

  </sect2>

  <sect2 id="contents-gmp" role="content">
    <title>GMP 内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>libgmp.so 和 libgmpxx.so</seg>
        <seg>/usr/share/doc/gmp-6.1.2</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libgmp">
        <term><filename class="libraryfile" moreinfo="none">libgmp</filename></term>
        <listitem>
          <para>包括精度数学函数</para>
          <indexterm zone="ch-system-gmp libgmp" significance="normal">
            <primary sortas="c-libgmp">libgmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgmpxx">
        <term><filename class="libraryfile" moreinfo="none">libgmpxx</filename></term>
        <listitem>
          <para>包括 C++ 精度属性函数</para>
          <indexterm zone="ch-system-gmp libgmpxx" significance="normal">
            <primary sortas="c-libgmpxx">libgmpxx</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-mpfr" role="wrap">
  <?dbhtml filename="mpfr.html"?>

  

  <title>MPFR-4.0.2</title>

  <indexterm zone="ch-system-mpfr" significance="normal">
    <primary sortas="a-MPFR">MPFR</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>MPFR 软件包包含多精度数学函数。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.0 SBU</seg>
        <seg>37 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 MPFR</title>

    <para>准备编译 MPFR：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr        \
            --disable-static     \
            --enable-thread-safe \
            --docdir=/usr/share/doc/mpfr-4.0.2</userinput></screen>

    <para>编译软件包并生成 HTML 文档：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make
make html</userinput></screen>

    <important>
      <para>该章节 MPFR 的测试套件至关重要，任何情况下都不能跳过。</para>
    </important>

    <para>检查结果确认通过了所有的测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包以及文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
make install-html</userinput></screen>

  </sect2>


  <sect2 id="contents-mpfr" role="content">
    <title>MPFR 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>libmpfr.so</seg>
        <seg>/usr/share/doc/mpfr-4.0.2</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libmpfr">
        <term><filename class="libraryfile" moreinfo="none">libmpfr</filename></term>
        <listitem>
          <para>包含多精度数学函数</para>
          <indexterm zone="ch-system-mpfr libmpfr" significance="normal">
            <primary sortas="c-libmpfr">libmpfr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-mpc" role="wrap">
  <?dbhtml filename="mpc.html"?>

  

  <title>MPC-1.1.0</title>

  <indexterm zone="ch-system-mpc" significance="normal">
    <primary sortas="a-MPC">MPC</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>MPC 软件包包含一个能以任意高精度进行复数数值计算和对结果进行正确四舍五入的库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>22 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 MPC</title>

    <para>准备编译 MPC：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/mpc-1.1.0</userinput></screen>

    <para>编译软件包并生成 HTML 文档：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make
make html</userinput></screen>

    <para>用以下命令检查结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包以及它的帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
make install-html</userinput></screen>

  </sect2>


  <sect2 id="contents-mpc" role="content">
    <title>MPC 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>libmpc.so</seg>
        <seg>/usr/share/doc/mpc-1.1.0</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libmpc">
        <term><filename class="libraryfile" moreinfo="none">libmpc</filename></term>
        <listitem>
          <para>包含复数数学函数</para>
          <indexterm zone="ch-system-mpc libmpc" significance="normal">
            <primary sortas="c-libmpc">libmpc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-shadow" role="wrap">
  <?dbhtml filename="shadow.html"?>

  

  <title>Shadow-4.6</title>

  <indexterm zone="ch-system-shadow" significance="normal">
    <primary sortas="a-Shadow">Shadow</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Shadow 软件包包含以安全方式处理密码的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>46 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Shadow</title>

    <note>
      <para>如果你喜欢强制使用更强的密码，在编译 Shadow 之前可以根据 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/cracklib.html"/> 安装 CrackLib。然后在下面的 <command moreinfo="none">configure</command>  命令中增加 <parameter moreinfo="none">--with-libcrack</parameter>。</para>
    </note>

    <para>禁用对 <command moreinfo="none">groups</command> 程序以及相应 man 手册的安装，Coreutils 已经提供了更棒的版本。同时也避免了安装已由 <xref linkend="ch-system-man-pages"/> 安装过的手册页：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/groups$(EXEEXT) //' src/Makefile.in
find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;</userinput></screen>

    <para id="shadow-login_defs">比起默认的 <emphasis>crypt</emphasis> 方法，用更安全的 <emphasis>SHA-512</emphasis> 方法加密密码，它允许密码长度超过 8 个字符。也需要把 Shadow 默认使用的用户邮箱由陈旧的 <filename class="directory" moreinfo="none">/var/spool/mail</filename> 位置改为正在使用的 <filename class="directory" moreinfo="none">/var/mail</filename> 位置：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
       -e 's@/var/spool/mail@/var/mail@' etc/login.defs</userinput></screen>

    <note>
      <para>如果你选择编译支持 Cracklib 的 Shadow，运行下面的命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">sed -i 's@DICTPATH.*@DICTPATH\t/lib/cracklib/pw_dict@' etc/login.defs</userinput></screen>
    </note>

    <para>做一个小改动，用 useradd 1000 生成第一个组号：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/1000/999/' etc/useradd</userinput></screen>

    <para>准备编译 Shadow：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --sysconfdir=/etc --with-group-name-max-length=32</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-group-name-max-length=32</parameter></term>
        <listitem>
          <para>最长用户名为 32 个字符，使组名称也是如此。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>移动位置错误的程序到正确的位置：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/passwd /bin</userinput></screen>

    <!-- <para>Move Shadow's libraries to more appropriate locations:</para>

<screen><userinput remap="install">mv -v /lib/libshadow.*a /usr/lib
rm -v /lib/libshadow.so
ln -sfv ../../lib/libshadow.so.0 /usr/lib/libshadow.so</userinput></screen> -->

  </sect2>

  <sect2 id="conf-shadow" role="configuration">
    <title>配置 Shadow</title>

    <indexterm zone="conf-shadow" significance="normal">
      <primary sortas="a-Shadow">Shadow</primary>
      <secondary>configuring</secondary>
    </indexterm>

    <para>该软件包包含增加、更改、以及删除用户和组的工具；设置和修改密码；执行其它特权级任务。软件包解压后的 <filename moreinfo="none">doc/HOWTO</filename> 文件有关于 <emphasis>password shadowing</emphasis> 的完整解释。如果使用 Shadow 支持，记住需要验证密码（显示管理器、FTP 程序、pop3 守护进程等）的程序必须和 Shadow 兼容。也就是说，它们要能使用 Shadow 加密的密码。</para>

    <para>运行下面的命令启用 shadow 密码：</para>

<screen format="linespecific"><userinput moreinfo="none">pwconv</userinput></screen>

    <para>运行下面的命令启用 shadow 组密码：</para>

<screen format="linespecific"><userinput moreinfo="none">grpconv</userinput></screen>

    <para>用于 <command moreinfo="none">useradd</command> 工具的 Shadow 配置有一些需要解释的注意事项。首先，<command moreinfo="none">useradd</command> 工具的默认操作是创建用户以及和用户名相同的组。默认情况下，用户 ID(UID) 和组 ID(GID) 的数字从 1000 开始。这意味着如果你不传递参数给 <command moreinfo="none">useradd</command>，系统中的每个用户都会属于一个不同的组。如果不需要这样的结果，你需要传递参数 <parameter moreinfo="none">-g</parameter> 到 <command moreinfo="none">useradd</command>。默认参数保存在 <filename moreinfo="none">/etc/default/useradd</filename> 文件中。你需要修改该文件中的两个参数来实现你的特定需求。</para>

    <variablelist>
      <title><filename moreinfo="none">/etc/default/useradd</filename> 参数解释</title>

      <varlistentry>
        <term><parameter moreinfo="none">GROUP=1000</parameter></term>
        <listitem>
          <para>该参数设定 /etc/group 文件中使用的起始组序号。你可以把它更改为任何你需要的数字。注意 <command moreinfo="none">useradd</command> 永远不会重用 UID 或 GID。如果该参数指定的数字已经被使用了，将会使用它之后的下一个可用数字。另外注意如果你系统中没有序号为 1000 的组，第一次使用 <command moreinfo="none">useradd</command> 而没有参数 <parameter moreinfo="none">-g</parameter> 的话，你会在终端中看到一个提示信息：<computeroutput moreinfo="none">useradd: unknown GID 1000</computeroutput>。你可以忽视这个信息，它会使用组号 1000。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter moreinfo="none">CREATE_MAIL_SPOOL=yes</parameter></term>
        <listitem>
          <para>这个参数会为 <command moreinfo="none">useradd</command> 新添加的用户创建邮箱文件。<command moreinfo="none">useradd</command> 会使组 <systemitem class="groupname" moreinfo="none">mail</systemitem> 拥有该文件的所有权，并赋予组 0660 的权限。如果你希望 <command moreinfo="none">useradd</command> 不创建这些邮箱文件，你可以运行下面的命令：</para>

<screen format="linespecific"><userinput moreinfo="none">sed -i 's/yes/no/' /etc/default/useradd</userinput></screen>
        </listitem>
      </varlistentry>

    </variablelist>


  </sect2>

  <sect2 role="configuration">
    <title>设置 root 密码</title>

    <para>运行下面的命令为用户 <emphasis>root</emphasis> 设置密码：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">passwd root</userinput></screen>

  </sect2>

  <sect2 id="contents-shadow" role="content">
    <title>Shadow 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>chage, chfn, chgpasswd, chpasswd, chsh, expiry, faillog, gpasswd,
        groupadd, groupdel, groupmems, groupmod, grpck, grpconv, grpunconv,
        lastlog, login, logoutd, newgidmap, newgrp, newuidmap, newusers,
        nologin, passwd, pwck, pwconv, pwunconv, sg (链接到 newgrp), su,
        useradd, userdel, usermod, vigr (链接到 vipw), 和 vipw</seg>
        <seg>/etc/default</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="chage">
        <term><command moreinfo="none">chage</command></term>
        <listitem>
          <para>用来更改强制性密码更新的最大天数</para>
          <indexterm zone="ch-system-shadow chage" significance="normal">
            <primary sortas="b-chage">chage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chfn">
        <term><command moreinfo="none">chfn</command></term>
        <listitem>
          <para>用来更改用户的全名以及其它信息</para>
          <indexterm zone="ch-system-shadow chfn" significance="normal">
            <primary sortas="b-chfn">chfn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chgpasswd">
        <term><command moreinfo="none">chgpasswd</command></term>
        <listitem>
          <para>用来以批处理模式更新组密码</para>
          <indexterm zone="ch-system-shadow chgpasswd" significance="normal">
            <primary sortas="b-chgpasswd">chgpasswd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chpasswd">
        <term><command moreinfo="none">chpasswd</command></term>
        <listitem>
          <para>用来以批处理模式更新用户密码</para>
          <indexterm zone="ch-system-shadow chpasswd" significance="normal">
            <primary sortas="b-chpasswd">chpasswd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chsh">
        <term><command moreinfo="none">chsh</command></term>
        <listitem>
          <para>用来更改用户登录时默认使用的 shell</para>
          <indexterm zone="ch-system-shadow chsh" significance="normal">
            <primary sortas="b-chsh">chsh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="expiry">
        <term><command moreinfo="none">expiry</command></term>
        <listitem>
          <para>检查并强制执行当前密码过期策略</para>
          <indexterm zone="ch-system-shadow expiry" significance="normal">
            <primary sortas="b-expiry">expiry</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="faillog">
        <term><command moreinfo="none">faillog</command></term>
        <listitem>
          <para>用来检查登录失败的日志文件，设置锁定用户的最大失败次数，或者重置失败次数</para>
          <indexterm zone="ch-system-shadow faillog" significance="normal">
            <primary sortas="b-faillog">faillog</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gpasswd">
        <term><command moreinfo="none">gpasswd</command></term>
        <listitem>
          <para>用来给组增加、删除成员以及管理员</para>
          <indexterm zone="ch-system-shadow gpasswd" significance="normal">
            <primary sortas="b-gpasswd">gpasswd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groupadd">
        <term><command moreinfo="none">groupadd</command></term>
        <listitem>
          <para>用指定的名称创建组</para>
          <indexterm zone="ch-system-shadow groupadd" significance="normal">
            <primary sortas="b-groupadd">groupadd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groupdel">
        <term><command moreinfo="none">groupdel</command></term>
        <listitem>
          <para>用指定的名称删除组</para>
          <indexterm zone="ch-system-shadow groupdel" significance="normal">
            <primary sortas="b-groupdel">groupdel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groupmems">
        <term><command moreinfo="none">groupmems</command></term>
        <listitem>
          <para>允许用户管理他/她自己的组成员列表而不需要超级用户权限。</para>
          <indexterm zone="ch-system-shadow groupmems" significance="normal">
            <primary sortas="b-groupmems">groupmems</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groupmod">
        <term><command moreinfo="none">groupmod</command></term>
        <listitem>
          <para>用于更改指定组的名称或 GID</para>
          <indexterm zone="ch-system-shadow groupmod" significance="normal">
            <primary sortas="b-groupmod">groupmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grpck">
        <term><command moreinfo="none">grpck</command></term>
        <listitem>
          <para>验证组文件 <filename moreinfo="none">/etc/group</filename> 和 <filename moreinfo="none">/etc/gshadow</filename> 的完整性</para>
          <indexterm zone="ch-system-shadow grpck" significance="normal">
            <primary sortas="b-grpck">grpck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grpconv">
        <term><command moreinfo="none">grpconv</command></term>
        <listitem>
          <para>从普通组文件创建或升级为 shadow 组文件</para>
          <indexterm zone="ch-system-shadow grpconv" significance="normal">
            <primary sortas="b-grpconv">grpconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grpunconv">
        <term><command moreinfo="none">grpunconv</command></term>
        <listitem>
          <para>从 <filename moreinfo="none">/etc/group</filename> 更新到 <filename moreinfo="none">/etc/gshadow</filename> 然后删除前者</para>
          <indexterm zone="ch-system-shadow grpunconv" significance="normal">
            <primary sortas="b-grpunconv">grpunconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lastlog">
        <term><command moreinfo="none">lastlog</command></term>
        <listitem>
          <para>报告所有用户或指定用户的最近一次登录</para>
          <indexterm zone="ch-system-shadow lastlog" significance="normal">
            <primary sortas="b-lastlog">lastlog</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="login">
        <term><command moreinfo="none">login</command></term>
        <listitem>
          <para>用于系统让用户登录进来</para>
          <indexterm zone="ch-system-shadow login" significance="normal">
            <primary sortas="b-login">login</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="logoutd">
        <term><command moreinfo="none">logoutd</command></term>
        <listitem>
          <para>用于强制限制登录时间和端口的守护进程</para>
          <indexterm zone="ch-system-shadow logoutd" significance="normal">
            <primary sortas="b-logoutd">logoutd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="newgidmap">
        <term><command moreinfo="none">newgidmap</command></term>
        <listitem>
          <para>用于设置用户命名空间的 gid 映射</para>
          <indexterm zone="ch-system-shadow newgidmap" significance="normal">
            <primary sortas="b-newgidmap">newgidmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="newgrp">
        <term><command moreinfo="none">newgrp</command></term>
        <listitem>
          <para>用于在一次登录会话中更改当前 GID</para>
          <indexterm zone="ch-system-shadow newgrp" significance="normal">
            <primary sortas="b-newgrp">newgrp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="newuidmap">
        <term><command moreinfo="none">newuidmap</command></term>
        <listitem>
          <para>用于设置用户命名空间的 uid 映射</para>
          <indexterm zone="ch-system-shadow newuidmap" significance="normal">
            <primary sortas="b-newuidmap">newuidmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="newusers">
        <term><command moreinfo="none">newusers</command></term>
        <listitem>
          <para>用于批量创建或更新用户账户</para>
          <indexterm zone="ch-system-shadow newusers" significance="normal">
            <primary sortas="b-newusers">newusers</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nologin">
        <term><command moreinfo="none">nologin</command></term>
        <listitem>
          <para>显示一个账户不可用的信息；它用于来作为不可登录的账户的默认 shell</para>
          <indexterm zone="ch-system-shadow nologin" significance="normal">
            <primary sortas="b-nologin">nologin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="passwd">
        <term><command moreinfo="none">passwd</command></term>
        <listitem>
          <para>用来更改用户或组账户的密码</para>
          <indexterm zone="ch-system-shadow passwd" significance="normal">
            <primary sortas="b-passwd">passwd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pwck">
        <term><command moreinfo="none">pwck</command></term>
        <listitem>
          <para>验证密码文件 <filename moreinfo="none">/etc/passwd</filename> 和 <filename moreinfo="none">/etc/shadow</filename> 的完整性</para>
          <indexterm zone="ch-system-shadow pwck" significance="normal">
            <primary sortas="b-pwck">pwck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pwconv">
        <term><command moreinfo="none">pwconv</command></term>
        <listitem>
          <para>从普通密码文件创建或升级 shadow 密码文件</para>
          <indexterm zone="ch-system-shadow pwconv" significance="normal">
            <primary sortas="b-pwconv">pwconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pwunconv">
        <term><command moreinfo="none">pwunconv</command></term>
        <listitem>
          <para>从 <filename moreinfo="none">/etc/passwd</filename> 更新到 <filename moreinfo="none">/etc/shadow</filename> 然后删除前者</para>
          <indexterm zone="ch-system-shadow pwunconv" significance="normal">
            <primary sortas="b-pwunconv">pwunconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sg">
        <term><command moreinfo="none">sg</command></term>
        <listitem>
          <para>当用户的 GID 被设置为指定组的 GID 时执行一个特定命令</para>
          <indexterm zone="ch-system-shadow sg" significance="normal">
            <primary sortas="b-sg">sg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="su">
        <term><command moreinfo="none">su</command></term>
        <listitem>
          <para>用替换的用户和组 ID 运行 Shell</para>
          <indexterm zone="ch-system-shadow su" significance="normal">
            <primary sortas="b-su">su</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="useradd">
        <term><command moreinfo="none">useradd</command></term>
        <listitem>
          <para>用指定的名称新建用户或更新新用户的默认信息</para>
          <indexterm zone="ch-system-shadow useradd" significance="normal">
            <primary sortas="b-useradd">useradd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="userdel">
        <term><command moreinfo="none">userdel</command></term>
        <listitem>
          <para>删除指定的用户账户</para>
          <indexterm zone="ch-system-shadow userdel" significance="normal">
            <primary sortas="b-userdel">userdel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="usermod">
        <term><command moreinfo="none">usermod</command></term>
        <listitem>
          <para>用于更改指定用户的登录名称、UID、shell、初始组、home 目录，等</para>
          <indexterm zone="ch-system-shadow usermod" significance="normal">
            <primary sortas="b-usermod">usermod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vigr">
        <term><command moreinfo="none">vigr</command></term>
        <listitem>
          <para>编辑 <filename moreinfo="none">/etc/group</filename> 或 <filename moreinfo="none">/etc/gshadow</filename> 文件</para>
          <indexterm zone="ch-system-shadow vigr" significance="normal">
            <primary sortas="b-vigr">vigr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vipw">
        <term><command moreinfo="none">vipw</command></term>
        <listitem>
          <para>编辑 <filename moreinfo="none">/etc/passwd</filename> 或 <filename moreinfo="none">/etc/shadow</filename> 文件</para>
          <indexterm zone="ch-system-shadow vipw" significance="normal">
            <primary sortas="b-vipw">vipw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gcc" role="wrap">
  <?dbhtml filename="gcc.html"?>

  

  <title>GCC-8.2.0</title>

  <indexterm zone="ch-system-gcc" significance="normal">
    <primary sortas="a-GCC">GCC</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GCC 软件包包括 GNU 编译器集，其中有 C 和 C++ 的编译器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>92 SBU (with tests)</seg>
        <seg>3.9 GB </seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GCC</title>

    <para>如果是在 x86_64 上实施构建，更改 64 位库的默认目录名为「lib」：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para>删除之前创建的符号链接，因为最终 gcc 将被安装在这：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">rm -f /usr/lib/gcc</userinput></screen>

    <para>GCC 的文档建议在源代码目录之外一个专用的编译目录中编译 GCC：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 GCC：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">SED=sed                               \
../configure --prefix=/usr            \
             --enable-languages=c,c++ \
             --disable-multilib       \
             --disable-bootstrap      \
             --disable-libmpx         \
             --with-system-zlib</userinput></screen>

    <para>注意，对于其它的编程语言，现在还有一些前提条件没有准备好。可以查看 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/gcc.html">BLFS Book</ulink> 了解如何编译 GCC 支持的所有语言的指令。</para>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><envar>SED=sed</envar></term>
        <listitem>
          <para>设置环境变量防止访问到硬编码的 /tools/bin/sed 路径。</para>
        </listitem>
      </varlistentry>
 
      <varlistentry>
        <term><parameter moreinfo="none">--disable-libmpx</parameter></term>
        <listitem>
          <para>这个选项告知 GCC 不要编译 mpx （Memory Protection Extensions：内存保护扩展）。此特性在一些处理器上存在问题，已经在下一个版本的 GCC 中移除。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-system-zlib</parameter></term>
        <listitem>
          <para>这个选项告诉 GCC 链接系统安装的 Zlib 库，而不是它内部自带的库。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <important>
      <para>本章节中 GCC 的测试套件至关重要，任何情况下都不能跳过。</para>
    </important>

   <para>GCC 测试套件中一个测试集的会耗尽堆栈空间，因此运行测试之前要增加栈大小：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">ulimit -s 32768</userinput></screen>

    <para>删除已知会导致问题的测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">rm ../gcc/testsuite/g++.dg/pr83239.C</userinput></screen>

    <para>以非特权用户测试编译结果，不要因为出现错误就停下来：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">chown -Rv nobody . 
su nobody -s /bin/bash -c "PATH=$PATH make -k check"</userinput></screen>

    <para>要查看测试套件结果的概要，运行：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">../contrib/test_summary</userinput></screen>

    <para>如果仅查看摘要，则使用管道 <userinput moreinfo="none">grep -A7 Summ</userinput> 选项控制输出将输出：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">../contrib/test_summary | grep -A7 Summ</userinput></screen>

    <para>结果可以和 <ulink url="http://www.linuxfromscratch.org/lfs/build-logs/8.4/"/> 以及 <ulink url="http://gcc.gnu.org/ml/gcc-testresults/"/> 上的相比较。</para>

    <para>一些意料之外的错误总是难以避免。GCC 开发者通常会意识到这些问题，但还没有解决。除非测试结果和上面 URL 中的相差很大，不然就可以安全继续。</para>

    <note><para>
      在某些内核配置和 AMD 处理器组合的时候，肯能会在 gcc.target/i386/mpx 测试（旨在测试最新英特尔处理器上的 MPX 选项）中出现 1100 个失败。AMD 处理器的话可以安心的忽略这些。
    </para></note>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>创建 <ulink url="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s09.html">FHS</ulink> 因为「历史」原因而需要的软链接。</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv ../usr/bin/cpp /lib</userinput></screen>

    <para>很多软件包用命令 <command moreinfo="none">cc</command> 调用 C 编译器。为了满足这些软件包，创建一个符号链接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv gcc /usr/bin/cc</userinput></screen>

    <para>增加一个兼容符号链接启用编译程序时进行链接时间优化（Link Time Optimization，LTO）：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/8.2.0/liblto_plugin.so \
        /usr/lib/bfd-plugins/</userinput></screen>

    <para>现在我们最终的工具链已经准备就绪了，再一次确认编译和链接都能像预期那样正常工作很重要。我们通过做和前面章节做过的相同的完整性检查做到这点：</para>

    <screen os="a" format="linespecific"><userinput moreinfo="none">echo 'int main(){}' &gt; dummy.c
cc dummy.c -v -Wl,--verbose &amp;&gt; dummy.log
readelf -l a.out | grep ': /lib'</userinput></screen>

    <para os="b">如果没有任何错误，上条命令的输出应该是（不同的平台上的动态链接器可能名字不同）：</para>

    <screen os="c" format="linespecific"><computeroutput moreinfo="none">[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para os="d">现在确保我们已经设置好了启动文件：</para>

    <screen os="e" format="linespecific"><userinput moreinfo="none">grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log</userinput></screen>

    <para os="f">上一条命令的输出应该是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crt1.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crti.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/../../../../lib/crtn.o succeeded</computeroutput></screen>

  <para>取决于你机器的架构，上面的结果可能有稍微不同，差异通常是 <filename class="directory" moreinfo="none">/usr/lib/gcc</filename> 后目录的名称。这里重要的一点是 <command moreinfo="none">gcc</command> 能在 <filename moreinfo="none">/usr/lib</filename> 目录下找到所有的三个 <filename class="directory" moreinfo="none">crt*.o</filename> 文件。</para>

    <para os="g">确保链接器能找到正确的头文件：</para>

<screen format="linespecific"><userinput moreinfo="none">grep -B4 '^ /usr/include' dummy.log</userinput></screen>

    <para os="h">这条命令应该返回如下输出：</para>

<screen format="linespecific"><computeroutput moreinfo="none">#include &lt;...&gt; search starts here:
 /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/8.2.0/include-fixed
 /usr/include</computeroutput></screen>

   <para>同时，注意你的目标系统三段式后面的目录名称可能和上面的不同，这取决于你的架构。</para>

<!--  This appears to be obsolete

    <note><para>在版本 4.3.0 中，GCC 无条件安装 <filename>limits.h</filename> 文件到私有 <filename class="directory">include-fixed</filename> 目录，要求这个目录已经存在。</para></note>
-->

    <para os="i">接下来，确认新的链接器已经在使用正确的搜索路径：</para>

    <screen os="j" format="linespecific"><userinput moreinfo="none">grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'</userinput></screen>

    <para os="k">应该忽略指向带有 '-linux-gnu' 的路径，上条命令的输出应该是：</para>

<screen format="linespecific"><computeroutput moreinfo="none">SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

   <para>32 位的系统可能有一些不同的目录。例如，下面是一台 i686 机器的输出：</para>

<screen format="linespecific"><computeroutput moreinfo="none">SEARCH_DIR("/usr/i686-pc-linux-gnu/lib32")
SEARCH_DIR("/usr/local/lib32")
SEARCH_DIR("/lib32")
SEARCH_DIR("/usr/lib32")
SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

    <para os="l">然后我们要确定我们使用的是正确的 libc：</para>

    <screen os="m" format="linespecific"><userinput moreinfo="none">grep "/lib.*/libc.so.6 " dummy.log</userinput></screen>

    <para os="n">上条命令的输出应该为：</para>

    <screen os="o" format="linespecific"><computeroutput moreinfo="none">attempt to open /lib/libc.so.6 succeeded</computeroutput></screen>

    <para os="p">最后，确保 GCC 使用的是正确的动态链接器：</para>

    <screen os="q" format="linespecific"><userinput moreinfo="none">grep found dummy.log</userinput></screen>

    <para os="r">上条命令的结果应该是（不同的平台上链接器名字可以不同）：</para>

    <screen os="s" format="linespecific"><computeroutput moreinfo="none">found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2</computeroutput></screen>

    <para os="t">如果显示的结果不一样或者根本没有显示，那就出了大问题。检查并回溯之前的步骤，找到出错的地方并改正。最有可能的原因是参数文件的调整出了问题。在进行下一步之前所有的问题都要解决。</para>

    <para os="u">确保一切正常之后，清除测试文件：</para>

    <screen os="v" format="linespecific"><userinput moreinfo="none">rm -v dummy.c a.out dummy.log</userinput></screen>

    <para>最后，移动位置放错的文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib</userinput></screen>

  </sect2>

  <sect2 id="contents-gcc" role="content">
    <title>GCC 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>c++, cc (链接到 gcc), cpp, g++, gcc,
        gcc-ar, gcc-nm, gcc-ranlib, 和 gcov</seg>

        <seg>libasan.{a,so}, libatomic.{a,so}, libgcc.a, libgcc_eh.a, 
        libgcc_s.so, libgcov.a, libgomp.{a,so}, libiberty.a, libitm.{a,so},
        liblto_plugin.so, 
        libquadmath.{a,so}, libssp.{a,so},
        libssp_nonshared.a, libstdc++.{a,so}, libsupc++.a, 和 libtsan.{a,so}</seg>

        <seg>/usr/include/c++, /usr/lib/gcc, /usr/libexec/gcc, 和 
        /usr/share/gcc-8.2.0</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="c">
        <term><command moreinfo="none">c++</command></term>
        <listitem>
          <para>C++ 编译器</para>
          <indexterm zone="ch-system-gcc c" significance="normal">
            <primary sortas="b-c++">c++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cc">
        <term><command moreinfo="none">cc</command></term>
        <listitem>
          <para>C 编译器</para>
          <indexterm zone="ch-system-gcc cc" significance="normal">
            <primary sortas="b-cc">cc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cpp">
        <term><command moreinfo="none">cpp</command></term>
        <listitem>
          <para>C 预处理器；编译器用来扩展源文件中 #include、#define 以及类似语句</para>
          <indexterm zone="ch-system-gcc cpp" significance="normal">
            <primary sortas="b-cpp">cpp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="g">
        <term><command moreinfo="none">g++</command></term>
        <listitem>
          <para>C++ 编译器</para>
          <indexterm zone="ch-system-gcc g" significance="normal">
            <primary sortas="b-g++">g++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc">
        <term><command moreinfo="none">gcc</command></term>
        <listitem>
          <para>C 编译器</para>
          <indexterm zone="ch-system-gcc gcc" significance="normal">
            <primary sortas="b-gcc">gcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ar">
        <term><command moreinfo="none">gcc-ar</command></term>
        <listitem>
          <para>增加插件到命令行的 <command moreinfo="none">ar</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-ar" significance="normal">
            <primary sortas="b-gcc-ar">gc-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-nm">
        <term><command moreinfo="none">gcc-nm</command></term>
        <listitem>
          <para>增加插件到命令行的 <command moreinfo="none">nm</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-nm" significance="normal">
            <primary sortas="b-gcc-nm">gc-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ranlib">
        <term><command moreinfo="none">gcc-ranlib</command></term>
        <listitem>
          <para>增加插件到命令行的 <command moreinfo="none">ranlib</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-ranlib" significance="normal">
            <primary sortas="b-gcc-ranlib">gc-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov">
        <term><command moreinfo="none">gcov</command></term>
        <listitem>
          <para>一个覆盖测试工具；用于分析程序以决定在哪里进行优化有最大的效果</para>
          <indexterm zone="ch-system-gcc gcov" significance="normal">
            <primary sortas="b-gcov">gcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libasan">
        <term><command moreinfo="none">libasan</command></term>
        <listitem>
          <para>Address Sanitizer（地址消毒剂）运行时库。</para>
          <indexterm zone="ch-system-gcc libasan" significance="normal">
            <primary sortas="b-libasan">libasan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcc">
        <term><filename class="libraryfile" moreinfo="none">libgcc</filename></term>
        <listitem>
          <para>包含用于 <command moreinfo="none">gcc</command> 的运行时支持</para>
          <indexterm zone="ch-system-gcc libgcc" significance="normal">
            <primary sortas="c-libgcc">libgcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcov">
        <term><filename class="libraryfile" moreinfo="none">libgcov</filename></term>
        <listitem>
          <para>当指示 GCC 启用分析时该库会被链接到程序中</para>
          <indexterm zone="ch-system-gcc libgcov" significance="normal">
            <primary sortas="c-libgcov">libgcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgomp">
        <term><filename class="libraryfile" moreinfo="none">libgomp</filename></term>
        <listitem>
          <para>用于 C/C++、Fortran 语言的多平台共享内存并行编程的 OpenMP API 的 GNU 实现</para>
          <indexterm zone="ch-system-gcc libgomp" significance="normal">
            <primary sortas="c-libgomp">libgomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libiberty">
        <term><filename class="libraryfile" moreinfo="none">libiberty</filename></term>
        <listitem>
          <para>包含多种 GNU 程序所使用的例程，包括 <command moreinfo="none">getopt</command>, <command moreinfo="none">obstack</command>, <command moreinfo="none">strerror</command>, <command moreinfo="none">strtol</command>, 和 <command moreinfo="none">strtoul</command></para>
          <indexterm zone="ch-system-gcc libiberty" significance="normal">
            <primary sortas="c-libiberty">libiberty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liblto_plugin">
        <term><filename class="libraryfile" moreinfo="none">liblto_plugin</filename></term>
        <listitem>
          <para>GCC 的链接时间优化（LTO）插件，允许 GCC 跨编译单元进行优化</para>
          <indexterm zone="ch-system-gcc liblto_plugin" significance="normal">
            <primary sortas="c-liblto_plugin">liblto_plugin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libquadmath">
        <term><filename class="libraryfile" moreinfo="none">libquadmath</filename></term>
        <listitem>
          <para>GCC 四精度数学库 API</para>
          <indexterm zone="ch-system-gcc libquadmath" significance="normal">
            <primary sortas="c-libquadmath">libquadmath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libssp">
        <term><filename class="libraryfile" moreinfo="none">libssp</filename></term>
        <listitem>
          <para>包含支持 GCC 堆栈溢出保护功能的例程</para>
          <indexterm zone="ch-system-gcc libssp" significance="normal">
            <primary sortas="c-libssp">libssp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdc">
        <term><filename class="libraryfile" moreinfo="none">libstdc++</filename></term>
        <listitem>
          <para>标准 C++ 库</para>
          <indexterm zone="ch-system-gcc libstdc" significance="normal">
            <primary sortas="c-libstdc++">libstdc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsupc">
        <term><filename class="libraryfile" moreinfo="none">libsupc++</filename></term>
        <listitem>
          <para>为 C++ 编程语言提供支持例程</para>
          <indexterm zone="ch-system-gcc libsupc" significance="normal">
            <primary sortas="c-libsupc++">libsupc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtsan">
        <term><filename class="libraryfile" moreinfo="none">libtsan</filename></term>
        <listitem>
          <para>Thread Sanitizer（数据速率检测工具） 运行时库</para>
          <indexterm zone="ch-system-gcc libtsan" significance="normal">
            <primary sortas="c-libtsan">libtsan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-bzip2" role="wrap">
  <?dbhtml filename="bzip2.html"?>

  

  <title>Bzip2-1.0.6</title>

  <indexterm zone="ch-system-bzip2" significance="normal">
    <primary sortas="a-Bzip2">Bzip2</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Bzip2 软件包包含压缩和解压缩的程序。用 <command moreinfo="none">bzip2</command> 压缩文本文件能获得比传统的 <command moreinfo="none">gzip</command> 更好的压缩比。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>2.3 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bzip2</title>

    <para>使用能为这个软件包安装帮助文档的补丁：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">patch -Np1 -i ../bzip2-1.0.6-install_docs-1.patch</userinput></screen>

   <para>下面的命令确保安装的符号链接是相对链接：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile</userinput></screen>

    <para>确认 man 页面安装到了正确的位置：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile</userinput></screen>

    <para>准备编译 Bzip：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make -f Makefile-libbz2_so
make clean</userinput></screen>

    <variablelist>
      <title>make 参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">-f Makefile-libbz2_so</parameter></term>
        <listitem>
          <para>这会使用不同的 <filename moreinfo="none">Makefile</filename> 文件编译 Bzip2，在这里是 <filename moreinfo="none">Makefile-libbz2_so</filename>，它会创建动态 <filename class="libraryfile" moreinfo="none">libbz2.so</filename> 库，并把它链接到 Bzip2 工具。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译并测试软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>安装程序：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make PREFIX=/usr install</userinput></screen>

    <para>安装使用动态链接库的 <command moreinfo="none">bzip2</command> 二进制文件到 <filename class="directory" moreinfo="none">/bin</filename> 目录，创建一些必须的符号链接并清理：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -v bzip2-shared /bin/bzip2
cp -av libbz2.so* /lib
ln -sv ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
rm -v /usr/bin/{bunzip2,bzcat,bzip2}
ln -sv bzip2 /bin/bunzip2
ln -sv bzip2 /bin/bzcat</userinput></screen>

  </sect2>

  <sect2 id="contents-bzip2" role="content">
    <title>Bzip2 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>bunzip2 (链接到 bzip2), bzcat (链接到 bzip2), bzcmp (链接到
        bzdiff), bzdiff, bzegrep (链接到 bzgrep), bzfgrep (链接到 bzgrep),
        bzgrep, bzip2, bzip2recover, bzless (链接到 bzmore), 和 bzmore</seg>
        <seg>libbz2.{a,so}</seg>
        <seg>/usr/share/doc/bzip2-1.0.6</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bunzip2">
        <term><command moreinfo="none">bunzip2</command></term>
        <listitem>
          <para>解压 bzip 压缩的文件</para>
          <indexterm zone="ch-system-bzip2 bunzip2" significance="normal">
            <primary sortas="b-bunzip2">bunzip2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzcat">
        <term><command moreinfo="none">bzcat</command></term>
        <listitem>
          <para>解压到标准输出</para>
          <indexterm zone="ch-system-bzip2 bzcat" significance="normal">
            <primary sortas="b-bzcat">bzcat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzcmp">
        <term><command moreinfo="none">bzcmp</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">cmp</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzcmp" significance="normal">
            <primary sortas="b-bzcmp">bzcmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzdiff">
        <term><command moreinfo="none">bzdiff</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">diff</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzdiff" significance="normal">
            <primary sortas="b-bzdiff">bzdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzegrep">
        <term><command moreinfo="none">bzegrep</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">egrep</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzegrep" significance="normal">
            <primary sortas="b-bzegrep">bzegrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzfgrep">
        <term><command moreinfo="none">bzfgrep</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">fgrep</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzfgrep" significance="normal">
            <primary sortas="b-bzfgrep">bzfgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzgrep">
        <term><command moreinfo="none">bzgrep</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">grep</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzgrep" significance="normal">
            <primary sortas="b-bzgrep">bzgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzip2">
        <term><command moreinfo="none">bzip2</command></term>
        <listitem>
          <para>使用哈夫曼编码的 Burrows-Wheeler 块排序文本压缩算法压缩文件；压缩率比传统的用「Lempel-Ziv」算法的压缩器要好，比如 <command moreinfo="none">gzip</command>。</para>
          <indexterm zone="ch-system-bzip2 bzip2" significance="normal">
            <primary sortas="b-bzip2">bzip2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzip2recover">
        <term><command moreinfo="none">bzip2recover</command></term>
        <listitem>
          <para>尝试从损坏的 bzip 压缩文件中恢复数据</para>
          <indexterm zone="ch-system-bzip2 bzip2recover" significance="normal">
            <primary sortas="b-bzip2recover">bzip2recover</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzless">
        <term><command moreinfo="none">bzless</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">less</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzless" significance="normal">
            <primary sortas="b-bzless">bzless</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bzmore">
        <term><command moreinfo="none">bzmore</command></term>
        <listitem>
          <para>对 bzip 压缩的文件运行 <command moreinfo="none">more</command> 命令</para>
          <indexterm zone="ch-system-bzip2 bzmore" significance="normal">
            <primary sortas="b-bzmore">bzmore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libbz2">
        <term><filename class="libraryfile" moreinfo="none">libbz2</filename></term>
        <listitem>
          <para>用 Burrows-Wheeler 算法实现的无损的块排序数据压缩库</para>
          <indexterm zone="ch-system-bzip2 libbz2" significance="normal">
            <primary sortas="c-libbz2">libbz2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-pkgconfig" role="wrap">
  <?dbhtml filename="pkg-config.html"?>

  

  <title>Pkg-config-0.29.2</title>

  <indexterm zone="ch-system-pkgconfig" significance="normal">
    <primary sortas="a-pkgconfig">Pkgconfig</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>pkg-config 软件包包含一个在配置和 make 文件运行时把 include 路径和库路径传递给编译工具的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>30 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Pkg-config</title>

    <para>准备编译 Pkg-config：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr              \
            --with-internal-glib       \
            --disable-host-tool        \
            --docdir=/usr/share/doc/pkg-config-0.29.2</userinput></screen>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-internal-glib</parameter></term>
        <listitem>
          <para>这会让 pkg-config 使用它自己内部版本的 Glib，因为在 LFS 中没有可用的外部版本。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-host-tool</parameter></term>
        <listitem>
          <para>此选项取消创建到 pkg-config 程序的不必要的硬链接。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令检查结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-pkgconfig" role="content">
    <title>pkg-config 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的软件</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>pkg-config</seg>
        <seg>/usr/share/doc/pkg-config-0.29.2</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="pkgconfig">
         <!-- Don't remove the extra space, it prevents a FOP warning. -->
        <term><command moreinfo="none">pkg-config </command></term>
        <listitem>
          <para>返回指定库或软件包的元信息</para>
          <indexterm zone="ch-system-pkgconfig pkgconfig" significance="normal">
            <primary sortas="b-pkgconfig">pkg-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-ncurses" role="wrap">
  <?dbhtml filename="ncurses.html"?>

  

  <title>Ncurses-6.1</title>

  <indexterm zone="ch-system-ncurses" significance="normal">
    <primary sortas="a-Ncurses">Ncurses</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Ncurses 软件包包含用于不依赖于特定终端的字符屏幕处理的库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>42 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Ncurses</title>

    <para>不要安装静态库，它不受配置控制：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in</userinput></screen>

    <para>准备编译 Ncurses：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr           \
            --mandir=/usr/share/man \
            --with-shared           \
            --without-debug         \
            --without-normal        \
            --enable-pc-files       \
            --enable-widec</userinput></screen>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-widec</parameter></term>
        <listitem>
          <para>这个选项会编译宽字符库（例如 <filename class="libraryfile" moreinfo="none">libncursesw.so.6.1</filename>）来代替普通字符库（例如 <filename class="libraryfile" moreinfo="none">libncurses.so.6.1</filename>）。宽字符库可用于多字节和传统的 8 位本地字符，而常规的库只能用于 8 位本地字符。宽字符库和常规的库是源文件兼容的，而不是二进制文件兼容的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-pc-files</parameter></term>
        <listitem>
          <para>该选项为 pkg-config 生成和安装 .pc 文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--without-normal</parameter></term>
        <listitem>
          <para>该选项用于禁用构建和安装大多数的静态库。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包有个测试套件，但只能在安装完软件包后运行。测试程序在 <filename class="directory" moreinfo="none">test/</filename> 目录中。查看该目录中的 <filename moreinfo="none">README</filename> 文件获取更详细信息。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>移动共享库到期望的 <filename class="directory" moreinfo="none">/lib</filename> 文件夹：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libncursesw.so.6* /lib</userinput></screen>

    <para>由于库已经被移走了，符号链接指向了一个不存在的文件。重建符号链接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sfv ../../lib/$(readlink /usr/lib/libncursesw.so) /usr/lib/libncursesw.so</userinput></screen>

    <para>很多应用程序仍然希望编辑器能找到非宽字符的 Ncurses 库。通过符号链接和链接器脚本欺骗这样的应用链接到宽字符库：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">for lib in ncurses form panel menu ; do
    rm -vf                    /usr/lib/lib${lib}.so
    echo "INPUT(-l${lib}w)" &gt; /usr/lib/lib${lib}.so
    ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
done</userinput></screen>

    <para>最后，确保在编译时会查找 <filename class="libraryfile" moreinfo="none">-lcurses</filename> 的旧应用程序仍然可以编译：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">rm -vf                     /usr/lib/libcursesw.so
echo "INPUT(-lncursesw)" &gt; /usr/lib/libcursesw.so
ln -sfv libncurses.so      /usr/lib/libcurses.so</userinput></screen>

    <para>如果需要的话，安装 Ncurses 的帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mkdir -v       /usr/share/doc/ncurses-6.1
cp -v -R doc/* /usr/share/doc/ncurses-6.1</userinput></screen>

    <note>

      <para>上面的指令并不会创建非宽字符 Ncurses 库，因为没有从源文件中编译安装的软件包会在运行时链接它们。然而，已知的仅有二进制应用程序并能链接到非等宽字符的库，需要第 5 版的支持。如果你由于一些仅有二进制的应用程序或要和 LSB 兼容而必须要有这样的库，用下面的命令重新编译软件包：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">make distclean
./configure --prefix=/usr    \
            --with-shared    \
            --without-normal \
            --without-debug  \
            --without-cxx-binding \
            --with-abi-version=5 
make sources libs
cp -av lib/lib*.so.5* /usr/lib</userinput></screen>
    </note>

  </sect2>

  <sect2 id="contents-ncurses" role="content">
    <title>Ncurses 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>
           captoinfo (链接到 tic), 
           clear, 
           infocmp, 
           infotocap (链接到 tic),
           ncursesw6-config,
           reset (链接到 tset), 
           tabs, 
           tic, 
           toe, 
           tput, 和 
           tset
        </seg>
        <seg>
           libcursesw.so (到 libncursesw.so 的符号链接和链接器脚本),
           libformw.so, 
           libmenuw.so, 
           libncursesw.so,
           libncurses++w.a,
           libpanelw.so, 以及库名称中没有「w」的对应的非宽字符部分。</seg>
        <seg>
           /usr/share/tabset, 
           /usr/share/terminfo, 和
           /usr/share/doc/ncurses-6.1
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="captoinfo">
        <term><command moreinfo="none">captoinfo</command></term>
        <listitem>
          <para>转换 termcap 描述为 terminfo 描述</para>
          <indexterm zone="ch-system-ncurses captoinfo" significance="normal">
            <primary sortas="b-captoinfo">captoinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="clear">
        <term><command moreinfo="none">clear</command></term>
        <listitem>
          <para>如果可以的话清空屏幕</para>
          <indexterm zone="ch-system-ncurses clear" significance="normal">
            <primary sortas="b-clear">clear</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="infocmp">
        <term><command moreinfo="none">infocmp</command></term>
        <listitem>
          <para>比较或输出 terminfo 描述</para>
          <indexterm zone="ch-system-ncurses infocmp" significance="normal">
            <primary sortas="b-infocmp">infocmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="infotocap">
        <term><command moreinfo="none">infotocap</command></term>
        <listitem>
          <para>转换 terminfo 描述为 termcap 描述</para>
          <indexterm zone="ch-system-ncurses infotocap" significance="normal">
            <primary sortas="b-infotocap">infotocap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ncursesw6-config">
        <term><command moreinfo="none">ncursesw6-config</command></term>
        <listitem>
          <para>P为 ncurses 提供配置信息</para>
          <indexterm zone="ch-system-ncurses ncursesw6-config" significance="normal">
            <primary sortas="b-ncursesw6-config">ncursesw6-config</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="reset">
        <term><command moreinfo="none">reset</command></term>
        <listitem>
          <para>重新初始化终端为默认设置</para>
          <indexterm zone="ch-system-ncurses reset" significance="normal">
            <primary sortas="b-reset">reset</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tabs">
        <term><command moreinfo="none">tabs</command></term>
        <listitem>
          <para>清空终端并设置制表符长度</para>
          <indexterm zone="ch-system-ncurses tabs" significance="normal">
            <primary sortas="b-tabs">tabs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tic">
        <term><command moreinfo="none">tic</command></term>
        <listitem>
          <para>将 terminfo 文件从源文件格式转换到二进制格式的 terminfo 条目描述编译器需要 ncurses 例程 [terminfo 文件包含特定终端的功能信息]</para>
          <indexterm zone="ch-system-ncurses tic" significance="normal">
            <primary sortas="b-tic">tic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="toe">
        <term><command moreinfo="none">toe</command></term>
        <listitem>
          <para>列出所有可用的终端类型，给出每个主名称和描述</para>
          <indexterm zone="ch-system-ncurses toe" significance="normal">
            <primary sortas="b-toe">toe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tput">
        <term><command moreinfo="none">tput</command></term>
        <listitem>
          <para>可以在 shell 中使用终端特定的功能值；也可用来重置或初始化终端或者报告它的完整名称</para>
          <indexterm zone="ch-system-ncurses tput" significance="normal">
            <primary sortas="b-tput">tput</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tset">
        <term><command moreinfo="none">tset</command></term>
        <listitem>
          <para>可以用来初始化终端</para>
          <indexterm zone="ch-system-ncurses tset" significance="normal">
            <primary sortas="b-tset">tset</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcursesw">
        <term><filename class="libraryfile" moreinfo="none">libcursesw</filename></term>
        <listitem>
          <para>到 <filename moreinfo="none">libncursesw</filename> 的链接</para>
          <indexterm zone="ch-system-ncurses libcursesw" significance="normal">
            <primary sortas="c-libcursesw">libcursesw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libncursesw">
        <term><filename class="libraryfile" moreinfo="none">libncursesw</filename></term>
        <listitem>
          <para>包含在一个终端屏幕以多种复杂方式显示文本的函数；使用这些功能的一个好的例子是内核 <command moreinfo="none">make menuconfig</command> 时的菜单显示</para>
          <indexterm zone="ch-system-ncurses libncursesw" significance="normal">
            <primary sortas="c-libncursesw">libncursesw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libformw">
        <term><filename class="libraryfile" moreinfo="none">libformw</filename></term>
        <listitem>
          <para>包含实现表单的函数</para>
          <indexterm zone="ch-system-ncurses libformw" significance="normal">
            <primary sortas="c-libformw">libformw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmenuw">
        <term><filename class="libraryfile" moreinfo="none">libmenuw</filename></term>
        <listitem>
          <para>包含实现菜单的函数</para>
          <indexterm zone="ch-system-ncurses libmenuw" significance="normal">
            <primary sortas="c-libmenuw">libmenuw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libpanelw">
        <term><filename class="libraryfile" moreinfo="none">libpanelw</filename></term>
        <listitem>
          <para>包含实现面板的函数</para>
          <indexterm zone="ch-system-ncurses libpanelw" significance="normal">
            <primary sortas="c-libpanelw">libpanelw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-attr" role="wrap">
  <?dbhtml filename="attr.html"?>

  

  <title>Attr-2.4.48</title>

  <indexterm zone="ch-system-attr" significance="normal">
    <primary sortas="a-Attr">Attr</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>attr 软件包包含管理文件系统对象的扩展属性的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>4.2 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Attr</title>

    <para>准备编译 Attr：</para>



<screen revision="systemd" format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr     \
            --disable-static  \
            --sysconfdir=/etc \
            --docdir=/usr/share/doc/attr-2.4.48</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>测试需要在支持扩展属性的文件系统上运行，例如 ext2、ext3、或者 ext4。如果同时运行多个测试会导致测试失败（-j 选项大于 1）。输入命令检查结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>需要移动共享库到 <filename class="directory" moreinfo="none">/lib</filename>，因此需要重建 <filename class="extension" moreinfo="none">.so</filename> 中的 <filename class="directory" moreinfo="none">/usr/lib</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libattr.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libattr.so) /usr/lib/libattr.so</userinput></screen>

  </sect2>

  <sect2 id="contents-attr" role="content">
    <title>Attr 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>attr, getfattr, 和 setfattr</seg>
        <seg>libattr.so</seg>
        <seg>/usr/include/attr 和 /usr/share/doc/attr-2.4.48</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="attr">
        <term><command moreinfo="none">attr</command></term>
        <listitem>
          <para>扩展文件系统对象的属性</para>
          <indexterm zone="ch-system-attr attr" significance="normal">
            <primary sortas="b-attr">attr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getfattr">
        <term><command moreinfo="none">getfattr</command></term>
        <listitem>
          <para>获取文件系统对象的扩展属性</para>
          <indexterm zone="ch-system-attr getfattr" significance="normal">
            <primary sortas="b-getfattr">getfattr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setfattr">
        <term><command moreinfo="none">setfattr</command></term>
        <listitem>
          <para>设置文件系统对象的扩展属性</para>
          <indexterm zone="ch-system-attr setfattr" significance="normal">
            <primary sortas="b-setfattr">setfattr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libattr">
        <term><filename class="libraryfile" moreinfo="none">libattr</filename></term>
        <listitem>
          <para>包含管理扩展属性的库函数</para>
          <indexterm zone="ch-system-attr libattr" significance="normal">
            <primary sortas="c-libattr">libattr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-acl" role="wrap">
  <?dbhtml filename="acl.html"?>

  

  <title>Acl-2.2.53</title>

  <indexterm zone="ch-system-acl" significance="normal">
    <primary sortas="a-Acl">Acl</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Acl 软件包包含管理访问控制列表的工具，访问控制列表用于定义文件和目录更细粒度的自定义访问权限。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>6.4 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Acl</title>

    <para>准备编译 Acl：</para>



<screen revision="systemd" format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr         \
            --disable-static      \
            --libexecdir=/usr/lib \
            --docdir=/usr/share/doc/acl-2.2.53</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>在用 Acl 库构建 <application moreinfo="none">Coreutils</application> 后，Acl 测试才能在支持访问控制的文件系统上运行。如果需要的话，可以在本章后面构建完 <application moreinfo="none">Coreutils</application> 之后回到这个软件包运行 <command moreinfo="none">make check</command> 进行测试。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>需要移动共享库到 <filename class="directory" moreinfo="none">/lib</filename>，因此需要重建 <filename class="directory" moreinfo="none">/usr/lib</filename>  中的 <filename class="extension" moreinfo="none">.so</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libacl.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libacl.so) /usr/lib/libacl.so</userinput></screen>

  </sect2>

  <sect2 id="contents-acl" role="content">
    <title>Acl 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>chacl, getfacl, 和 sefacl</seg>
        <seg>libacl.so</seg>
        <seg>/usr/include/acl 和 /usr/share/doc/acl-2.2.53</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="chacl">
        <term><command moreinfo="none">chacl</command></term>
        <listitem>
          <para>更改文件或目录的访问控制列表</para>
          <indexterm zone="ch-system-acl chacl" significance="normal">
            <primary sortas="b-chacl">chacl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getfacl">
        <term><command moreinfo="none">getfacl</command></term>
        <listitem>
          <para>获取文件访问控制列表</para>
          <indexterm zone="ch-system-acl getfacl" significance="normal">
            <primary sortas="b-getfacl">getfacl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sefacl">
        <term><command moreinfo="none">sefacl</command></term>
        <listitem>
          <para>设置文件访问控制列表</para>
          <indexterm zone="ch-system-acl sefacl" significance="normal">
            <primary sortas="b-setacl">sefacl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libacl">
        <term><filename class="libraryfile" moreinfo="none">libacl</filename></term>
        <listitem>
          <para>包括用于管理访问控制列表的库函数</para>
          <indexterm zone="ch-system-acl libacl" significance="normal">
            <primary sortas="c-libacl">libacl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-libcap" role="wrap">
  <?dbhtml filename="libcap.html"?>

  

  <title>Libcap-2.26</title>

  <indexterm zone="ch-system-libcap" significance="normal">
    <primary sortas="a-Libcap">Libcap</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libcap 软件包实现了可用在 Linux 内核上的对 POSIX 1003.1e 功能的用户空间接口。这些功能将所有强大 root 权限划分为不同的权限组合。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>1.4 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Libcap</title>

    <para>避免安装静态库：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/install.*STALIBNAME/d' libcap/Makefile</userinput></screen>

    <para>编译软件包</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>这个软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make RAISE_SETFCAP=no lib=lib prefix=/usr install
chmod -v 755 /usr/lib/libcap.so.2.26</userinput></screen>

    <variablelist>
      <title>make 选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">RAISE_SETFCAP=no</parameter></term>
        <listitem>
          <para>这个选项跳过尝试对自身使用 <command moreinfo="none">setcap</command>。这可以避免内核或文件系统不支持扩展功能时出现安装错误。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">lib=lib</parameter></term>
        <listitem>
          <para>此参数用于在 x86_64 位系统中，将库文件安装到 <filename moreinfo="none">$prefix/lib</filename>
		  而不是 <filename moreinfo="none">$prefix/lib64</filename>。此参数不影响 x86 系统。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>需要移动共享库到 <filename class="directory" moreinfo="none">/lib</filename>，因此需要重建 <filename class="directory" moreinfo="none">/usr/lib</filename> 中的 <filename class="extension" moreinfo="none">.so</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libcap.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libcap.so) /usr/lib/libcap.so</userinput></screen>

  </sect2>

  <sect2 id="contents-libcap" role="content">
    <title>Libcap 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>capsh, getcap, getpcaps, 和 setcap</seg>
        <seg>libcap.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="capsh">
        <term><command moreinfo="none">capsh</command></term>
        <listitem>
          <para>使用和控制功能支持的 shell 封装</para>
          <indexterm zone="ch-system-libcap capsh" significance="normal">
            <primary sortas="b-capsh">capsh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getcap">
        <term><command moreinfo="none">getcap</command></term>
        <listitem>
          <para>检查文件功能</para>
          <indexterm zone="ch-system-libcap getcap" significance="normal">
            <primary sortas="b-getcap">getcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getpcaps">
        <term><command moreinfo="none">getpcaps</command></term>
        <listitem>
          <para>显示查询进程的功能</para>
          <indexterm zone="ch-system-libcap getpcaps" significance="normal">
            <primary sortas="b-getpcaps">getpcaps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setcap">
        <term><command moreinfo="none">setcap</command></term>
        <listitem>
          <para>设置文件的容量</para>
          <indexterm zone="ch-system-libcap setcap" significance="normal">
            <primary sortas="b-setcap">setcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcap">
        <term><filename class="libraryfile" moreinfo="none">libcap</filename></term>
        <listitem>
          <para>包括用于管理 POSIX 1003.1e 功能的库函数</para>
          <indexterm zone="ch-system-libcap libcap" significance="normal">
            <primary sortas="c-libcap">libcap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-sed" role="wrap">
  <?dbhtml filename="sed.html"?>

  

  <title>Sed-4.7</title>

  <indexterm zone="ch-system-sed" significance="normal">
    <primary sortas="a-Sed">Sed</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Sed 软件包包含一个流编辑器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>32 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Sed</title>

    <para>首先修复 LFS 环境中的问题，然后移除一个失败的测试：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/usr/tools/'                 build-aux/help2man
sed -i 's/testsuite.panic-tests.sh//' Makefile.in</userinput></screen>

    <para>准备编译 Sed：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --bindir=/bin</userinput></screen>
<!--
    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter>-i -htmldir</parameter></term>
        <listitem>
          <para>为 HTML 文档指定安装目录。</para>
        </listitem>
      </varlistentry>
    </variablelist>
-->
    <para>编译软件包并生成 HTML 文档：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make
make html</userinput></screen>

    <para>输入命令查看结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包和它的文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
install -d -m755           /usr/share/doc/sed-4.7
install -m644 doc/sed.html /usr/share/doc/sed-4.7</userinput></screen>

  </sect2>

  <sect2 id="contents-sed" role="content">
    <title>Sed 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>sed</seg>
        <seg>/usr/share/doc/sed-4.7</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="sed">
        <term><command moreinfo="none">sed</command></term>
        <listitem>
          <para>过滤器，一次性转换文本文件</para>
          <indexterm zone="ch-system-sed sed" significance="normal">
            <primary sortas="b-sed">sed</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-psmisc" role="wrap">
  <?dbhtml filename="psmisc.html"?>

  

  <title>Psmisc-23.2</title>

  <indexterm zone="ch-system-psmisc" significance="normal">
    <primary sortas="a-Psmisc">Psmisc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Psmisc 软件包包含用于显示运行中进程信息的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>4.5 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Psmisc</title>

    <para>准备编译 Psmisc：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>最后，将程序 <command moreinfo="none">killall</command> 和 <command moreinfo="none">fuser</command> 移动到 FHS 指定的位置：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/fuser   /bin
mv -v /usr/bin/killall /bin</userinput></screen>

  </sect2>

  <sect2 id="contents-psmisc" role="content">
    <title>Psmisc 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>fuser, killall, peekfd, prtstat, pstree, 和 pstree.x11 (链接到 pstree)</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="fuser">
        <term><command moreinfo="none">fuser</command></term>
        <listitem>
          <para>报告使用指定文件或文件系统的进程的进程 ID（PID）</para>
          <indexterm zone="ch-system-psmisc fuser" significance="normal">
            <primary sortas="b-fuser">fuser</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="killall">
        <term><command moreinfo="none">killall</command></term>
        <listitem>
          <para>根据名称杀死进程；它发送信号到所有的运行任何给定命令的进程</para>
          <indexterm zone="ch-system-psmisc killall" significance="normal">
            <primary sortas="b-killall">killall</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="peekfd">
        <term><command moreinfo="none">peekfd</command></term>
        <listitem>
          <para>根据 PID 查看正在运行进程的文件描述符</para>
          <indexterm zone="ch-system-psmisc peekfd" significance="normal">
            <primary sortas="b-peekfd">peekfd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="prtstat">
        <term><command moreinfo="none">prtstat</command></term>
        <listitem>
          <para>打印关于某个进程的信息</para>
          <indexterm zone="ch-system-psmisc prtstat" significance="normal">
            <primary sortas="b-prtstat">prtstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pstree">
        <term><command moreinfo="none">pstree</command></term>
        <listitem>
          <para>以树形结构显示运行中的进程</para>
          <indexterm zone="ch-system-psmisc pstree" significance="normal">
            <primary sortas="b-pstree">pstree</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pstree.x11">
        <term><command moreinfo="none">pstree.x11</command></term>
        <listitem>
          <para>和 <command moreinfo="none">pstree</command> 命令相同，但退出时它会等待确认</para>
          <indexterm zone="ch-system-psmisc pstree.x11" significance="normal">
            <primary sortas="b-pstree.x11">pstree.x11</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-iana-etc" role="wrap">
  <?dbhtml filename="iana-etc.html"?>

  

  <title>Iana-Etc-2.30</title>

  <indexterm zone="ch-system-iana-etc" significance="normal">
    <primary sortas="a-Iana-Etc">Iana-Etc</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Iana-Etc 软件包为网络服务和协议提供数据。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>2.3 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Iana-Etc</title>

    <para>下面的命令将 IANA 提供的原始数据转换为 <filename moreinfo="none">/etc/protocols</filename> 和 <filename moreinfo="none">/etc/services</filename> 数据文件的正确格式：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-iana-etc" role="content">
    <title>Iana-Etc 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>

      <seglistitem>
        <seg>/etc/protocols 和 /etc/services</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="protocols">
        <term><filename moreinfo="none">/etc/protocols</filename></term>
        <listitem>
          <para>描述 TCP/IP 子系统中可用的多种 DARPA 网络协议</para>
          <indexterm zone="ch-system-iana-etc" significance="normal">
            <primary sortas="e-/etc/protocols">/etc/protocols</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="services">
        <term><filename moreinfo="none">/etc/services</filename></term>
        <listitem>
          <para>提供友好文本名称和背后分配的端口号以及协议类型之间的映射</para>
          <indexterm zone="ch-system-iana-etc" significance="normal">
            <primary sortas="e-/etc/services">/etc/services</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-bison" role="wrap">
  <?dbhtml filename="bison.html"?>

  

  <title>Bison-3.3.2</title>

  <indexterm zone="ch-system-bison" significance="normal">
    <primary sortas="a-Bison">Bison</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Bison 软件包包含一个语法生成器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>37 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bison</title>

    <para>准备编译 Bison：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --docdir=/usr/share/doc/bison-3.3.2</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

<!--
    <para>用以下命令测试结果（大约 2.2 SBU）：</para>

<screen><userinput remap="test">make check</userinput></screen>
-->

    <para>考虑到 bison 和 flex 的检查有循环依赖。如有需要，在下一节安装 flex 之后，可以使用 <command moreinfo="none">make check</command> 命令重新编译并检查 bison 软件包。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-bison" role="content">
    <title>Bison 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>bison 和 yacc</seg>
        <seg>liby.a</seg>
        <seg>/usr/share/bison</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bison">
        <term><command moreinfo="none">bison</command></term>
        <listitem>
          <para>根据一系列规则生成用于分析文本结构的程序；Bison 是 Yacc（Yet Another Compiler Compiler） 的替代品。</para>
          <indexterm zone="ch-system-bison bison" significance="normal">
            <primary sortas="b-bison">bison</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="yacc">
        <term><command moreinfo="none">yacc</command></term>
        <listitem>
          <para><command moreinfo="none">bison</command> 的封装，用于仍然调用 <command moreinfo="none">yacc</command> 而不是 <command moreinfo="none">bison</command> 的程序；它会调用带有 <parameter moreinfo="none">-y</parameter> 选项的 <command moreinfo="none">bison</command></para>
          <indexterm zone="ch-system-bison yacc" significance="normal">
            <primary sortas="b-yacc">yacc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liby">
        <term><filename class="libraryfile" moreinfo="none">liby</filename></term>
        <listitem>
          <para>Yacc 库包含和 Yacc 兼容的 <function moreinfo="none">yyerror</function> 和 <function moreinfo="none">main</function> 程序的实现；这个库并不是很有用，但是 POSIX 要求有它</para>
          <indexterm zone="ch-system-bison liby" significance="normal">
            <primary sortas="c-liby">liby</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-flex" role="wrap">
  <?dbhtml filename="flex.html"?>

  

  <title>Flex-2.6.4</title>

  <indexterm zone="ch-system-flex" significance="normal">
    <primary sortas="a-Flex">Flex</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Flex 软件包包括一个用于生成识别文本模式的程序的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.4 SBU</seg>
        <seg>35 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Flex</title>

    <para>首先，修复一个 glibc-2.26 引入的问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i "/math.h/a #include &lt;malloc.h&gt;" src/flexdef.h</userinput></screen>

    <para>构建过程假设能使用程序 <application moreinfo="none">help2man</application> 的 --help 选项来创建 man 手册。但这显然是不存在的，所以我们使用环境变量来跳过这步。现在，准备编译 Flex：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">HELP2MAN=/tools/bin/true \
./configure --prefix=/usr --docdir=/usr/share/doc/flex-2.6.4</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果（大约 0.5 SBU）：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>一些程序还不知道 <command moreinfo="none">flex</command> 并尝试运行它的预处理器 <command moreinfo="none">lex</command>。为了支持这些程序，创建以 <filename moreinfo="none">lex</filename> 仿真模式运行 <filename moreinfo="none">flex</filename> 的符号链接 <command moreinfo="none">lex</command>：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv flex /usr/bin/lex</userinput></screen>

  </sect2>

  <sect2 id="contents-flex" role="content">
    <title>Flex 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>flex, flex++ (链接到 flex), 和 lex (链接到 flex)</seg>
        <seg>libfl.so</seg>
        <seg>/usr/share/doc/flex-2.6.4</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="flex">
        <term><command moreinfo="none">flex</command></term>
        <listitem>
          <para>一个用于生成能识别文本模式程序的工具；它允许指定多种用于模式发现的规则，从而消除了开发专门程序的需要</para>
          <indexterm zone="ch-system-flex flex" significance="normal">
            <primary sortas="b-flex">flex</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="flexpp">
        <term><command moreinfo="none">flex++</command></term>
        <listitem>
          <para>flex 的扩展，用于生成 C++ 代码和类。是到 <command moreinfo="none">flex</command> 的符号链接</para>
          <indexterm zone="ch-system-flex flexpp" significance="normal">
            <primary sortas="b-flex++">flex++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lex">
        <term><command moreinfo="none">lex</command></term>
        <listitem>
          <para>一个以 <command moreinfo="none">flex</command> 仿真模式运行 <command moreinfo="none">lex</command> 的符号链接。</para>
          <indexterm zone="ch-system-flex lex" significance="normal">
            <primary sortas="b-lex">lex</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libfl">
        <term><filename class="libraryfile" moreinfo="none">libfl</filename></term>
        <listitem>
          <para><filename class="libraryfile" moreinfo="none">flex</filename> 库</para>
          <indexterm zone="ch-system-flex libfl" significance="normal">
            <primary sortas="c-libfl">libfl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-grep" role="wrap">
  <?dbhtml filename="grep.html"?>

  

  <title>Grep-3.3</title>

  <indexterm zone="ch-system-grep" significance="normal">
    <primary sortas="a-Grep">Grep</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Grep 软件包包含用于在文件中搜索的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.4 SBU</seg>
        <seg>37 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Grep</title>

    <para>准备编译 Grep ：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --bindir=/bin</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make -k check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-grep" role="content">
    <title>Grep 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>egrep, fgrep, 和 grep</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="egrep">
        <term><command moreinfo="none">egrep</command></term>
        <listitem>
          <para>打印匹配扩展正则表达式的行</para>
          <indexterm zone="ch-system-grep egrep" significance="normal">
            <primary sortas="b-egrep">egrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fgrep">
        <term><command moreinfo="none">fgrep</command></term>
        <listitem>
          <para>打印匹配固定字符串列表的行</para>
          <indexterm zone="ch-system-grep fgrep" significance="normal">
            <primary sortas="b-fgrep">fgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grep">
        <term><command moreinfo="none">grep</command></term>
        <listitem>
          <para>打印匹配基本正则表达式的行</para>
          <indexterm zone="ch-system-grep grep" significance="normal">
            <primary sortas="b-grep">grep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-bash" role="wrap">
  <?dbhtml filename="bash.html"?>

  

  <title>Bash-5.0</title>

  <indexterm zone="ch-system-bash" significance="normal">
    <primary sortas="a-Bash">Bash</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Bash 软件包包含 Bourne-Again Shell。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.7 SBU</seg>
        <seg>62 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bash</title>
<!--
    <para>合并一些上游的修正：</para>

<screen><userinput remap="pre">patch -Np1 -i ../&bash-fixes-patch;</userinput></screen>
-->
    <para>准备编译 Bash：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr                    \
            --docdir=/usr/share/doc/bash-5.0 \
            --without-bash-malloc            \
            --with-installed-readline</userinput></screen>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-installed-readline</parameter></term>
        <listitem>
          <para>该选项告诉 Bash 使用系统中已经安装的 <filename class="libraryfile" moreinfo="none">readline</filename> 库而不是使用自带的 readline 版本。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>如果不需要运行测试套件的话跳转到「安装软件包」。</para>

    <para>准备测试，确保 <systemitem class="username" moreinfo="none">nobody</systemitem> 用户可以写源文件树：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">chown -Rv nobody .</userinput></screen>

    <para>现在，以 <systemitem class="username" moreinfo="none">nobody</systemitem> 用户身份运行测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">su nobody -s /bin/bash -c "PATH=$PATH HOME=/home make tests"</userinput></screen>

    <para>安装软件包并将主要的可执行文件移动至 <filename class="directory" moreinfo="none">/bin</filename>：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
mv -vf /usr/bin/bash /bin</userinput></screen>

    <para>运行新编译的 <command moreinfo="none">bash</command> 程序（替换正在运行的那个）：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">exec /bin/bash --login +h</userinput></screen>

    <note>
      <para>参数使 <command moreinfo="none">bash</command> 进程成为一个可交互的登录 shell 并停用散列使得新程序可用的时候就能发现。</para>
    </note>

  </sect2>

  <sect2 id="contents-bash" role="content">
    <title>Bash 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>bash, bashbug, 和 sh (链接到 bash)</seg>
        <seg>/usr/share/doc/bash-5.0</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bash">
        <term><command moreinfo="none">bash</command></term>
        <listitem>
          <para>广泛使用的命令解释器；在执行一个命令之前进行多种扩展和替换，使得该解释器成为一个强大的工具</para>
          <indexterm zone="ch-system-bash bash" significance="normal">
            <primary sortas="b-bash">bash</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="bashbug">
        <term><command moreinfo="none">bashbug</command></term>
        <listitem>
          <para>一个 shell 脚本，用于帮助用户撰写和发送标准格式的关于 <command moreinfo="none">bash</command> 的 bug 报告邮件</para>
          <indexterm zone="ch-system-bash bashbug" significance="normal">
            <primary sortas="b-bashbug">bashbug</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sh">
        <term><command moreinfo="none">sh</command></term>
        <listitem>
          <para>到<command moreinfo="none">bash</command> 程序的符号链接；当以 <command moreinfo="none">sh</command> 调用时，在符合 POSIX 标准的情况下，<command moreinfo="none">bash</command> 尽可能地模仿历史版本上 <command moreinfo="none">sh</command> 的启动过程</para>
          <indexterm zone="ch-system-bash sh" significance="normal">
            <primary sortas="b-sh">sh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-libtool" role="wrap">
  <?dbhtml filename="libtool.html"?>

  

  <title>Libtool-2.4.6</title>

  <indexterm zone="ch-system-libtool" significance="normal">
    <primary sortas="a-Libtool">Libtool</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libtool 软件包包含 GNU 通用库支持脚本。它用一致的、可移植的接口封装复杂的共享库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.5 SBU</seg>
        <seg>43 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Libtool</title>

    <para>准备编译 Libtool：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果(大约 11.0 SBU)：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <note><para>在具有多个内核的系统上，libtool 的测试时间可以显著削减。为此，请在上面那行命令中添加 <command moreinfo="none">TESTSUITEFLAGS=-j&lt;N&gt;</command>。例如，使用 -j4 或将减少 60% 的测试时间。</para></note>

    <para>在 LFS 构建环境中已知有五个测试由于循环依赖会失败，但如果安装完 automake 之后重新检查，所有测试就都能通过。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 id="contents-libtool" role="content">
    <title>Libtool 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>libtool 和 libtoolize</seg>
        <seg>libltdl.so</seg>
        <seg>/usr/include/libltdl 和 /usr/share/libtool</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libtool">
        <term><command moreinfo="none">libtool</command></term>
        <listitem>
          <para>提供通用库编译支持服务</para>
          <indexterm zone="ch-system-libtool libtool" significance="normal">
            <primary sortas="b-libtool">libtool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtoolize">
        <term><command moreinfo="none">libtoolize</command></term>
        <listitem>
          <para>提供添加 <command moreinfo="none">libtool</command> 支持到软件包的一个标准方法</para>
          <indexterm zone="ch-system-libtool libtoolize" significance="normal">
            <primary sortas="b-libtoolize">libtoolize</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libltdl">
        <term><filename class="libraryfile" moreinfo="none">libltdl</filename></term>
        <listitem>
          <para>埋藏 dlopen 库的诸多难处</para>
          <indexterm zone="ch-system-libtool libltdl" significance="normal">
            <primary sortas="c-libltdl">libltdl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gdbm" role="wrap">
  <?dbhtml filename="gdbm.html"?>

  

  <title>GDBM-1.18.1</title>

  <indexterm zone="ch-system-gdbm" significance="normal">
    <primary sortas="a-Gdbm">GDBM</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GDBM 软件包包含 GNU 数据库管理器。是使用扩展散列，工作方法和标准 UNIX dbm 类似的数据库函数库。该库提供存储键/数据对、通过键搜索和检索数据、以及删除键和数据的原语。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>11 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GDBM</title>

    <para>准备编译 GDBM：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --enable-libgdbm-compat</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><envar>--enable-libgdbm-compat</envar></term>
        <listitem>
          <para>该选项启用编译 libgdbm 兼容性库，因为一些 LFS 之外的软件包可能需要它提供的旧的 DBM 例程。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-gdbm" role="content">
    <title>GDBM 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>gdbm_dump, gdbm_load, 和 gdbmtool</seg>
        <seg>libgdbm.so 和 libgdbm_compat.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gdbm_dump">
        <term><command moreinfo="none">gdbm_dump</command></term>
        <listitem>
          <para>转储 GDBM 数据库到文件</para>
          <indexterm zone="ch-system-gdbm gdbm_dump" significance="normal">
            <primary sortas="b-gdbm_dump">gdbm_dump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdbm_load">
        <term><command moreinfo="none">gdbm_load</command></term>
        <listitem>
          <para>从转储文件重建一个 GDBM 数据库</para>
          <indexterm zone="ch-system-gdbm gdbm_load" significance="normal">
            <primary sortas="b-gdbm_load">gdbm_load</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdbmtool">
        <term><command moreinfo="none">gdbmtool</command></term>
        <listitem>
          <para>测试和更改 GDBM 数据库</para>
          <indexterm zone="ch-system-gdbm gdbmtool" significance="normal">
            <primary sortas="b-gdbmtool">gdbmtool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgdbm">
        <term><filename class="libraryfile" moreinfo="none">libgdbm</filename></term>
        <listitem>
          <para>包含操作散列数据库的函数</para>
          <indexterm zone="ch-system-gdbm libgdbm" significance="normal">
            <primary sortas="c-libgdbm">libgdbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgdbm_compat">
        <term><filename class="libraryfile" moreinfo="none">libgdbm_compat</filename></term>
        <listitem>
          <para>包含旧的 DBM 函数的兼容性库</para>
          <indexterm zone="ch-system-gdbm libgdbm_compat" significance="normal">
            <primary sortas="c-libgdbm_compat">libgdbm_compat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gperf" role="wrap">
  <?dbhtml filename="gperf.html"?>

  

  <title>Gperf-3.1</title>

  <indexterm zone="ch-system-gperf" significance="normal">
    <primary sortas="a-Gperf">Gperf</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Gperf 为键集合生成完美的哈希函数。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>6.3 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gperf</title>

    <para>准备编译 Gperf：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --docdir=/usr/share/doc/gperf-3.1</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该测试已知在运行多任务同时测试（即 -j 选项大于 1）时会失败。用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make -j1 check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-gperf" role="content">
    <title>Gperf 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>gperf</seg>
        <seg>/usr/share/doc/gperf-3.1</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍
</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gperf">
        <term><command moreinfo="none">gperf</command></term>
        <listitem>
          <para>为键集合生成完美哈希</para>
          <indexterm zone="ch-system-gperf gperf" significance="normal">
            <primary sortas="b-gperf">gperf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-expat" role="wrap">
  <?dbhtml filename="expat.html"?>

  

  <title>Expat-2.2.6</title>

  <indexterm zone="ch-system-expat" significance="normal">
    <primary sortas="a-Expat">Expat</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Expat 软件包包含一个用于解析 XML 的面向流的 C 库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>11 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Expat</title>

    <para>首先修复一个 LFS 环境中，回归测试的问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's|usr/bin/env |bin/|' run.sh.in</userinput></screen>

    <para>准备编译 Expat：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/expat-2.2.6</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>如果需要的话，安装帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -v -m644 doc/*.{html,png,css} /usr/share/doc/expat-2.2.6</userinput></screen>


  </sect2>

  <sect2 id="contents-expat" role="content">
    <title>Expat 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>xmlwf</seg>
        <seg>libexpat.so</seg>
        <seg>/usr/share/doc/expat-2.2.6</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="xmlwf">
        <term><command moreinfo="none">xmlwf </command></term>
        <listitem>
          <para>用于检查 XML 文档是否格式良好的非验证工具</para>
          <indexterm zone="ch-system-expat xmlwf" significance="normal">
            <primary sortas="b-xmlwf">xmlwf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libexpat">
        <term><filename class="libraryfile" moreinfo="none">libexpat</filename></term>
        <listitem>
          <para>包含用于解析 XML 的 API 函数</para>
          <indexterm zone="ch-system-expat libexpat" significance="normal">
            <primary sortas="c-libexpat">libexpat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-inetutils" role="wrap">
  <?dbhtml filename="inetutils.html"?>

  

  <title>Inetutils-1.9.4</title>

  <indexterm zone="ch-system-inetutils" significance="normal">
    <primary sortas="a-Inetutils">Inetutils</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Inetutils 软件包包含基本的网络程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>29 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Inetutils</title>

    <para>准备编译 Inetutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr        \
            --localstatedir=/var \
            --disable-logger     \
            --disable-whois      \
            --disable-rcp        \
            --disable-rexec      \
            --disable-rlogin     \
            --disable-rsh        \
            --disable-servers</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-logger</parameter></term>
        <listitem>
          <para>该选项防止 Inetutils 安装 <command moreinfo="none">logger</command> 程序，脚本使用该程序传递消息到系统日志守护进程。因为 Util-linux 安装了一个更新版本因此不能安装这个。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-whois</parameter></term>
        <listitem>
          <para>该选项禁用编译过时的 Inetutils <command moreinfo="none">whois</command> 客户端。BLFS 指南中有更好的 <command moreinfo="none">whois</command> 客户端说明。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-r*</parameter></term>
        <listitem>
          <para>为了安全，该参数使编译过时的程序不能被使用。提供该功能的程序在手册 BLFS 中的 <application moreinfo="none">openssh</application> 会有所提及。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-servers</parameter></term>
        <listitem>
          <para>禁用安装作为 Inetutils 软件包一部分的多种网络服务程序。这些服务程序被认为不适用于基础的 LFS 系统。其中的一些本来就不安全，或者说仅在可信网络中才被认为安全。注意这些服务程序有更好的可用替代品。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <note><para>测试 libls.sh 可能会在初始的 chroot 环境中失败，但是在 LFS 系统构建完成后重新运行就会通过了。测试 ping-localhost.sh 会因为宿主系统不支持 IPv6 而失败。</para></note>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>移动一些程序使得 <filename class="directory" moreinfo="none">/usr</filename> 在不可访问时仍保持可用：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/{hostname,ping,ping6,traceroute} /bin
mv -v /usr/bin/ifconfig /sbin</userinput></screen>

  </sect2>

  <sect2 id="contents-inetutils" role="content">
    <title>Inetutils 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>dnsdomainname, ftp, ifconfig, hostname, ping, ping6, 
        talk, telnet, tftp, 和 traceroute</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="dnsdomainname">
        <term><command moreinfo="none">dnsdomainname</command></term>
        <listitem>
        <para>显示系统的 DNS 域名</para>
        <indexterm zone="ch-system-inetutils dnsdomainname" significance="normal">
          <primary sortas="b-dnsdomainname">dnsdomainname</primary>
        </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ftp">
        <term><command moreinfo="none">ftp</command></term>
        <listitem>
        <para>简要介绍</para>
        <indexterm zone="ch-system-inetutils ftp" significance="normal">
          <primary sortas="b-ftp">ftp</primary>
        </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hostname">
        <term><command moreinfo="none">hostname</command></term>
        <listitem>
          <para>报告或设置主机名称</para>
          <indexterm zone="ch-system-inetutils hostname" significance="normal">
            <primary sortas="b-hostname">hostname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ifconfig">
        <term><command moreinfo="none">ifconfig</command></term>
        <listitem>
        <para>管理网络接口</para>
        <indexterm zone="ch-system-inetutils ifconfig" significance="normal">
          <primary sortas="b-ifconfig">ifconfig</primary>
        </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ping">
        <term><command moreinfo="none">ping</command></term>
        <listitem>
          <para>发送请求应答包并报告响应用时</para>
          <indexterm zone="ch-system-inetutils ping" significance="normal">
            <primary sortas="b-ping">ping</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ping6">
        <term><command moreinfo="none">ping6</command></term>
        <listitem>
          <para>用于 IPv6 网络的 <command moreinfo="none">ping</command> 版本</para>
          <indexterm zone="ch-system-inetutils ping6" significance="normal">
            <primary sortas="b-ping6">ping6</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="talk">
        <term><command moreinfo="none">talk</command></term>
        <listitem>
          <para>用于和另一个用户交互</para>
          <indexterm zone="ch-system-inetutils talk" significance="normal">
            <primary sortas="b-talk">talk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="telnet">
        <term><command moreinfo="none">telnet</command></term>
        <listitem>
          <para>TELNET 协议接口</para>
          <indexterm zone="ch-system-inetutils telnet" significance="normal">
            <primary sortas="b-telnet">telnet</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tftp">
        <term><command moreinfo="none">tftp</command></term>
        <listitem>
          <para>简单文件传输程序</para>
          <indexterm zone="ch-system-inetutils tftp" significance="normal">
            <primary sortas="b-tftp">tftp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="traceroute">
        <term><command moreinfo="none">traceroute</command></term>
        <listitem>
          <para>跟踪从你的工作主机发送到另一个网络上的主机的数据包通过的路径，显示中间通过的跳（网关）。</para>
          <indexterm zone="ch-system-inetutils traceroute" significance="normal">
            <primary sortas="b-traceroute">traceroute</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-perl" role="wrap">
  <?dbhtml filename="perl.html"?>

  

  <title>Perl-5.28.1</title>

  <indexterm zone="ch-system-perl" significance="normal">
    <primary sortas="a-Perl">Perl</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Perl 软件包包含实用信息抽取与报告语言。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>7.1 SBU</seg>
        <seg>274 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Perl</title>

    <para>首先创建其中一个 Perl 配置文件和可选测试套件引用的基本 <filename moreinfo="none">/etc/hosts</filename> 文件：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">echo "127.0.0.1 localhost $(hostname)" &gt; /etc/hosts</userinput></screen>

    <para>该版本的 Perl 会编译 Compress::Raw::Zlib 和 Compress::Raw::BZip2 模块。Perl 默认会使用内部的源码用于构建。用以下的命令使 Perl 使用系统中已安装的库：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">export BUILD_ZLIB=False
export BUILD_BZIP2=0</userinput></screen>
<!--
    <para>Apply a patch to allow the Errno.pm module and the h2ph
    program to build correctly when building with GCC 5:</para>

<screen><userinput remap="pre">patch -Np1 -i ../&perl-gcc5-fixes-patch;</userinput></screen>
-->
    <para>为了能完全控制 Perl 的设置，你可以在下面的命令中移除「-des」选项并手动设置编译该软件包的方式。相应的，用下面的命令来使用 Perl 自动检测到的默认值：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">sh Configure -des -Dprefix=/usr                 \
                  -Dvendorprefix=/usr           \
                  -Dman1dir=/usr/share/man/man1 \
                  -Dman3dir=/usr/share/man/man3 \
                  -Dpager="/usr/bin/less -isR"  \
                  -Duseshrplib                  \
                  -Dusethreads</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">-Dvendorprefix=/usr</parameter></term>
        <listitem>
          <para>这能确保 <command moreinfo="none">perl</command> 知道，该如何告知软件包应该将它们的 perl 模块安装在哪里。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dpager="/usr/bin/less -isR"</parameter></term>
        <listitem>
          <para>这能确保使用的是 <userinput moreinfo="none">less</userinput> 而非 <userinput moreinfo="none">more</userinput>。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dman1dir=/usr/share/man/man1
        -Dman3dir=/usr/share/man/man3</parameter></term>
        <listitem>
          <para>由于 Groff 还没有安装，<command moreinfo="none">Configure</command> 会认为我们不希望为 Perl 安装 man 手册。用这些参数更改这个判断。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Duseshrplib</parameter></term>
        <listitem>
          <para>构建某些 perl 模块需要的共享 libperl。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dusethreads</parameter></term>
        <listitem>
          <para>构建支持线程的 perl。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果（大概 11 SBU）：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make -k test</userinput></screen>

    <note><para>因为使用了最新的 gdbm 从而会导致一项测试失败。</para></note>

    <para>安装软件包并清理：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
unset BUILD_ZLIB BUILD_BZIP2</userinput></screen>

  </sect2>

  <sect2 id="contents-perl" role="content">
    <title>Perl 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>corelist, cpan, enc2xs, encguess, h2ph, h2xs, instmodsh,
        json_pp, libnetcfg, perl, perl5.28.1 (到 perl 的硬链接),
        perlbug, perldoc, perlivp, perlthanks (到 perlbug 的硬链接), piconv,
        pl2pm, pod2html, pod2man, pod2text, pod2usage, podchecker, podselect,
        prove, ptar, ptardiff, ptargrep, shasum,
        splain, xsubpp, 和 zipdetails</seg>
        <seg>过多，不能在这完整列出</seg>
        <seg>/usr/lib/perl5</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>
<!--
      <varlistentry id="c2ph">
        <term><command>c2ph</command></term>
        <listitem>
          <para>转储正如 <command>cc -g -S</command> 生成的 C 结构体</para>
          <indexterm zone="ch-system-perl c2ph">
            <primary sortas="b-c2ph">c2ph</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->
      <varlistentry id="corelist">
        <term><command moreinfo="none">corelist</command></term>
        <listitem>
          <para>Module::CoreList 的命令行前端</para>
          <indexterm zone="ch-system-perl corelist" significance="normal">
            <primary sortas="b-corelist">corelist</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cpan">
        <term><command moreinfo="none">cpan</command></term>
        <listitem>
          <para>用命令行与综合 Perl 归档网络（Comprehensive Perl Archive Network,CPAN）交互</para>
          <indexterm zone="ch-system-perl cpan" significance="normal">
            <primary sortas="b-cpan">cpan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="enc2xs">
        <term><command moreinfo="none">enc2xs</command></term>
        <listitem>
          <para>从 Unicode 字符映射或 Tcl 编码文件为 Encode 模块编译 Perl 扩展</para>
          <indexterm zone="ch-system-perl enc2xs" significance="normal">
            <primary sortas="b-enc2xs">enc2xs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="encguess">
        <term><command moreinfo="none">encguess</command></term>
        <listitem>
          <para>猜测一个或多个文件的编码类型</para>
          <indexterm zone="ch-system-perl encguess" significance="normal">
            <primary sortas="b-encguess">encguess</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="h2ph">
        <term><command moreinfo="none">h2ph</command></term>
        <listitem>
          <para>转换 <filename class="extension" moreinfo="none">.h</filename> C 头文件为 <filename class="extension" moreinfo="none">.ph</filename> Perl 头文件</para>
          <indexterm zone="ch-system-perl h2ph" significance="normal">
            <primary sortas="b-h2ph">h2ph</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="h2xs">
        <term><command moreinfo="none">h2xs</command></term>
        <listitem>
          <para>转换 <filename class="extension" moreinfo="none">.h</filename> C 头文件为 Perl 扩展</para>
          <indexterm zone="ch-system-perl h2xs" significance="normal">
            <primary sortas="b-h2xs">h2xs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="instmodsh">
        <term><command moreinfo="none">instmodsh</command></term>
        <listitem>
          <para>用于检查安装的 Perl 模块的 shell 脚本，并且能从一个安装的模块中创建 tar 包</para>
          <indexterm zone="ch-system-perl instmodsh" significance="normal">
            <primary sortas="b-instmodsh">instmodsh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="json_pp">
        <term><command moreinfo="none">json_pp</command></term>
        <listitem>
          <para>在特定输入输出格式之间转换数据</para>
          <indexterm zone="ch-system-perl json_pp" significance="normal">
            <primary sortas="b-json_pp">json_pp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnetcfg">
        <term><command moreinfo="none">libnetcfg</command></term>
        <listitem>
          <para>可用于配置 <filename class="libraryfile" moreinfo="none">libnet</filename> Perl 模块</para>
          <indexterm zone="ch-system-perl libnetcfg" significance="normal">
            <primary sortas="b-libnetcfg">libnetcfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perl">
        <term><command moreinfo="none">perl</command></term>
        <listitem>
          <para>将 C,<command moreinfo="none">sed</command>，<command moreinfo="none">awk</command> 以及 <command moreinfo="none">sh</command> 一些最好的特性结合到一个单一的强大语言</para>
          <indexterm zone="ch-system-perl perl" significance="normal">
            <primary sortas="b-perl">perl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perl-version">
        <term><command moreinfo="none">perl5.28.1</command></term>
        <listitem>
          <para>到 <command moreinfo="none">perl</command> 的硬链接</para>
          <indexterm zone="ch-system-perl perl-version" significance="normal">
            <primary sortas="b-perl5.28.1">perl5.28.1</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perlbug">
        <term><command moreinfo="none">perlbug</command></term>
        <listitem>
          <para>用于生成关于 Perl、或者一起发布的模块的 bug 报告，并用邮件通知</para>
          <indexterm zone="ch-system-perl perlbug" significance="normal">
            <primary sortas="b-perlbug">perlbug</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perldoc">
        <term><command moreinfo="none">perldoc</command></term>
        <listitem>
          <para>用嵌入到 Perl 安装目录或 Perl 脚本中的 pod 格式显示文档</para>
          <indexterm zone="ch-system-perl perldoc" significance="normal">
            <primary sortas="b-perldoc">perldoc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perlivp">
        <term><command moreinfo="none">perlivp</command></term>
        <listitem>
          <para>Perl 安装验证程序；能用于验证 Perl 和它的库是否正确安装</para>
          <indexterm zone="ch-system-perl perlivp" significance="normal">
            <primary sortas="b-perlivp">perlivp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="perlthanks">
        <term><command moreinfo="none">perlthanks</command></term>
        <listitem>
          <para>用于生成发送到 Perl 开发者的感谢邮件</para>
          <indexterm zone="ch-system-perl perlthanks" significance="normal">
            <primary sortas="b-perlthanks">perlthanks</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="piconv">
        <term><command moreinfo="none">piconv</command></term>
        <listitem>
          <para>Perl 版本的字符编码转换程序 <command moreinfo="none">iconv</command></para>
          <indexterm zone="ch-system-perl piconv" significance="normal">
            <primary sortas="b-piconv">piconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pl2pm">
        <term><command moreinfo="none">pl2pm</command></term>
        <listitem>
          <para>用于将 Perl4 <filename class="extension" moreinfo="none">.pl</filename> 文件转换为 Perl5 <filename class="extension" moreinfo="none">.pm</filename> 模块的工具</para>
          <indexterm zone="ch-system-perl pl2pm" significance="normal">
            <primary sortas="b-pl2pm">pl2pm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pod2html">
        <term><command moreinfo="none">pod2html</command></term>
        <listitem>
          <para>将文件从 pod 格式转换为 HTML 格式</para>
          <indexterm zone="ch-system-perl pod2html" significance="normal">
            <primary sortas="b-pod2html">pod2html</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pod2man">
        <term><command moreinfo="none">pod2man</command></term>
        <listitem>
          <para>将 pod 格式数据转换为格式化的 *roff 输入</para>
          <indexterm zone="ch-system-perl pod2man" significance="normal">
            <primary sortas="b-pod2man">pod2man</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pod2text">
        <term><command moreinfo="none">pod2text</command></term>
        <listitem>
          <para>将 pod 数据转换为格式化的 ASCII 文本</para>
          <indexterm zone="ch-system-perl pod2text" significance="normal">
            <primary sortas="b-pod2text">pod2text</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pod2usage">
        <term><command moreinfo="none">pod2usage</command></term>
        <listitem>
          <para>从文件中嵌入的 pod 文档显示使用信息</para>
          <indexterm zone="ch-system-perl pod2usage" significance="normal">
            <primary sortas="b-pod2usage">pod2usage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="podchecker">
        <term><command moreinfo="none">podchecker</command></term>
        <listitem>
          <para>检查 pod 格式的文档文件语法</para>
          <indexterm zone="ch-system-perl podchecker" significance="normal">
            <primary sortas="b-podchecker">podchecker</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="podselect">
        <term><command moreinfo="none">podselect</command></term>
        <listitem>
          <para>显示 pod 文档选中的章节</para>
          <indexterm zone="ch-system-perl podselect" significance="normal">
            <primary sortas="b-podselect">podselect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="prove">
        <term><command moreinfo="none">prove</command></term>
        <listitem>
          <para>运行对 Test::Harness 模块测试的命令行工具</para>
          <indexterm zone="ch-system-perl prove" significance="normal">
            <primary sortas="b-prove">prove</primary>
          </indexterm>
        </listitem>
      </varlistentry>
<!--
      <varlistentry id="pstruct">
        <term><command>pstruct</command></term>
        <listitem>
          <para>转储正如 <command>cc -g -S</command> 生成的 C 结构体</para>
          <indexterm zone="ch-system-perl pstruct">
            <primary sortas="b-pstruct">pstruct</primary>
          </indexterm>
        </listitem>
      </varlistentry>
-->
      <varlistentry id="ptar">
        <term><command moreinfo="none">ptar</command></term>
        <listitem>
          <para>用 Perl 写的类似 <command moreinfo="none">tar</command> 的程序</para>
          <indexterm zone="ch-system-perl ptar" significance="normal">
            <primary sortas="b-ptar">ptar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ptardiff">
        <term><command moreinfo="none">ptardiff</command></term>
        <listitem>
          <para>用于比较提取的文档和未提取的 Perl 程序</para>
          <indexterm zone="ch-system-perl ptardiff" significance="normal">
            <primary sortas="b-ptardiff">ptardiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ptargrep">
        <term><command moreinfo="none">ptargrep</command></term>
        <listitem>
          <para>用于对 tar 归档文件中的内容进行模式匹配的 Perl 程序</para>
          <indexterm zone="ch-system-perl ptargrep" significance="normal">
            <primary sortas="b-ptargrep">ptargrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="shasum">
        <term><command moreinfo="none">shasum</command></term>
        <listitem>
          <para>打印或检查 SHA 校验码</para>
          <indexterm zone="ch-system-perl shasum" significance="normal">
            <primary sortas="b-shasum">shasum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="splain">
        <term><command moreinfo="none">splain</command></term>
        <listitem>
          <para>用于 Perl 中的强制冗长警告诊断</para>
          <indexterm zone="ch-system-perl splain" significance="normal">
            <primary sortas="b-splain">splain</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xsubpp">
        <term><command moreinfo="none">xsubpp</command></term>
        <listitem>
          <para>转换 Perl XS 代码为 C 代码</para>
          <indexterm zone="ch-system-perl xsubpp" significance="normal">
            <primary sortas="b-xsubpp">xsubpp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zipdetails">
        <term><command moreinfo="none">zipdetails</command></term>
        <listitem>
          <para>显示 Zip 文件内部结构的详细信息</para>
          <indexterm zone="ch-system-perl zipdetails" significance="normal">
            <primary sortas="b-zipdetails">zipdetails</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-xml-parser" role="wrap">
  <?dbhtml filename="xml-parser.html"?>

  

  <title>XML::Parser-2.44</title>

  <indexterm zone="ch-system-xml-parser" significance="normal">
    <primary sortas="a-Xml-Parser">XML::Parser</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>XML::Parser 模块是到 James Clark 的 XML 解析器的 Perl Expat 接口。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>2.1 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 XML::Parser</title>

    <para>准备编译 XML::Parser：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">perl Makefile.PL</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make test</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-xml-parser" role="content">
    <title>XML::Parser 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的模块</segtitle>

      <seglistitem>
        <seg>Expat.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="Expat">
        <term><filename class="libraryfile" moreinfo="none">Expat</filename></term>
        <listitem>
          <para>提供 Perl Expat 接口</para>
          <indexterm zone="ch-system-xml-parser Expat" significance="normal">
            <primary sortas="c-Expat">Expat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-intltool" role="wrap">
  <?dbhtml filename="intltool.html"?>

  

  <title>Intltool-0.51.0</title>

  <indexterm zone="ch-system-intltool" significance="normal">
    <primary sortas="a-Intltool">Intltool</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Intltool 是一个用于从源文件中抽取可翻译字符串的国际化工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>1.5 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Intltool</title>

    <para>首先修复 perl-5.22 和其后版本导致的警告：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's:\\\${:\\\$\\{:' intltool-update.in</userinput></screen>

    <para>准备编译 Intltool：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
install -v -Dm644 doc/I18N-HOWTO /usr/share/doc/intltool-0.51.0/I18N-HOWTO</userinput></screen>

  </sect2>

  <sect2 id="contents-intltool" role="content">
    <title>Intltool 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>intltool-extract, intltool-merge, intltool-prepare,
        intltool-update, 和 intltoolize</seg>
        <seg>/usr/share/doc/intltool-0.51.0 and
        /usr/share/intltool</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="intltoolize">
        <term><command moreinfo="none">intltoolize</command></term>
        <listitem>
          <para>准备使用 intltool 的软件包</para>
          <indexterm zone="ch-system-intltool intltoolize" significance="normal">
            <primary sortas="b-intltoolize">intltoolize</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intltool-extract">
        <term><command moreinfo="none">intltool-extract</command></term>
        <listitem>
          <para>生成 <command moreinfo="none">gettext</command> 能读取的头文件</para>
          <indexterm zone="ch-system-intltool intltool-extract" significance="normal">
            <primary sortas="b-intltool-extract">intltool-extract</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intltool-merge">
        <term><command moreinfo="none">intltool-merge</command></term>
        <listitem>
          <para>合并翻译后的字符串到多种文件格式</para>
          <indexterm zone="ch-system-intltool intltool-merge" significance="normal">
            <primary sortas="b-intltool-merge">intltool-merge</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intltool-prepare">
        <term><command moreinfo="none">intltool-prepare</command></term>
        <listitem>
          <para>更新 pot 文件并把它们和翻译文件合并</para>
          <indexterm zone="ch-system-intltool intltool-prepare" significance="normal">
            <primary sortas="b-intltool-prepare">intltool-prepare</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="intltool-update">
        <term><command moreinfo="none">intltool-update</command></term>
        <listitem>
          <para>更新 po 模板文件并把它们和翻译文件合并</para>
          <indexterm zone="ch-system-intltool intltool-update" significance="normal">
            <primary sortas="b-intltool-update">intltool-update</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-autoconf" role="wrap">
  <?dbhtml filename="autoconf.html"?>

  

  <title>Autoconf-2.69</title>

  <indexterm zone="ch-system-autoconf" significance="normal">
    <primary sortas="a-Autoconf">Autoconf</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Autoconf 软件包包含用于生成自动配置源代码的 shell 脚本的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU （包含测试大于 2.7 SBU）</seg>
        <seg>17 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Autoconf</title>

    <para>准备编译 Autoconf：</para>

    <para>首先，修复一个 Perl 5.28 引入的问题。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed '361 s/{/\\{/' -i bin/autoscan.in</userinput></screen>

    <para>准备编译 Autoconf：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>
<!--
    <para>To test the results, issue:</para>-->
    <para>由于 bash-5 和 libtool-2.4.3 的原因，测试套件当前无法使用。如果要强行测试，输入：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>
<!--
    <para>这需要很长一段时间，大概 &autoconf-ch6-sbu-tests; SBUs。另外，跳过了需要 Automake 的若干测试。为了全面测试，Automake 安装完成后可以重新测试 Autoconf。另外，由于 libtool-2.4.3 及之后版本的变化，两个测试将会失败。</para>

    <note><para>在多内核的系统上，可以效果显著的削减 autoconf 的测试时间。将 <command>TESTSUITEFLAGS=-j&lt;N&gt;</command> 追加到上面的命令中，以达到该效果。。例如，使用 -j4 可以节约超过 60% 的测试时间。</para></note>
-->
    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-autoconf" role="content">
    <title>Autoconf 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>autoconf, autoheader, autom4te, autoreconf, autoscan, autoupdate, 和 ifnames</seg>
        <seg>/usr/share/autoconf</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="autoconf">
        <term><command moreinfo="none">autoconf</command></term>
        <listitem>
          <para>生成能为多种类 Unix 系统自动配置软件源码包的 shell 脚本；它生成的配置脚本是独立的——运行脚本不需要 <command moreinfo="none">autoconf</command> 程序</para>
          <indexterm zone="ch-system-autoconf autoconf" significance="normal">
            <primary sortas="b-autoconf">autoconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoheader">
        <term><command moreinfo="none">autoheader</command> </term>
        <listitem>
          <para>一个能生成给配置脚本使用的 C <emphasis>#define</emphasis> 语句模板文件的工具</para>
          <indexterm zone="ch-system-autoconf autoheader" significance="normal">
            <primary sortas="b-autoheader">autoheader</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autom4te">
        <term><command moreinfo="none">autom4te</command></term>
        <listitem>
          <para>M4 宏处理器的封装</para>
          <indexterm zone="ch-system-autoconf autom4te" significance="normal">
            <primary sortas="b-autom4te">autom4te</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoreconf">
        <term><command moreinfo="none">autoreconf</command></term>
        <listitem>
          <para>对 <command moreinfo="none">autoconf</command> 和
<command moreinfo="none">automake</command> 模板文件作了更改后能以正确顺序自动运行 <command moreinfo="none">autoconf</command>，<command moreinfo="none">autoheader</command>，<command moreinfo="none">aclocal</command>，<command moreinfo="none">automake</command>，<command moreinfo="none">gettextize</command>，以及 <command moreinfo="none">libtoolize</command> 以节省时间</para>
          <indexterm zone="ch-system-autoconf autoreconf" significance="normal">
            <primary sortas="b-autoreconf">autoreconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoscan">
        <term><command moreinfo="none">autoscan</command> </term>
        <listitem>
          <para>为软件包帮助生成 <filename moreinfo="none">configure.in</filename> 文件；它检查目录树中的源文件，查找常见移植问题，生成作为软件包的初步 <filename moreinfo="none">configure.scan</filename> 文件的 <filename moreinfo="none">configure.in</filename> 文件</para>
          <indexterm zone="ch-system-autoconf autoscan" significance="normal">
            <primary sortas="b-autoscan">autoscan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoupdate">
        <term><command moreinfo="none">autoupdate</command></term>
        <listitem>
          <para>更改 <filename moreinfo="none">configure.in</filename> 文件，仍然通过旧名称调用 <command moreinfo="none">autoconf</command> 宏来使用当前宏名称</para>
          <indexterm zone="ch-system-autoconf autoupdate" significance="normal">
            <primary sortas="b-autoupdate">autoupdate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ifnames">
        <term><command moreinfo="none">ifnames</command> </term>
        <listitem>
          <para>帮助为软件包写 <filename moreinfo="none">configure.in</filename> 文件；打印软件包在 C 预处理器中使用的标识符[如果已经设置软件包具有某些可移植性，该程序能帮助决定需要检查哪些  <command moreinfo="none">configure</command>。还能填充 <filename moreinfo="none">configure.in</filename> 生成的 <command moreinfo="none">autoscan</command> 文件中的空格。]</para>
          <indexterm zone="ch-system-autoconf ifnames" significance="normal">
            <primary sortas="b-ifnames">ifnames</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-automake" role="wrap">
  <?dbhtml filename="automake.html"?>

  

  <title>Automake-1.16.1</title>

  <indexterm zone="ch-system-automake" significance="normal">
    <primary sortas="a-Automake">Automake</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>软件包包含了生成可与 Autoconf 一同使用的 Makefile 的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU （包含测试大于 6.9 SBU）</seg>
        <seg>107 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>Automake 的安装</title>

    <para>准备编译 Automake：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --docdir=/usr/share/doc/automake-1.16.1</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

<!--<para>There are a couple of tests that incorrectly link to the 
    wrong version of the flex library, so we temporarily work around
    the problem.  Also, using the -j4 make option speeds up the tests, even on
    systems with only one processor, due to internal delays in individual
    tests.  To test the results, issue:</para>
 -->

    <para>因为各个测试之间存在内部延时，故建议就算是在单核处理器的设备上，也使用 -j4 编译选项加速测试过程。用以下命令测试结果：</para>

 <!--<screen><userinput remap="test">sed -i "s:./configure:LEXLIB=/usr/lib/libfl.a &amp;:" t/lex-{clean,depend}-cxx.sh
       make -j4 check</userinput></screen>-->

<screen format="linespecific"><userinput remap="test" moreinfo="none">make -j4 check</userinput></screen>


    <para>已知 LFS 环境中 subobj.sh 测试会失败。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 id="contents-automake" role="content">
    <title>关于 Automake 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>aclocal, aclocal-1.16 (到 aclocal 的硬链接), automake, 和
        automake-1.16 (到 automake 的硬链接) </seg>
        <seg>/usr/share/aclocal-1.16, /usr/share/automake-1.16, 和
        /usr/share/doc/automake-1.16.1</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="aclocal">
        <term><command moreinfo="none">aclocal</command></term>
        <listitem>
          <para>基于 <filename moreinfo="none">aclocal.m4</filename> 文件的内容生成 <filename moreinfo="none">configure.in</filename> 文件</para>
          <indexterm zone="ch-system-automake aclocal" significance="normal">
            <primary sortas="b-aclocal">aclocal</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="aclocalversion">
        <term><command moreinfo="none">aclocal-1.16</command></term>
        <listitem>
          <para>到 <command moreinfo="none">aclocal</command> 的硬链接</para>
          <indexterm zone="ch-system-automake aclocalversion" significance="normal">
            <primary sortas="b-aclocal-1.16">aclocal-1.16</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="automake">
        <term><command moreinfo="none">automake</command></term>
        <listitem>
          <para>一个从 <filename moreinfo="none">Makefile.in</filename> 文件自动生成 <filename moreinfo="none">Makefile.am</filename> 文件的工具 [要生成一个软件包里所有的 <filename moreinfo="none">Makefile.in</filename> 文件，在最上层的目录运行这个程序。通过扫描 <filename moreinfo="none">configure.in</filename> 文件，它能自动找到每个对应的 <filename moreinfo="none">Makefile.am</filename> 文件，并生成对应的 <filename moreinfo="none">Makefile.in</filename> 文件。]</para>
          <indexterm zone="ch-system-automake automake" significance="normal">
            <primary sortas="b-automake">automake</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="automake-version">
        <term><command moreinfo="none">automake-1.16</command></term>
        <listitem>
          <para>到 <command moreinfo="none">automake</command> 的硬链接</para>
          <indexterm zone="ch-system-automake automake-version" significance="normal">
            <primary sortas="b-automake-1.16">automake-1.16</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-xz" role="wrap">
  <?dbhtml filename="xz.html"?>

  

  <title>Xz-5.2.4</title>

  <indexterm zone="ch-system-xz" significance="normal">
    <primary sortas="a-xz">Xz</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Xz 软件包包含用于压缩和解压文件的程序。它提供 lzma 和更新的 xz 压缩格式功能。和传统的 <command moreinfo="none">gzip</command> 或 <command moreinfo="none">bzip2</command> 命令相比，用 <command moreinfo="none">xz</command> 压缩文本文件能获得更好的压缩率。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>16 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Xz</title>

    <para>准备编译 Xz：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/xz-5.2.4</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

  <para>安装软件包并确保所需的文件都在正确目录中：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
mv -v   /usr/bin/{lzma,unlzma,lzcat,xz,unxz,xzcat} /bin
mv -v /usr/lib/liblzma.so.* /lib
ln -svf ../../lib/$(readlink /usr/lib/liblzma.so) /usr/lib/liblzma.so</userinput></screen>

  </sect2>

  <sect2 id="contents-xz" role="content">
    <title>Xz 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>
          lzcat (链接到 xz),
          lzcmp (链接到 xzdiff),
          lzdiff (链接到 xzdiff),
          lzegrep (链接到 xzgrep),
          lzfgrep (链接到 xzgrep),
          lzgrep (链接到 xzgrep),
          lzless (链接到 xzless),
          lzma (链接到 xz),
          lzmadec,
          lzmainfo,
          lzmore (链接到 xzmore),
          unlzma (链接到 xz),
          unxz (链接到 xz),
          xz,
          xzcat (链接到 xz),
          xzcmp (链接到 xzdiff),
          xzdec,
          xzdiff,
          xzegrep (链接到 xzgrep),
          xzfgrep (链接到 xzgrep),
          xzgrep,
          xzless, 和
          xzmore</seg>
        <seg>
          liblzma.so
        </seg>
        <seg>
          /usr/include/lzma 和
          /usr/share/doc/xz-5.2.4
         </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="lzcat">
        <term><command moreinfo="none">lzcat</command></term>
        <listitem>
          <para>解压标准输出</para>
          <indexterm zone="ch-system-xz lzcat" significance="normal">
            <primary sortas="b-lzcat">lzcat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzcmp">
        <term><command moreinfo="none">lzcmp</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">cmp</command> 命令</para>
          <indexterm zone="ch-system-xz lzcmp" significance="normal">
            <primary sortas="b-lzcmp">lzcmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzdiff">
        <term><command moreinfo="none">lzdiff</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">diff</command> 命令</para>
          <indexterm zone="ch-system-xz lzdiff" significance="normal">
            <primary sortas="b-lzdiff">lzdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzegrep">
        <term><command moreinfo="none">lzegrep</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">egrep</command> 命令</para>
          <indexterm zone="ch-system-xz lzegrep" significance="normal">
            <primary sortas="b-lzegrep">lzegrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzfgrep">
        <term><command moreinfo="none">lzfgrep</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">fgrep</command> 命令</para>
          <indexterm zone="ch-system-xz lzfgrep" significance="normal">
            <primary sortas="b-lzfgrep">lzfgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzgrep">
        <term><command moreinfo="none">lzgrep</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">grep</command> 命令</para>
          <indexterm zone="ch-system-xz lzgrep" significance="normal">
            <primary sortas="b-lzgrep">lzgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzless">
        <term><command moreinfo="none">lzless</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">less</command> 命令</para>
          <indexterm zone="ch-system-xz lzless" significance="normal">
            <primary sortas="b-lzless">lzless</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzma">
        <term><command moreinfo="none">lzma</command></term>
        <listitem>
          <para>用 LZMA 格式压缩或解压文件</para>
          <indexterm zone="ch-system-xz lzma" significance="normal">
            <primary sortas="b-lzma">lzma</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzmadec">
        <term><command moreinfo="none">lzmadec</command></term>
        <listitem>
          <para>用于 LZMA 压缩文件的轻便解码器</para>
          <indexterm zone="ch-system-xz lzmadec" significance="normal">
            <primary sortas="b-lzmadec">lzmadec</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzmainfo">
        <term><command moreinfo="none">lzmainfo</command></term>
        <listitem>
          <para>显示存储在 LZMA 压缩文件头部的信息</para>
          <indexterm zone="ch-system-xz lzmainfo" significance="normal">
            <primary sortas="b-lzmainfo">lzmainfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lzmore">
        <term><command moreinfo="none">lzmore</command></term>
        <listitem>
          <para>对 LZMA 压缩文件运行 <command moreinfo="none">more</command> 命令</para>
          <indexterm zone="ch-system-xz lzmore" significance="normal">
            <primary sortas="b-lzmamore">lzmore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unlzma">
        <term><command moreinfo="none">unlzma</command></term>
        <listitem>
          <para>用 LZMA 格式解压文件</para>
          <indexterm zone="ch-system-xz unlzma" significance="normal">
            <primary sortas="b-unlzma">unlzma</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unxz">
        <term><command moreinfo="none">unxz</command></term>
        <listitem>
          <para>用 XZ 格式解压文件</para>
          <indexterm zone="ch-system-xz unxz" significance="normal">
            <primary sortas="b-unxz">unxz</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xz">
        <term><command moreinfo="none">xz</command></term>
        <listitem>
          <para>用 XZ 格式压缩或解压文件</para>
          <indexterm zone="ch-system-xz xz" significance="normal">
            <primary sortas="b-xz">xz</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzcat">
        <term><command moreinfo="none">xzcat</command></term>
        <listitem>
          <para>解压到标准输出</para>
          <indexterm zone="ch-system-xz xzcat" significance="normal">
            <primary sortas="b-xzcat">xzcat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzcmp">
        <term><command moreinfo="none">xzcmp</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">cmp</command> 命令</para>
          <indexterm zone="ch-system-xz xzcmp" significance="normal">
            <primary sortas="b-xzcmp">xzcmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzdec">
        <term><command moreinfo="none">xzdec</command></term>
        <listitem>
          <para>用于 XZ 压缩文件的轻便解码器</para>
          <indexterm zone="ch-system-xz xzdec" significance="normal">
            <primary sortas="b-xzdec">xzdec</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzdiff">
        <term><command moreinfo="none">xzdiff</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">diff</command> 命令</para>
          <indexterm zone="ch-system-xz xzdiff" significance="normal">
            <primary sortas="b-xzdiff">xzdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzegrep">
        <term><command moreinfo="none">xzegrep</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">egrep</command> 命令</para>
          <indexterm zone="ch-system-xz xzegrep" significance="normal">
            <primary sortas="b-xzegrep">xzegrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzfgrep">
        <term><command moreinfo="none">xzfgrep</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">fgrep</command> 命令</para>
          <indexterm zone="ch-system-xz xzfgrep" significance="normal">
            <primary sortas="b-xzfgrep">xzfgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzgrep">
        <term><command moreinfo="none">xzgrep</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">grep</command> 命令</para>
          <indexterm zone="ch-system-xz xzgrep" significance="normal">
            <primary sortas="b-xzgrep">xzgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzless">
        <term><command moreinfo="none">xzless</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">less</command> 命令</para>
          <indexterm zone="ch-system-xz xzless" significance="normal">
            <primary sortas="b-xzless">xzless</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xzmore">
        <term><command moreinfo="none">xzmore</command></term>
        <listitem>
          <para>对 XZ 压缩文件运行 <command moreinfo="none">more</command> 命令</para>
          <indexterm zone="ch-system-xz xzmore" significance="normal">
            <primary sortas="b-xzmore">xzmore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liblzma">
        <term><filename class="libraryfile" moreinfo="none">liblzma</filename></term>
        <listitem>
          <para>用 Lempel-Ziv-Markov 链算法实现无损块排序数据压缩的库</para>
          <indexterm zone="ch-system-xz liblzma" significance="normal">
            <primary sortas="c-liblzma">liblzma</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-kmod" role="wrap">
  <?dbhtml filename="kmod.html"?>

  

  <title>Kmod-26</title>

  <indexterm zone="ch-system-kmod" significance="normal">
    <primary sortas="a-Kmod">Kmod</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Kmod 软件包包含用于加载内核模块的库和工具</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>13 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Kmod</title>

    <para>准备编译 Kmod：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr          \
            --bindir=/bin          \
            --sysconfdir=/etc      \
            --with-rootlibdir=/lib \
            --with-xz              \
            --with-zlib</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-xz, --with-zlib</parameter></term>
        <listitem>
          <para>这些选项使 Kmod 能处理压缩的内核模块。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-rootlibdir=/lib</parameter></term>
        <listitem>
          <para>该选项确保和不同库相关的文件放置到正确的目录。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>这个软件包没有附带可在 LFS chroot 环境中运行测试套件。至少需要 git 程序并进行一些测试保证不会在 git 仓库外运行。</para>

<!--
    <para>To test the results, issue:</para>

<screen><userinput remap="test">make check</userinput></screen>
-->
    <para>安装软件包并创建符号链接使兼容 Module-Init-Tools(之前处理 Linux 内核模块的软件包)：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install

for target in depmod insmod lsmod modinfo modprobe rmmod; do
  ln -sfv ../bin/kmod /sbin/$target
done

ln -sfv kmod /bin/lsmod</userinput></screen>

  </sect2>

  <sect2 id="contents-kmod" role="content">
    <title>Kmod 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>depmod (链接到 kmod), insmod (链接到 kmod), kmod,
        lsmod (链接到 kmod), modinfo (链接到 kmod), modprobe (链接到 kmod),
        和 rmmod (链接到 kmod)</seg>
        <seg>libkmod.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="depmod">
        <term><command moreinfo="none">depmod</command></term>
        <listitem>
          <para>基于从已有的模块集上发现的符号创建依赖文件；<command moreinfo="none">modprobe</command> 用该依赖文件自动加载所需模块</para>
          <indexterm zone="ch-system-kmod depmod" significance="normal">
            <primary sortas="b-depmod">depmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="insmod">
        <term><command moreinfo="none">insmod</command></term>
        <listitem>
          <para>在运行的内核上安装可加载模块</para>
          <indexterm zone="ch-system-kmod insmod" significance="normal">
            <primary sortas="b-insmod">insmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kmod">
        <term><command moreinfo="none">kmod</command></term>
        <listitem>
          <para>加载或卸载内核模块</para>
          <indexterm zone="ch-system-kmod kmod" significance="normal">
            <primary sortas="b-kmod">kmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lsmod">
        <term><command moreinfo="none">lsmod</command></term>
        <listitem>
          <para>列出当前已加载模块</para>
          <indexterm zone="ch-system-kmod lsmod" significance="normal">
            <primary sortas="b-lsmod">lsmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="modinfo">
        <term><command moreinfo="none">modinfo</command></term>
        <listitem>
          <para>检查和内核模块相关联的目标文件并显示搜索到的任何信息</para>
          <indexterm zone="ch-system-kmod modinfo" significance="normal">
            <primary sortas="b-modinfo">modinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="modprobe">
        <term><command moreinfo="none">modprobe</command></term>
        <listitem>
          <para>用 <command moreinfo="none">depmod</command> 创建的依赖文件自动加载相关模块</para>
          <indexterm zone="ch-system-kmod modprobe" significance="normal">
            <primary sortas="b-modprobe">modprobe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rmmod">
        <term><command moreinfo="none">rmmod</command></term>
        <listitem>
          <para>从运行中的内核卸载模块</para>
          <indexterm zone="ch-system-kmod rmmod" significance="normal">
            <primary sortas="b-rmmod">rmmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libkmod">
        <term><filename class="libraryfile" moreinfo="none">libkmod</filename></term>
        <listitem>
          <para>其它程序使用该库加载或卸载内核模块</para>
          <indexterm zone="ch-system-kmod" significance="normal">
            <primary sortas="c-libkmod">libkmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gettext" role="wrap">
  <?dbhtml filename="gettext.html"?>

  

  <title>Gettext-0.19.8.1</title>

  <indexterm zone="ch-system-gettext" significance="normal">
    <primary sortas="a-Gettext">Gettext</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Gettext 软件包包含用于国际化和本土化的工具。这允许用 NLS（Native Language Support，本地语言支持） 编译程序，使得能以用户的本地语言输出信息。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>2.0 SBU</seg>
        <seg>210 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gettext</title>

   <!-- This has been fixed in upstream gnulib, when a new version of
   gettext is released, please check #4055 to see if the change has been
   picked up in this package 
   
   As of April 11, 2018, 'TESTS = test-lock' is in gettext-runtime/tests/Makefile.am
   Perhaps the test is fixed.
   There is no reference to 'test' or TEST in  gettext-tools/gnulib-tests/Makefile.am
   -->
   <para>首先，抑制两个 test-lock 的调用在某些机器上发生无限循环的问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/^TESTS =/d' gettext-runtime/tests/Makefile.in &amp;&amp;
sed -i 's/test-lock..EXEEXT.//' gettext-tools/gnulib-tests/Makefile.in</userinput></screen>

   <!-- As of April 11, 2018 appdata.* is NOT in git master, but appears
   to be in metainfo.{its,loc},  When updating, check BLFS gnome-screenshot. -->
   <para>然后修正配置文件：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -e '/AppData/{N;N;p;s/\.appdata\./.metainfo./}' \
    -i gettext-tools/its/appdata.loc</userinput></screen>

    <para>准备编译 Gettext：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr    \
            --disable-static \
            --docdir=/usr/share/doc/gettext-0.19.8.1</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果（需要较长一段时间，大概 3 SBUs）：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
chmod -v 0755 /usr/lib/preloadable_libintl.so</userinput></screen>

  </sect2>

  <sect2 id="contents-gettext" role="content">
    <title>Gettext 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>autopoint, envsubst, gettext, gettext.sh,
        gettextize, msgattrib, msgcat, msgcmp, msgcomm, msgconv, msgen,
        msgexec, msgfilter, msgfmt, msggrep, msginit, msgmerge, msgunfmt, msguniq,
        ngettext, recode-sr-latin, 和  xgettext</seg>
        <seg>libasprintf.so, libgettextlib.so, libgettextpo.so,
        libgettextsrc.so, 和  preloadable_libintl.so</seg>
        <seg>/usr/lib/gettext, /usr/share/doc/gettext-0.19.8.1, 和
        /usr/share/gettext</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="autopoint">
        <term><command moreinfo="none">autopoint</command></term>
        <listitem>
          <para>复制标准 Gettext 基础文件到源码包</para>
          <indexterm zone="ch-system-gettext autopoint" significance="normal">
            <primary sortas="b-autopoint">autopoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="envsubst">
        <term><command moreinfo="none">envsubst</command></term>
        <listitem>
          <para>shell 格式字符串的替代环境变量</para>
          <indexterm zone="ch-system-gettext envsubst" significance="normal">
            <primary sortas="b-envsubst">envsubst</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gettext">
        <term><command moreinfo="none">gettext</command></term>
        <listitem>
          <para>通过查看信息目录中的转换将原来语言信息转换为用户语言</para>
          <indexterm zone="ch-system-gettext gettext" significance="normal">
            <primary sortas="b-gettext">gettext</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gettext.sh">
        <term><command moreinfo="none">gettext.sh</command></term>
        <listitem>
          <para>主要作为 gettext 的一个 shell 函数库</para>
          <indexterm zone="ch-system-gettext gettext.sh" significance="normal">
            <primary sortas="b-gettext.sh">gettext.sh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gettextize">
        <term><command moreinfo="none">gettextize</command></term>
        <listitem>
          <para>复制所有标准 Gettext 文件到指定软件包的顶层目录以开始国际化</para>
          <indexterm zone="ch-system-gettext gettextize" significance="normal">
            <primary sortas="b-gettextize">gettextize</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgattrib">
        <term><command moreinfo="none">msgattrib</command></term>
        <listitem>
          <para>根据属性过滤翻译目录的信息并操作属性</para>
          <indexterm zone="ch-system-gettext msgattrib" significance="normal">
            <primary sortas="b-msgattrib">msgattrib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgcat">
        <term><command moreinfo="none">msgcat</command></term>
        <listitem>
          <para>连接和合并给定 <filename class="extension" moreinfo="none">.po</filename> 文件</para>
          <indexterm zone="ch-system-gettext msgcat" significance="normal">
            <primary sortas="b-msgcat">msgcat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgcmp">
        <term><command moreinfo="none">msgcmp</command></term>
        <listitem>
          <para>比较两个 <filename class="extension" moreinfo="none">.po</filename> 文件以检查两者是否包含相同的 msgid 字符串集合</para>
          <indexterm zone="ch-system-gettext msgcmp" significance="normal">
            <primary sortas="b-msgcmp">msgcmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgcomm">
        <term><command moreinfo="none">msgcomm</command></term>
        <listitem>
          <para>查找给定 <filename class="extension" moreinfo="none">.po</filename> 文件共同的信息</para>
          <indexterm zone="ch-system-gettext msgcomm" significance="normal">
            <primary sortas="b-msgcomm">msgcomm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgconv">
        <term><command moreinfo="none">msgconv</command></term>
        <listitem>
          <para>转换翻译目录到不同的字符编码</para>
          <indexterm zone="ch-system-gettext msgconv" significance="normal">
            <primary sortas="b-msgconv">msgconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgen">
        <term><command moreinfo="none">msgen</command></term>
        <listitem>
          <para>创建一个英语翻译目录</para>
          <indexterm zone="ch-system-gettext msgen" significance="normal">
            <primary sortas="b-msgen">msgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgexec">
        <term><command moreinfo="none">msgexec</command></term>
        <listitem>
          <para>对翻译目录的所有翻译运行命令</para>
          <indexterm zone="ch-system-gettext msgexec" significance="normal">
            <primary sortas="b-msgexec">msgexec</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgfilter">
        <term><command moreinfo="none">msgfilter</command></term>
        <listitem>
          <para>对翻译目录的所有翻译应用过滤器</para>
          <indexterm zone="ch-system-gettext msgfilter" significance="normal">
            <primary sortas="b-msgfilter">msgfilter</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgfmt">
        <term><command moreinfo="none">msgfmt</command></term>
        <listitem>
          <para>从翻译目录生成一个二进制信息目录</para>
          <indexterm zone="ch-system-gettext msgfmt" significance="normal">
            <primary sortas="b-msgfmt">msgfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msggrep">
        <term><command moreinfo="none">msggrep</command></term>
        <listitem>
          <para>从翻译目录中抽取所有符合指定模式或属于特定源文件的信息</para>
          <indexterm zone="ch-system-gettext msggrep" significance="normal">
            <primary sortas="b-msggrep">msggrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msginit">
        <term><command moreinfo="none">msginit</command></term>
        <listitem>
          <para>创建一个新的 <filename class="extension" moreinfo="none">.po</filename> 文件，根据用户环境中的值初始化元信息</para>
          <indexterm zone="ch-system-gettext msginit" significance="normal">
            <primary sortas="b-msginit">msginit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgmerge">
        <term><command moreinfo="none">msgmerge</command></term>
        <listitem>
          <para>合并两个原译到一个单独的文件</para>
          <indexterm zone="ch-system-gettext msgmerge" significance="normal">
            <primary sortas="b-msgmerge">msgmerge</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msgunfmt">
        <term><command moreinfo="none">msgunfmt</command></term>
        <listitem>
          <para>反向编译一个二进制信息目录为原译文本</para>
          <indexterm zone="ch-system-gettext msgunfmt" significance="normal">
            <primary sortas="b-msgunfmt">msgunfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="msguniq">
        <term><command moreinfo="none">msguniq</command></term>
        <listitem>
          <para>统一重复翻译为一个翻译目录</para>
          <indexterm zone="ch-system-gettext msguniq" significance="normal">
            <primary sortas="b-msguniq">msguniq</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ngettext">
        <term><command moreinfo="none">ngettext</command></term>
        <listitem>
          <para>显示语法形式取决于多种母语翻译的文本信息的本地语言翻译</para>
          <indexterm zone="ch-system-gettext ngettext" significance="normal">
            <primary sortas="b-ngettext">ngettext</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="recode-sr-latin">
        <term><command moreinfo="none">recode-sr-latin</command></term>
        <listitem>
          <para>对 Serbian 文本从 Cyrillic 重新编码为 Latin 脚本</para>
          <indexterm zone="ch-system-gettext recode-sr-latin" significance="normal">
            <primary sortas="b-recode-sr-latin">recode-sr-latin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xgettext">
        <term><command moreinfo="none">xgettext</command></term>
        <listitem>
          <para>从指定源文件中抽取可翻译信息行用于生成第一个翻译模板</para>
          <indexterm zone="ch-system-gettext xgettext" significance="normal">
            <primary sortas="b-xgettext">xgettext</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libasprintf">
        <term><filename class="libraryfile" moreinfo="none">libasprintf</filename></term>
        <listitem>
          <para>定义 <emphasis>autosprintf</emphasis>  类，该类使 C 格式化输出在 C++程序中能和 <emphasis>&lt;string&gt;</emphasis> 字符串以及  <emphasis>&lt;iostream&gt;</emphasis> 流一起使用</para>
          <indexterm zone="ch-system-gettext libasprintf" significance="normal">
            <primary sortas="c-libasprintf">libasprintf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgettextlib">
        <term><filename class="libraryfile" moreinfo="none">libgettextlib</filename></term>
        <listitem>
          <para>包括多种 Gettext 程序使用的常用例程的私有库；并不用于一般用途</para>
          <indexterm zone="ch-system-gettext libgettextlib" significance="normal">
            <primary sortas="c-libgettextlib">libgettextlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgettextpo">
        <term><filename class="libraryfile" moreinfo="none">libgettextpo</filename></term>
        <listitem>
          <para>用来写处理 <filename class="extension" moreinfo="none">.po</filename> 文件的特殊程序；当 Gettext 附带的标准应用（例如 <command moreinfo="none">msgcomm</command>，<command moreinfo="none">msgcmp</command>，<command moreinfo="none">msgattrib</command>, 以及  <command moreinfo="none">msgen</command>）不足够时会使用这个库</para>
          <indexterm zone="ch-system-gettext libgettextpo" significance="normal">
            <primary sortas="c-libgettextpo">libgettextpo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgettextsrc">
        <term><filename class="libraryfile" moreinfo="none">libgettextsrc</filename></term>
        <listitem>
          <para>包括多种 Gettext 程序使用的常用例程的私有库；并不用于一般用途</para>
          <indexterm zone="ch-system-gettext libgettextsrc" significance="normal">
            <primary sortas="c-libgettextsrc">libgettextsrc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="preloadable_libintl">
        <term><filename class="libraryfile" moreinfo="none">preloadable_libintl</filename></term>
        <listitem>
          <para>LD_PRELOAD 帮助 <filename class="libraryfile" moreinfo="none">libintl</filename> 记录未翻译信息时使用的库</para>
          <indexterm zone="ch-system-gettext preloadable_libintl" significance="normal">
            <primary sortas="c-preloadable_libintl">preloadable_libintl</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-libelf" role="wrap">
  <?dbhtml filename="libelf.html"?>

  

  <title>Libelf 源自 Elfutils-0.176</title>

  <indexterm zone="ch-system-libelf" significance="normal">
    <primary sortas="a-Libelf">Libelf</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libelf 是处理 ELF（可执行与可链接格式）文件的库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.3 SBU</seg>
        <seg>105 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Libelf</title>

      <para>Libelf 是软件包 elfutils-0.176 种的一部分。使用 elfutils-0.176.tar.bz2 作为源码包。</para>

    <para>编译 Libelf 前的准备：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>
    
<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>仅安装 Libelf：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make -C libelf install
install -vm644 config/libelf.pc /usr/lib/pkgconfig</userinput></screen>

  </sect2>

  <sect2 id="contents-elfutils" role="content">
    <title>Libelf 软件包的内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>
          libelf.so
        </seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

</sect1>
  <sect1 id="ch-system-libffi" role="wrap">
  <?dbhtml filename="libffi.html"?>

  

  <title>Libffi-3.2.1</title>

  <indexterm zone="ch-system-libffi" significance="normal">
    <primary sortas="a-libffi">libffi</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libffi 库为各种调用规范提供了一个可移植的，高级编程接口。允许程序员在运行时，通过调用接口描述调用任意指定函数。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>7.6 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Libffi</title>

    <note>
      <para>Libffi 与 GMP 相似，构建时会根据使用的处理器优化。如果需要构建的是另一个系统，设定 CFLAGS 和 CXXFLAGS 为你的架构指定成通用构建。如果不这样做，所有指向 libffi 的链接将触发非法操作错误。</para>
    </note>

    <para>修改 Makefile 将头文件安装到标准的 <filename class="directory" moreinfo="none">/usr/include</filename> 目录，而非 <filename class="directory" moreinfo="none">/usr/lib/libffi-3.2.1/include</filename>。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -e '/^includesdir/ s/$(libdir).*$/$(includedir)/' \
    -i include/Makefile.in

sed -e '/^includedir/ s/=.*$/=@includedir@/' \
    -e 's/^Cflags: -I${includedir}/Cflags:/' \
    -i libffi.pc.in</userinput></screen>

    <para>编译 libffi 前的准备：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --disable-static --with-gcc-arch=native</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-gcc-arch=native</parameter></term>
        <listitem>
          <para>确保 GCC 为当前系统进行优化。如果没有指定则会进行猜测，这样生成的代码在某些系统上是不正确的。如果生成的代码想要从本机系统复制到功能较弱的系统，则应该以功能较弱的系统作为参数。有关替代系统类型的详细信息，请参阅 <ulink url="https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gcc/x86-Options.html">gcc 手册中的 x86 选项</ulink>。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-libffi" role="content">
    <title>Libffi 的软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>libffi.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libffi">
        <term><filename class="libraryfile" moreinfo="none">libffi</filename></term>
        <listitem>
          <para>包含 libffi 的 API 函数。</para>
          <indexterm zone="ch-system-libffi" significance="normal">
            <primary sortas="c-libffi">libffi</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-openssl" role="wrap">
  <?dbhtml filename="openssl.html"?>

  

  <title>OpenSSL-1.1.1a</title>

  <indexterm zone="ch-system-openssl" significance="normal">
    <primary sortas="a-OpenSSL">OpenSSL</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>OpenSSL 软件包包含管理工具和加密相关的库。其中提供的这些加密功能对于其他软件包，比方说 OpenSSH，email 应用和网页浏览器（访问 HTTPS 站点）来说，十分有用。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.7 SBU</seg>
        <seg>141 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 OpenSSL</title>

    <para>编译 OpenSSL 前的准备：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./config --prefix=/usr         \
         --openssldir=/etc/ssl \
         --libdir=lib          \
         shared                \
         zlib-dynamic</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>查看测试结果，输入：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make test</userinput></screen>
<!--
    <para>一个位于 40-test_rehash.t 中的子测试，在 LFS chroot 环境中会失败，但常规用户运行时便可通过。</para>
-->
    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">sed -i '/INSTALL_LIBS/s/libcrypto.a libssl.a//' Makefile
make MANSUFFIX=ssl install</userinput></screen>

    <para>如果有需要，安装文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/share/doc/openssl /usr/share/doc/openssl-1.1.1a
cp -vfr doc/* /usr/share/doc/openssl-1.1.1a</userinput></screen>

  </sect2>

  <sect2 id="contents-openssl" role="content">
    <title>OpenSSL 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>
          c_rehash 和 openssl
        </seg>
        <seg>
          libcrypto.{so,a} 和 libssl.{so,a}
        </seg>
        <seg>
          /etc/ssl,
          /usr/include/openssl,
          /usr/lib/engines 和
          /usr/share/doc/openssl-1.1.1a
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="c_rehash">
        <term><command moreinfo="none">c_rehash</command></term>
        <listitem>
          <para>
            用于扫描一个目录中的所有文件并为它们的 hash 值添加符号链接的 <application moreinfo="none">Perl</application> 脚本。
          </para>
          <indexterm zone="ch-system-openssl c_rehash" significance="normal">
            <primary sortas="b-c_rehash">c_rehash</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="openssl-prog">
        <term><command moreinfo="none">openssl</command></term>
        <listitem>
          <para>
            一个从 shell 使用 <application moreinfo="none">OpenSSL</application> 的加密库的各种加密功能的命令行工具。功能广泛，十分有用，参考 <command moreinfo="none">man 1 openssl</command>。</para>
          <indexterm zone="ch-system-openssl openssl-prog" significance="normal">
            <primary sortas="b-openssl">openssl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcrypto">
        <term><filename class="libraryfile" moreinfo="none">libcrypto.so</filename></term>
        <listitem>
          <para>
            实现了各种互联网标准中极大部分加密算法。该库提供的服务，被 <application moreinfo="none">OpenSSL</application> 用于实现 SSL， TLS 和 S/MIME，并且它们还被用于实现 <application moreinfo="none">OpenSSH</application>，<application moreinfo="none">OpenPGP</application>，以及其他加密标准。
          </para>
          <indexterm zone="ch-system-openssl libcrypto" significance="normal">
            <primary sortas="c-libcrypto">libcrypto.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libssl">
        <term><filename class="libraryfile" moreinfo="none">libssl.so</filename></term>
        <listitem>
          <para>
            实现传输层安全（TLS v1）协议。提供丰富的 API，文档参见 <command moreinfo="none">man 3 ssl</command>。
          </para>
          <indexterm zone="ch-system-openssl libssl" significance="normal">
            <primary sortas="c-libssl">libssl.so</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-Python" role="wrap">
  <?dbhtml filename="Python.html"?>

  

  <title>Python-3.7.2</title>

  <indexterm zone="ch-system-Python" significance="normal">
    <primary sortas="a-python">python</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>软件包 Python 3 包含了 Python 的开发环境。对于面向对象编程，书写脚本，构建大型程序的原型，或者开发整个应用程序而言，非常有用。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.0 SBU</seg>
        <seg>392 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Python 3</title>

    <para>编译 Python 前的准备：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr       \
            --enable-shared     \
            --with-system-expat \
            --with-system-ffi   \
            --with-ensurepip=yes</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

    <varlistentry>
      <term><parameter moreinfo="none">--with-system-expat</parameter></term>
      <listitem>
        <para>该参数用于启用 <application moreinfo="none">Expat</application> 系统版本的链接。</para>
       </listitem>
     </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">--with-system-ffi</parameter></term>
      <listitem>
        <para>该参数用于启用 <application moreinfo="none">libffi</application> 系统版本的链接。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter moreinfo="none">--with-ensurepip=yes</parameter></term>
      <listitem>
        <para>该参数用于启用 <command moreinfo="none">pip</command> 和 <command moreinfo="none">setuptools</command> 打包程序的构建。</para>
      </listitem>
    </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>测试套件需要 TK 和 X Windows 会话，直至 BLFS 中重新安装 Python 3 之前都执行不了。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
chmod -v 755 /usr/lib/libpython3.7m.so
chmod -v 755 /usr/lib/libpython3.so</userinput></screen>

    <variablelist>
      <title>安装命令的含义：</title>
<!-- ======  Change 7m if Python minor version changes ======= -->
    <varlistentry>
      <term><command moreinfo="none">chmod -v 755 /usr/lib/libpython3.{7m.,}so</command></term>
      <listitem>
        <para>修复库的权限问题，同其他库保持一致。</para>
      </listitem>
    </varlistentry>

    </variablelist>

    <para>如果需要，安装预格式化好的文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -v -dm755 /usr/share/doc/python-3.7.2/html 

tar --strip-components=1  \
    --no-same-owner       \
    --no-same-permissions \
    -C /usr/share/doc/python-3.7.2/html \
    -xvf ../python-3.7.2-docs-html.tar.bz2</userinput></screen>

    <variablelist>
      <title>文档安装命令的含义：</title>

    <varlistentry>
      <term><option>--no-same-owner</option> and --no-same-permissions</term>
      <listitem>
        <para>确保安装文件的归属和权限是正确的。没有这个选项的话，运行 <application moreinfo="none">tar</application> 时会以上游创建者的身份安装软件包内的文件。
        </para>
      </listitem>
    </varlistentry>

    </variablelist>

  </sect2>

  <sect2 id="contents-python" role="content">
    <title>Python 3 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>
          2to3, idle3, pydoc3, python3, python3-config, pyvenv
        </seg>
        <seg>
          libpython3.7m.so 和 libpython3.so
        </seg>
        <seg>
          /usr/include/python3.7m, /usr/lib/python3 和
          /usr/share/doc/python-3.7.2
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="python-2to3">
        <term><command moreinfo="none">2to3</command></term>
        <listitem>
          <para>
            一个用于读取 <application moreinfo="none">Python 2.x</application> 源代码并实施一系列的修复，将其转化称有效的 <application moreinfo="none">Python 3.x</application> 代码的 <application moreinfo="none">Python</application> 程序。
          </para>
          <indexterm zone="ch-system-Python" significance="normal">
            <primary sortas="b-2to3">2to3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="idle3">
        <term><command moreinfo="none">idle3</command></term>
        <listitem>
          <para>
            一个用于打开 <application moreinfo="none">Python</application>
            自带的 GUI 编辑器的封装脚本。为了让该脚本能运行，你必须在安装 Python 前先安装 <application moreinfo="none">Tk</application>，这样 Tkinter
            Python 模块才会构建。
          </para>
          <indexterm zone="ch-system-Python" significance="normal">
            <primary sortas="b-idle3">idle3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pydoc3">
        <term><command moreinfo="none">pydoc3</command></term>
        <listitem>
          <para>
            <application moreinfo="none">Python</application> 的文档工具。
          </para>
          <indexterm zone="ch-system-Python" significance="normal">
            <primary sortas="b-pydoc3">pydoc3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="python3">
        <term><command moreinfo="none">python3</command></term>
        <listitem>
          <para>
            一种解释性的，交互式的，面向对象的编程语言。
          </para>
          <indexterm zone="ch-system-Python" significance="normal">
            <primary sortas="b-python3">python3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pyvenv">
        <term><command moreinfo="none">pyvenv</command></term>
        <listitem>
          <para>
            在一个或多个目标目录中，创建虚拟 <application moreinfo="none">Python</application> 环境。
          </para>
          <indexterm zone="ch-system-Python" significance="normal">
            <primary sortas="b-pyvenv">pyvenv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-ninja" role="wrap">
  <?dbhtml filename="ninja.html"?>

  

  <title>Ninja-1.9.0</title>

  <indexterm zone="ch-system-ninja" significance="normal">
    <primary sortas="a-Ninja">Ninja</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Ninja 是一个专注于速度的小型构件系统。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>65 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Ninja</title>

    <para>在运行时，ninja 通常会并行最大数量的进程。默认值是系统的核心数乘以二。有些时候会导致 CPU 过热，或者内存容量不足。如果是命令行运行，通过传递 -jN 参数可以限制并行的进程数，但是有些软件包虽然潜入了 ninja 的执行却不会传递 -j 参数。</para>

    <para>通过使用下方 <emphasis>可选</emphasis> 过程，让用户能够通过环境变量 NINJAJOBS 来限制并行进程的数量。<command moreinfo="none">例如</command>， 设定：

     <!--Using <command> here to make the output bold.  We really don't want
     users setting this now and experience shows that many users blindly
     copy/paste anything in a box. -->

    <screen format="linespecific">export NINJAJOBS=4</screen>

    将限制 ninja 最多仅四个进程并行。</para>

    <para>如果需要，运行以下命令以添加使用环境变量 NINJAJOBS 的功能：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/int Guess/a \
  int   j = 0;\
  char* jobs = getenv( "NINJAJOBS" );\
  if ( jobs != NULL ) j = atoi( jobs );\
  if ( j &gt; 0 ) return j;\
' src/ninja.cc</userinput></screen>

    <para>构建 Ninja：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">python3 configure.py --bootstrap</userinput></screen>

    <variablelist>
      <title>构建参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--bootstrap</parameter></term>
        <listitem>
          <para>这个参数强迫 ninja 重新构建自身以适应当前系统。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>查看测试结果，输入：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">python3 configure.py
./ninja ninja_test
./ninja_test --gtest_filter=-SubprocessTest.SetWithLots</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -vm755 ninja /usr/bin/
install -vDm644 misc/bash-completion /usr/share/bash-completion/completions/ninja
install -vDm644 misc/zsh-completion  /usr/share/zsh/site-functions/_ninja</userinput></screen>

  </sect2>

  <sect2 id="contents-ninja" role="content">
    <title>Ninja 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>ninja</seg>
      </seglistitem>
    </segmentedlist>
    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="ninja">
        <term><command moreinfo="none">ninja</command></term>
        <listitem>
          <para>Ninja 构件系统。</para>
          <indexterm zone="ch-system-ninja ninja" significance="normal">
            <primary sortas="b-ninja">ninja</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-meson" role="wrap">
  <?dbhtml filename="meson.html"?>

  

  <title>Meson-0.49.2</title>

  <indexterm zone="ch-system-meson" significance="normal">
    <primary sortas="a-Meson">Meson</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Meson 是一个开源代码构建系统，不仅速度非常快，而且更重要的是对用户极其友好。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>
      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>24 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Meson</title>

    <para>通过下列命令编译 Meson：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">python3 setup.py build</userinput></screen>

    <para>这个软件包还没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">python3 setup.py install --root=dest
cp -rv dest/* /</userinput></screen>

    <variablelist>
      <title>安装参数的含义：</title>
      
      <varlistentry>
        <term><parameter moreinfo="none">--root=dest</parameter></term>
        <listitem>
          <para>默认情况下执行命令 <command moreinfo="none">python3 setup.py install</command> 会将所有文件（比如 man 手册）安装到 Python Eggs。指定根路径则 <command moreinfo="none">setup.py</command>会将这些文件安装到标准层次目录。然后只需要复制层次目录，文件即处于标准位置。</para>
        </listitem>
      </varlistentry>

    </variablelist>
  </sect2>

  <sect2 id="contents-meson" role="content">
    <title>Meson 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>meson, mesonconf, mesonintrospect, mesontest, and wraptool</seg>
		<seg>/usr/lib/python3.7/site-packages/meson-0.49.2-py3.7.egg</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="meson">
		<term><command moreinfo="none">meson</command></term>
        <listitem>
          <para> 高生产率构建系统</para>
          <indexterm zone="ch-system-meson meson" significance="normal">
            <primary sortas="b-meson">meson</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mesonconf">
		<term><command moreinfo="none">mesonconf</command></term>
        <listitem>
          <para>Meson 构建系统配置工具</para>
          <indexterm zone="ch-system-meson mesonconf" significance="normal">
            <primary sortas="b-mesonconf">mesonconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mesonintrospect">
		<term><command moreinfo="none">mesonintrospect</command></term>
        <listitem>
          <para>Meson 构建系统信息提取工具</para>
          <indexterm zone="ch-system-meson mesonintrospect" significance="normal">
            <primary sortas="b-mesonintrospect">mesonintrospect</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mesontest">
		<term><command moreinfo="none">mesontest</command></term>
        <listitem>
          <para>Meson 构建系统测试工具</para>
          <indexterm zone="ch-system-meson mesontest" significance="normal">
            <primary sortas="b-mesontest">mesontest</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wraptool">
		<term><command moreinfo="none">wraptool</command></term>
        <listitem>
          <para>源码依赖下载器</para>
          <indexterm zone="ch-system-meson wraptool" significance="normal">
            <primary sortas="b-wraptool">wraptool</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-coreutils" role="wrap">
  <?dbhtml filename="coreutils.html"?>

  

  <title>Coreutils-8.30</title>

  <indexterm zone="ch-system-coreutils" significance="normal">
    <primary sortas="a-Coreutils">Coreutils</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Coreutils 软件包包含用于显示和设置基本系统特性的工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>2.6 SBU</seg>
        <seg>190 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Coreutils</title>

    <para>POSIX 要求 Coreutils 中的程序即使在多字节语言环境也能正确识别字符边界。下面的补丁修复这个不兼容性以及其它一些和国际化相关的错误。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">patch -Np1 -i ../coreutils-8.30-i18n-1.patch</userinput></screen>

    <note>
      <para>之前在这个补丁中发现了很多错误。当向 Coreutils 维护者报告新错误的时候，请先检查没有该补丁是否可以重现该错误。</para>
    </note>

   <!-- this has been fixed in upstream gnulib, when a new version of
   coreutils is released, please check #4055 to see if the change has been
   picked up in this package -->
   <para>抑制测试在某些机器上可能出现的无限循环：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '/test.lock/s/^/#/' gnulib-tests/gnulib.mk</userinput></screen>

    <para>现在准备编译 Coreutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">autoreconf -fiv
FORCE_UNSAFE_CONFIGURE=1 ./configure \
            --prefix=/usr            \
            --enable-no-install-program=kill,uptime</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><command moreinfo="none">autoreconf</command></term>
        <listitem>
          <para>此命令更新已有的配置文件，以使其和 automake 最新生成的一致。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><envar>FORCE_UNSAFE_CONFIGURE=1</envar></term>
        <listitem>
          <para>该环境变量允许以 root 用户权限编译软件包。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-no-install-program=kill,uptime</parameter></term>
        <listitem>
          <para>该选项的目的是防止 Coreutils 安装其它软件包后面会安装的二进制包。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">FORCE_UNSAFE_CONFIGURE=1 make</userinput></screen>

    <para>如果不运行测试套件的话跳到「安装软件包」</para>

    <para>现在可以运行测试套件了。首先，运行需要以 <systemitem class="username" moreinfo="none">root</systemitem> 用户运行的测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make NON_ROOT_USERNAME=nobody check-root</userinput></screen>

    <para>我们会以 <systemitem class="username" moreinfo="none">nobody</systemitem> 用户运行剩下的测试。但是，一些测试要求用户属于多个组。为了不跳过这些测试，我们会添加一个临时的组并添加用户 <systemitem class="username" moreinfo="none">nobody</systemitem> 作为它的成员：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">echo "dummy:x:1000:nobody" &gt;&gt; /etc/group</userinput></screen>

    <para>修复一些权限问题以便非 root 用户可以编译和运行测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">chown -Rv nobody . </userinput></screen>

    <para>现在运行测试。确保 <userinput moreinfo="none">su</userinput> 环境中的 PATH 环境变量包含了 /tools/bin。</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">su nobody -s /bin/bash \
          -c "PATH=$PATH make RUN_EXPENSIVE_TESTS=yes check"</userinput></screen>

    <para>已知测试程序 test-getlogin 在部分构建的系统环境（如 chroot 环境）中会失败，章节结束后运行便会通过。已知测试程序 tty.sh 也会失败。</para>

    <para>移除临时组：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">sed -i '/dummy/d' /etc/group</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>移动程序到 FHS 指定的位置：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/{cat,chgrp,chmod,chown,cp,date,dd,df,echo} /bin
mv -v /usr/bin/{false,ln,ls,mkdir,mknod,mv,pwd,rm} /bin
mv -v /usr/bin/{rmdir,stty,sync,true,uname} /bin
mv -v /usr/bin/chroot /usr/sbin
mv -v /usr/share/man/man1/chroot.1 /usr/share/man/man8/chroot.8
sed -i s/\"1\"/\"8\"/1 /usr/share/man/man8/chroot.8</userinput></screen>

    

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/{head,nice,sleep,touch} /bin</userinput></screen>

  </sect2>

  <sect2 id="contents-coreutils" role="content">
    <title>Coreutils 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>[, base32, base64, basename, cat, chcon, chgrp, chmod, chown,
        chroot, cksum, comm, cp, csplit, cut, date, dd, df, dir, dircolors,
        dirname, du, echo, env, expand, expr, factor, false, fmt, fold, groups,
        head, hostid, id, install, join, link, ln, logname, ls, md5sum, mkdir,
        mkfifo, mknod, mktemp, mv, nice, nl, nohup, nproc, numfmt, od, paste,
        pathchk, pinky, pr, printenv, printf, ptx, pwd, readlink, realpath, rm,
        rmdir, runcon, seq, sha1sum, sha224sum, sha256sum, sha384sum,
        sha512sum, shred, shuf, sleep, sort, split, stat, stdbuf, stty, sum,
        sync, tac, tail, tee, test, timeout, touch, tr, true, truncate, tsort,
        tty, uname, unexpand, uniq, unlink, users, vdir, wc, who, whoami, and
        yes</seg>
        <seg>libstdbuf.so</seg>
        <seg>/usr/libexec/coreutils</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="base32">
        <term><command moreinfo="none">base32</command></term>
        <listitem>
          <para>根据 base32（RFC 4648）规范编码和解码数据</para>
          <indexterm zone="ch-system-coreutils base64" significance="normal">
            <primary sortas="b-base64">base64</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="base64">
        <term><command moreinfo="none">base64</command></term>
        <listitem>
          <para>根据 base64（RFC 4648）规范编码和解码数据</para>
          <indexterm zone="ch-system-coreutils base64" significance="normal">
            <primary sortas="b-base64">base64</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="basename">
        <term><command moreinfo="none">basename</command></term>
        <listitem>
          <para>从文件名称中抽取路径和后缀</para>
          <indexterm zone="ch-system-coreutils basename" significance="normal">
            <primary sortas="b-basename">basename</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cat">
        <term><command moreinfo="none">cat</command></term>
        <listitem>
          <para>将文件连接到标准输出</para>
          <indexterm zone="ch-system-coreutils cat" significance="normal">
            <primary sortas="b-cat">cat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chcon">
        <term><command moreinfo="none">chcon</command></term>
        <listitem>
          <para>改变文件和目录的安全上下文</para>
          <indexterm zone="ch-system-coreutils chcon" significance="normal">
            <primary sortas="b-chcon">chcon</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chgrp">
        <term><command moreinfo="none">chgrp</command></term>
        <listitem>
          <para>更改文件和目录的组所有者</para>
          <indexterm zone="ch-system-coreutils chgrp" significance="normal">
            <primary sortas="b-chgrp">chgrp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chmod">
        <term><command moreinfo="none">chmod</command></term>
        <listitem>
          <para>更改每个文件为指定模式的权限；模式可以是要实现更改的符号表示 或者表示新权限的十进制数字</para>
          <indexterm zone="ch-system-coreutils chmod" significance="normal">
            <primary sortas="b-chmod">chmod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chown">
        <term><command moreinfo="none">chown</command></term>
        <listitem>
          <para>更改文件和目录的用户和/或组所有者</para>
          <indexterm zone="ch-system-coreutils chown" significance="normal">
            <primary sortas="b-chown">chown</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chroot">
        <term><command moreinfo="none">chroot</command></term>
        <listitem>
          <para>使用指定目录作为 <filename class="directory" moreinfo="none">/</filename> 目录运行命令</para>
          <indexterm zone="ch-system-coreutils chroot" significance="normal">
            <primary sortas="b-chroot">chroot</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cksum">
        <term><command moreinfo="none">cksum</command></term>
        <listitem>
          <para>输出指定文件的循环冗余检验（CRC）校验码和字节数目</para>
          <indexterm zone="ch-system-coreutils cksum" significance="normal">
            <primary sortas="b-cksum">cksum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="comm">
        <term><command moreinfo="none">comm</command></term>
        <listitem>
          <para>比较两个排序后的文件，以三列输出不用的行和相同的行</para>
          <indexterm zone="ch-system-coreutils comm" significance="normal">
            <primary sortas="b-comm">comm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cp">
        <term><command moreinfo="none">cp</command></term>
        <listitem>
          <para>复制文件</para>
          <indexterm zone="ch-system-coreutils cp" significance="normal">
            <primary sortas="b-cp">cp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="csplit">
        <term><command moreinfo="none">csplit</command></term>
        <listitem>
          <para>将指定文件分割为几个新的文件，根据指定的模式或者行数分割并 输出每个新文件的字节数</para>
          <indexterm zone="ch-system-coreutils csplit" significance="normal">
            <primary sortas="b-csplit">csplit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cut">
        <term><command moreinfo="none">cut</command></term>
        <listitem>
          <para>根据指定的域或位置，选择输出行的组成</para>
          <indexterm zone="ch-system-coreutils cut" significance="normal">
            <primary sortas="b-cut">cut</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="date">
        <term><command moreinfo="none">date</command></term>
        <listitem>
          <para>根据指定格式显示当前时间，或设置系统日期</para>
          <indexterm zone="ch-system-coreutils date" significance="normal">
            <primary sortas="b-date">date</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dd">
        <term><command moreinfo="none">dd</command> </term>
        <listitem>
          <para>用给定的块大小和数目复制文件，同时可以进行一些转换</para>
          <indexterm zone="ch-system-coreutils dd" significance="normal">
            <primary sortas="b-dd">dd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="df">
        <term><command moreinfo="none">df</command></term>
        <listitem>
          <para>报告所有挂载的文件系统中可用（和已用）磁盘空间，或只是 含有指定文件的文件系统</para>
          <indexterm zone="ch-system-coreutils df" significance="normal">
            <primary sortas="b-df">df</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dir">
        <term><command moreinfo="none">dir</command></term>
        <listitem>
          <para>列出指定目的的内容（和 <command moreinfo="none">ls</command> 命令相同）</para>
          <indexterm zone="ch-system-coreutils dir" significance="normal">
            <primary sortas="b-dir">dir</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dircolors">
        <term><command moreinfo="none">dircolors</command></term>
        <listitem>
          <para>输出设置 <envar>LS_COLOR</envar> 环境变量的命令，用于更改 <command moreinfo="none">ls</command> 使用的颜色模式</para>
          <indexterm zone="ch-system-coreutils dircolors" significance="normal">
            <primary sortas="b-dircolors">dircolors</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dirname">
        <term><command moreinfo="none">dirname</command></term>
        <listitem>
          <para>从一个文件名称中抽取非目录后缀</para>
          <indexterm zone="ch-system-coreutils dirname" significance="normal">
            <primary sortas="b-dirname">dirname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="du">
        <term><command moreinfo="none">du</command></term>
        <listitem>
          <para>报告当前目录使用的磁盘空间，根据指定的每个文件夹（包括子文件夹） 或每个指定的文件</para>
          <indexterm zone="ch-system-coreutils du" significance="normal">
            <primary sortas="b-du">du</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="echo">
        <term><command moreinfo="none">echo</command></term>
        <listitem>
          <para>显示给定的字符串</para>
          <indexterm zone="ch-system-coreutils echo" significance="normal">
            <primary sortas="b-echo">echo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="env">
        <term><command moreinfo="none">env</command></term>
        <listitem>
          <para>在更改后的环境中运行命令</para>
          <indexterm zone="ch-system-coreutils env" significance="normal">
            <primary sortas="b-env">env</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="expand">
        <term><command moreinfo="none">expand</command></term>
        <listitem>
          <para>把 tab 键转换为空格</para>
          <indexterm zone="ch-system-coreutils expand" significance="normal">
            <primary sortas="b-expand">expand</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="expr">
        <term><command moreinfo="none">expr</command></term>
        <listitem>
          <para>计算表达式</para>
          <indexterm zone="ch-system-coreutils expr" significance="normal">
            <primary sortas="b-expr">expr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="factor">
        <term><command moreinfo="none">factor</command></term>
        <listitem>
          <para>输出所有指定整数的质数因子</para>
          <indexterm zone="ch-system-coreutils factor" significance="normal">
            <primary sortas="b-factor">factor</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="false">
        <term><command moreinfo="none">false</command></term>
        <listitem>
          <para>什么都不做；总是以指示失败的状态码退出</para>
          <indexterm zone="ch-system-coreutils false" significance="normal">
            <primary sortas="b-false">false</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fmt">
        <term><command moreinfo="none">fmt</command></term>
        <listitem>
          <para>重新格式化给定文件中的段落</para>
          <indexterm zone="ch-system-coreutils fmt" significance="normal">
            <primary sortas="b-fmt">fmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fold">
        <term><command moreinfo="none">fold</command></term>
        <listitem>
          <para>折叠指定文件的行</para>
          <indexterm zone="ch-system-coreutils fold" significance="normal">
            <primary sortas="b-fold">fold</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groups">
        <term><command moreinfo="none">groups</command></term>
        <listitem>
          <para>报告一个用户的组成员</para>
          <indexterm zone="ch-system-coreutils groups" significance="normal">
            <primary sortas="b-groups">groups</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="head">
        <term><command moreinfo="none">head</command></term>
        <listitem>
          <para>输出指定文件的前十行（或指定数目行数）</para>
          <indexterm zone="ch-system-coreutils head" significance="normal">
            <primary sortas="b-head">head</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hostid">
        <term><command moreinfo="none">hostid</command></term>
        <listitem>
          <para>报告主机的数字标识符（以十六进制）</para>
          <indexterm zone="ch-system-coreutils hostid" significance="normal">
            <primary sortas="b-hostid">hostid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="id">
        <term><command moreinfo="none">id</command></term>
        <listitem>
          <para>报告当前用户或指定用户的有效 用户 ID、组 ID 以及组成员</para>
          <indexterm zone="ch-system-coreutils id" significance="normal">
            <primary sortas="b-id">id</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="install">
        <term><command moreinfo="none">install</command> </term>
        <listitem>
          <para>复制文件的同时设置权限模式，如果可以的话包括用户和组</para>
          <indexterm zone="ch-system-coreutils install" significance="normal">
            <primary sortas="b-install">install</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="join">
        <term><command moreinfo="none">join</command></term>
        <listitem>
          <para>从两个单独的文件中连接有相同域的行</para>
          <indexterm zone="ch-system-coreutils join" significance="normal">
            <primary sortas="b-join">join</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="link">
        <term><command moreinfo="none">link</command></term>
        <listitem>
          <para>用指定的名称创建到一个文件的硬链接</para>
          <indexterm zone="ch-system-coreutils link" significance="normal">
            <primary sortas="b-link">link</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ln">
        <term><command moreinfo="none">ln</command></term>
        <listitem>
          <para>在文件之间建立硬链接或软（符号）链接</para>
          <indexterm zone="ch-system-coreutils ln" significance="normal">
            <primary sortas="b-ln">ln</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="logname">
        <term><command moreinfo="none">logname</command></term>
        <listitem>
          <para>报告当前用户的登录名</para>
          <indexterm zone="ch-system-coreutils logname" significance="normal">
            <primary sortas="b-logname">logname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ls">
        <term><command moreinfo="none">ls</command></term>
        <listitem>
          <para>列出给定目录的内容</para>
          <indexterm zone="ch-system-coreutils ls" significance="normal">
            <primary sortas="b-ls">ls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="md5sum">
        <term><command moreinfo="none">md5sum</command></term>
        <listitem>
          <para>报告或检查消息摘要 5（MD5） 校验码</para>
          <indexterm zone="ch-system-coreutils md5sum" significance="normal">
            <primary sortas="b-md5sum">md5sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkdir">
        <term><command moreinfo="none">mkdir</command></term>
        <listitem>
          <para>用指定的名称新建目录</para>
          <indexterm zone="ch-system-coreutils mkdir" significance="normal">
            <primary sortas="b-mkdir">mkdir</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfifo">
        <term><command moreinfo="none">mkfifo</command></term>
        <listitem>
          <para>用指定的名称在 UNIX 中创建先进先出（FIFO） 的「命名管道」</para>
          <indexterm zone="ch-system-coreutils mkfifo" significance="normal">
            <primary sortas="b-mkfifo">mkfifo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mknod">
        <term><command moreinfo="none">mknod</command></term>
        <listitem>
          <para>用指定的名称创建设备结点；设备结点是一个特殊字符文件、特殊块文件或先进先出</para>
          <indexterm zone="ch-system-coreutils mknod" significance="normal">
            <primary sortas="b-mknod">mknod</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mktemp">
        <term><command moreinfo="none">mktemp</command></term>
        <listitem>
          <para>以安全方式新建临时文件；在脚本中使用</para>
        <indexterm zone="ch-system-coreutils mktemp" significance="normal">
          <primary sortas="b-mktemp">mktemp</primary>
        </indexterm>
       </listitem>
     </varlistentry>

      <varlistentry id="mv">
        <term><command moreinfo="none">mv</command></term>
        <listitem>
          <para>移动或重命名文件或目录</para>
          <indexterm zone="ch-system-coreutils mv" significance="normal">
            <primary sortas="b-mv">mv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nice">
        <term><command moreinfo="none">nice</command></term>
        <listitem>
          <para>以更改后的调度优先级运行程序</para>
          <indexterm zone="ch-system-coreutils nice" significance="normal">
            <primary sortas="b-nice">nice</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nl">
        <term><command moreinfo="none">nl</command></term>
        <listitem>
          <para>标记指定文件的行号</para>
          <indexterm zone="ch-system-coreutils nl" significance="normal">
            <primary sortas="b-nl">nl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nohup">
        <term><command moreinfo="none">nohup</command></term>
        <listitem>
          <para>以不能被挂起方式运行命令，输出重定向到一个日志文件</para>
          <indexterm zone="ch-system-coreutils nohup" significance="normal">
            <primary sortas="b-nohup">nohup</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nproc">
        <term><command moreinfo="none">nproc</command></term>
        <listitem>
          <para>输出进程可用的处理单元数目</para>
          <indexterm zone="ch-system-coreutils nproc" significance="normal">
            <primary sortas="b-nproc">nproc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="numfmt">
        <term><command moreinfo="none">numfmt</command></term>
        <listitem>
          <para>转换数字为人可读字符串或者相反</para>
          <indexterm zone="ch-system-coreutils numfmt" significance="normal">
            <primary sortas="b-numfmt">numfmt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="od">
        <term><command moreinfo="none">od</command></term>
        <listitem>
          <para>以十进制或其他格式转储文件</para>
          <indexterm zone="ch-system-coreutils od" significance="normal">
            <primary sortas="b-od">od</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="paste">
        <term><command moreinfo="none">paste</command></term>
        <listitem>
          <para>合并指定文件，用 tab 字符分隔，以行并列方式连续合并</para>
          <indexterm zone="ch-system-coreutils paste" significance="normal">
            <primary sortas="b-paste">paste</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pathchk">
        <term><command moreinfo="none">pathchk</command></term>
        <listitem>
          <para>检查文件名是否可用</para>
          <indexterm zone="ch-system-coreutils pathchk" significance="normal">
            <primary sortas="b-pathchk">pathchk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pinky">
        <term><command moreinfo="none">pinky</command></term>
        <listitem>
          <para>轻量级的 finger 客户端；报告指定用户的信息</para>
          <indexterm zone="ch-system-coreutils pinky" significance="normal">
            <primary sortas="b-pinky">pinky</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pr">
        <term><command moreinfo="none">pr</command></term>
        <listitem>
          <para>对文件进行分页分行用于打印</para>
          <indexterm zone="ch-system-coreutils pr" significance="normal">
            <primary sortas="b-pr">pr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="printenv">
        <term><command moreinfo="none">printenv</command></term>
        <listitem>
          <para>输出环境</para>
          <indexterm zone="ch-system-coreutils printenv" significance="normal">
            <primary sortas="b-printenv">printenv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="printf">
        <term><command moreinfo="none">printf</command></term>
        <listitem>
          <para>根据指定格式打印指定参数，类似于 C 语言的 printf 函数</para>
          <indexterm zone="ch-system-coreutils printf" significance="normal">
            <primary sortas="b-printf">printf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ptx">
        <term><command moreinfo="none">ptx</command></term>
        <listitem>
          <para>用文中的每个关键字，根据文件的内容中建立重排索引</para>
          <indexterm zone="ch-system-coreutils ptx" significance="normal">
            <primary sortas="b-ptx">ptx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pwd">
        <term><command moreinfo="none">pwd</command></term>
        <listitem>
          <para>报告当前工作目录的名称</para>
          <indexterm zone="ch-system-coreutils pwd" significance="normal">
            <primary sortas="b-pwd">pwd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="readlink">
        <term><command moreinfo="none">readlink</command></term>
        <listitem>
          <para>报告指定符号链接的值</para>
          <indexterm zone="ch-system-coreutils readlink" significance="normal">
            <primary sortas="b-readlink">readlink</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="realpath">
        <term><command moreinfo="none">realpath</command></term>
        <listitem>
          <para>打印解释后路径</para>
          <indexterm zone="ch-system-coreutils realpath" significance="normal">
            <primary sortas="b-realpath">realpath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rm">
        <term><command moreinfo="none">rm</command></term>
        <listitem>
          <para>删除文件或目录</para>
          <indexterm zone="ch-system-coreutils rm" significance="normal">
            <primary sortas="b-rm">rm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rmdir">
        <term><command moreinfo="none">rmdir</command></term>
        <listitem>
          <para>如果目录为空则删除</para>
          <indexterm zone="ch-system-coreutils rmdir" significance="normal">
            <primary sortas="b-rmdir">rmdir</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="runcon">
        <term><command moreinfo="none">runcon</command></term>
        <listitem>
          <para>以指定安全上下文运行命令</para>
          <indexterm zone="ch-system-coreutils runcon" significance="normal">
            <primary sortas="b-runcon">runcon</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="seq">
        <term><command moreinfo="none">seq</command></term>
        <listitem>
          <para>用指定的范围和增长步长输出一序列数字</para>
          <indexterm zone="ch-system-coreutils seq" significance="normal">
            <primary sortas="b-seq">seq</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sha1sum">
        <term><command moreinfo="none">sha1sum</command></term>
        <listitem>
          <para>打印或检查 160-bit 安全哈希算法1（SHA1） 校验码</para>
          <indexterm zone="ch-system-coreutils sha1sum" significance="normal">
            <primary sortas="b-sha1sum">sha1sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sha224sum">
        <term><command moreinfo="none">sha224sum</command></term>
        <listitem>
          <para>打印或检查 224-bit 安全哈希算法校验码</para>
          <indexterm zone="ch-system-coreutils sha224sum" significance="normal">
            <primary sortas="b-sha224sum">sha224sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sha256sum">
        <term><command moreinfo="none">sha256sum</command></term>
        <listitem>
          <para>打印或检查 256-bit 安全哈希算法校验码</para>
          <indexterm zone="ch-system-coreutils sha256sum" significance="normal">
            <primary sortas="b-sha256sum">sha256sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sha384sum">
        <term><command moreinfo="none">sha384sum</command></term>
        <listitem>
          <para>打印或检查 384-bit 安全哈希算法校验码</para>
          <indexterm zone="ch-system-coreutils sha384sum" significance="normal">
            <primary sortas="b-sha384sum">sha384sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sha512sum">
        <term><command moreinfo="none">sha512sum</command></term>
        <listitem>
          <para>打印或检查 512-bit 安全哈希算法校验码</para>
          <indexterm zone="ch-system-coreutils sha512sum" significance="normal">
            <primary sortas="b-sha512sum">sha512sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="shred">
        <term><command moreinfo="none">shred</command></term>
        <listitem>
          <para>用复杂形式多次重写指定文件，使得难以恢复其中的数据</para>
          <indexterm zone="ch-system-coreutils shred" significance="normal">
            <primary sortas="b-shred">shred</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="shuf">
        <term><command moreinfo="none">shuf</command></term>
        <listitem>
          <para>打乱文本行</para>
          <indexterm zone="ch-system-coreutils shuf" significance="normal">
            <primary sortas="b-shuf">shuf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sleep">
        <term><command moreinfo="none">sleep</command></term>
        <listitem>
          <para>暂停指定时间</para>
          <indexterm zone="ch-system-coreutils sleep" significance="normal">
            <primary sortas="b-sleep">sleep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sort">
        <term><command moreinfo="none">sort</command></term>
        <listitem>
          <para>排序给定文件的行</para>
          <indexterm zone="ch-system-coreutils sort" significance="normal">
            <primary sortas="b-sort">sort</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="split">
        <term><command moreinfo="none">split</command></term>
        <listitem>
          <para>根据大小或行数分割文件为多个块</para>
          <indexterm zone="ch-system-coreutils split" significance="normal">
            <primary sortas="b-split">split</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="stat">
        <term><command moreinfo="none">stat</command></term>
        <listitem>
          <para>显示文件或文件系统状态</para>
          <indexterm zone="ch-system-coreutils stat" significance="normal">
            <primary sortas="b-stat">stat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="stdbuf">
        <term><command moreinfo="none">stdbuf</command></term>
        <listitem>
          <para>用改变后的缓冲操作在标准流上运行命令</para>
          <indexterm zone="ch-system-coreutils stdbuf" significance="normal">
            <primary sortas="b-stdbuf">stdbuf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="stty">
        <term><command moreinfo="none">stty</command></term>
        <listitem>
          <para>设置或报告终端行设置</para>
          <indexterm zone="ch-system-coreutils stty" significance="normal">
            <primary sortas="b-stty">stty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sum">
        <term><command moreinfo="none">sum</command></term>
        <listitem>
          <para>打印指定文件的校验码和块数目</para>
          <indexterm zone="ch-system-coreutils sum" significance="normal">
            <primary sortas="b-sum">sum</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sync">
        <term><command moreinfo="none">sync</command></term>
        <listitem>
          <para>清空文件系统缓存；强制更改块到磁盘并更新超级块</para>
          <indexterm zone="ch-system-coreutils sync" significance="normal">
            <primary sortas="b-sync">sync</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tac">
        <term><command moreinfo="none">tac</command></term>
        <listitem>
          <para>反向输出给定文件</para>
          <indexterm zone="ch-system-coreutils tac" significance="normal">
            <primary sortas="b-tac">tac</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tail">
        <term><command moreinfo="none">tail</command></term>
        <listitem>
          <para>输出每个给定文件的最后十行（或给定数目的行）</para>
          <indexterm zone="ch-system-coreutils tail" significance="normal">
            <primary sortas="b-tail">tail</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tee">
        <term><command moreinfo="none">tee</command></term>
        <listitem>
          <para>从标准输入读入并写出到标准输出和指定文件</para>
          <indexterm zone="ch-system-coreutils tee" significance="normal">
            <primary sortas="b-tee">tee</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="test">
        <term><command moreinfo="none">test</command></term>
        <listitem>
          <para>比较值并检查文件类型</para>
          <indexterm zone="ch-system-coreutils test" significance="normal">
            <primary sortas="b-test">test</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="timeout">
        <term><command moreinfo="none">timeout</command></term>
        <listitem>
          <para>有限时间内运行命令</para>
          <indexterm zone="ch-system-coreutils timeout" significance="normal">
            <primary sortas="b-timeout">timeout</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="touch">
        <term><command moreinfo="none">touch</command></term>
        <listitem>
          <para>更改文件时间戳，设置指定文件的访问和修改时间为当前时间； 如果文件不存在则创建空文件</para>
          <indexterm zone="ch-system-coreutils touch" significance="normal">
            <primary sortas="b-touch">touch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tr">
        <term><command moreinfo="none">tr</command></term>
        <listitem>
          <para>从标准输入转换、压缩并删除指定字符</para>
          <indexterm zone="ch-system-coreutils tr" significance="normal">
            <primary sortas="b-tr">tr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="true">
        <term><command moreinfo="none">true</command></term>
        <listitem>
          <para>不做任何事情，总是成功；总是以表示成功的状态码退出</para>
          <indexterm zone="ch-system-coreutils true" significance="normal">
            <primary sortas="b-true">true</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="truncate">
        <term><command moreinfo="none">truncate</command></term>
        <listitem>
          <para>压缩或扩展文件到特定大小</para>
          <indexterm zone="ch-system-coreutils truncate" significance="normal">
            <primary sortas="b-truncate">truncate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tsort">
        <term><command moreinfo="none">tsort</command></term>
        <listitem>
          <para>进行拓扑排序；根据指定文件的部分排序写出完全有序列表</para>
          <indexterm zone="ch-system-coreutils tsort" significance="normal">
            <primary sortas="b-tsort">tsort</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tty">
        <term><command moreinfo="none">tty</command></term>
        <listitem>
          <para>报告链接到标准输入的终端文件名称</para>
          <indexterm zone="ch-system-coreutils tty" significance="normal">
            <primary sortas="b-tty">tty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uname">
        <term><command moreinfo="none">uname</command></term>
        <listitem>
          <para>报告系统信息</para>
          <indexterm zone="ch-system-coreutils uname" significance="normal">
            <primary sortas="b-uname">uname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unexpand">
        <term><command moreinfo="none">unexpand</command></term>
        <listitem>
          <para>转换空格为 tab 键</para>
          <indexterm zone="ch-system-coreutils unexpand" significance="normal">
            <primary sortas="b-unexpand">unexpand</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uniq">
        <term><command moreinfo="none">uniq</command></term>
        <listitem>
          <para>忽略所有除非出现连续相同的行</para>
          <indexterm zone="ch-system-coreutils uniq" significance="normal">
            <primary sortas="b-uniq">uniq</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unlink">
        <term><command moreinfo="none">unlink</command></term>
        <listitem>
          <para>移除指定文件</para>
          <indexterm zone="ch-system-coreutils unlink" significance="normal">
            <primary sortas="b-unlink">unlink</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="users">
        <term><command moreinfo="none">users</command></term>
        <listitem>
          <para>报告当前登录的用户名</para>
          <indexterm zone="ch-system-coreutils users" significance="normal">
            <primary sortas="b-users">users</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vdir">
        <term><command moreinfo="none">vdir</command></term>
        <listitem>
          <para>和 <command moreinfo="none">ls -l</command> 相同</para>
          <indexterm zone="ch-system-coreutils vdir" significance="normal">
            <primary sortas="b-vdir">vdir</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wc">
        <term><command moreinfo="none">wc</command></term>
        <listitem>
          <para>报告给定文件的行数、单词数和字节数，以及给定多个文件时总的行数</para>
          <indexterm zone="ch-system-coreutils wc" significance="normal">
            <primary sortas="b-wc">wc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="who">
        <term><command moreinfo="none">who</command></term>
        <listitem>
          <para>报告谁登录了</para>
          <indexterm zone="ch-system-coreutils who" significance="normal">
            <primary sortas="b-who">who</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="whoami">
        <term><command moreinfo="none">whoami</command></term>
        <listitem>
          <para>报告和当前有效用户 ID 关联的用户名</para>
          <indexterm zone="ch-system-coreutils whoami" significance="normal">
            <primary sortas="b-whoami">whoami</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="yes">
        <term><command moreinfo="none">yes</command></term>
        <listitem>
          <para>重复输出「y」或指定的字符串直到被杀死</para>
          <indexterm zone="ch-system-coreutils yes" significance="normal">
            <primary sortas="b-yes">yes</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdbuf">
        <term><filename class="libraryfile" moreinfo="none">libstdbuf</filename></term>
        <listitem>
          <para><command moreinfo="none">stdbuf</command> 使用的库</para>
          <indexterm zone="ch-system-coreutils libstdbuf" significance="normal">
            <primary sortas="c-libstdbuf">libstdbuf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-tools-check" role="wrap">
  <?dbhtml filename="check.html"?>

  

  <title>Check-0.12.0</title>

  <indexterm zone="ch-tools-check" significance="normal">
    <primary sortas="a-Check">Check</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Check 是 C 语言的单元测试框架。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU （包含测试大于 3.0 SBU）</seg>
        <seg>12 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Check</title>

    <para>配置 Check 准备编译：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>构建软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>现在编译完成了。运行 Check 的测试套件，输入以下命令：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>注意，Check 的测试套件可能会占用挺长（上至 4 SBU）的时间。</para>

    <para>安装软件包，并修复脚本：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
sed -i '1 s/tools/usr/' /usr/bin/checkmk</userinput></screen>

  </sect2>

  <sect2 id="contents-check" role="content">
    <title>Check 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>checkmk</seg>
        <seg>libcheck.{a,so}</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="checkmk">
        <term><command moreinfo="none">checkmk</command></term>
        <listitem>
          <para>用于生成 C 语言单元测试的 Awk 脚本，这些用例可以配合 Check 单元测试框架使用</para>
          <indexterm zone="ch-tools-check checkmk" significance="normal">
            <primary sortas="b-checmk">checkmk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcheck">
        <term><filename class="libraryfile" moreinfo="none">libcheck.{a,so}</filename></term>
        <listitem>
          <para>包含允许测试程序调用 Check 的功能</para>
          <indexterm zone="ch-tools-check libcheck" significance="normal">
            <primary sortas="c-libcheck">libcheck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1> 
  <sect1 id="ch-system-diffutils" role="wrap">
  <?dbhtml filename="diffutils.html"?>

  

  <title>Diffutils-3.7</title>

  <indexterm zone="ch-system-diffutils" significance="normal">
    <primary sortas="a-Diffutils">Diffutils</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Diffutils 软件包包含显示文件和目录差异的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>36 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Diffutils</title>

    <para>准备编译 Diffutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 id="contents-diffutils" role="content">
    <title>Diffutils 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>cmp, diff, diff3, and sdiff</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="cmp">
        <term><command moreinfo="none">cmp</command></term>
        <listitem>
          <para>比较两个文件并报告字节差异</para>
          <indexterm zone="ch-system-diffutils cmp" significance="normal">
            <primary sortas="b-cmp">cmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="diff">
        <term><command moreinfo="none">diff</command></term>
        <listitem>
          <para>比较两个文件或目录并报告文件中的行差异</para>
          <indexterm zone="ch-system-diffutils diff" significance="normal">
            <primary sortas="b-diff">diff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="diff3">
        <term><command moreinfo="none">diff3</command></term>
        <listitem>
            <para>逐行比较三个文件</para>
            <indexterm zone="ch-system-diffutils diff3" significance="normal">
              <primary sortas="b-diff3">diff3</primary>
            </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sdiff">
        <term><command moreinfo="none">sdiff</command></term>
        <listitem>
          <para>比较两个文件并交互式输出结果</para>
          <indexterm zone="ch-system-diffutils sdiff" significance="normal">
            <primary sortas="b-sdiff">sdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gawk" role="wrap">
  <?dbhtml filename="gawk.html"?>

  

  <title>Gawk-4.2.1</title>

  <indexterm zone="ch-system-gawk" significance="normal">
    <primary sortas="a-Gawk">Gawk</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Gawk 软件包包含用于操作文本文件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>44 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gawk</title>

    <para>首先，确保哪些不需要的文件没有被安装：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/extras//' Makefile.in</userinput></screen>

    <para>准备编译 Gawk：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>如果需要的话，安装帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mkdir -v /usr/share/doc/gawk-4.2.1
cp    -v doc/{awkforai.txt,*.{eps,pdf,jpg}} /usr/share/doc/gawk-4.2.1</userinput></screen>

  </sect2>

  <sect2 id="contents-gawk" role="content">
    <title>Gawk 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>awk (链接到 gawk), gawk, 和 awk-4.2.1</seg>
        <seg>filefuncs.so, fnmatch.so, fork.so, inplace.so, ordchr.so,
        readdir.so, readfile.so, revoutput.so, revtwoway.so, rwarray.so,
        testext.so, and time.so</seg>
        <seg>/usr/lib/gawk, /usr/libexec/awk, /usr/share/awk, 和
        /usr/share/doc/gawk-4.2.1</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="awk">
        <term><command moreinfo="none">awk</command></term>
        <listitem>
          <para>到 <command moreinfo="none">gawk</command> 的链接</para>
          <indexterm zone="ch-system-gawk awk" significance="normal">
            <primary sortas="b-awk">awk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gawk">
        <term><command moreinfo="none">gawk</command></term>
        <listitem>
          <para>用于操作文本文件的程序；<command moreinfo="none">awk</command> 的 GNU 实现</para>
          <indexterm zone="ch-system-gawk gawk" significance="normal">
            <primary sortas="b-gawk">gawk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gawk-version">
        <term><command moreinfo="none">gawk-4.2.1</command></term>
        <listitem>
          <para>到 <command moreinfo="none">gawk</command> 的硬链接</para>
          <indexterm zone="ch-system-gawk gawk-version" significance="normal">
            <primary sortas="b-gawk-4.2.1">gawk-4.2.1</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-findutils" role="wrap">
  <?dbhtml filename="findutils.html"?>

  

  <title>Findutils-4.6.0</title>

  <indexterm zone="ch-system-findutils" significance="normal">
    <primary sortas="a-Findutils">Findutils</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Findutils 软件包包含查找文件的程序。这些程序提供递归搜索目录树、创建、管理以及搜索数据库（通常比递归式的 find 要快，但如果数据库最近没有更新的话结果不可靠）。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.6 SBU</seg>
        <seg>51 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Findutils</title>

   <!-- this has been fixed in upstream gnulib, when a new version of
   findutils is released, please check #4055 to see if the change has been
   picked up in this package -->
   <para>首先，抑制测试中可能在某些机器中出现的无限循环：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/test-lock..EXEEXT.//' tests/Makefile.in</userinput></screen>

    <para>然后，对应 glibc-2.28 或更高版本 glibc 的需求做一些修复：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' gl/lib/*.c
sed -i '/unistd/a #include &lt;sys/sysmacros.h&gt;' gl/lib/mountlist.c
echo "#define _IO_IN_BACKUP 0x100" &gt;&gt; gl/lib/stdio-impl.h</userinput></screen>

    <para>准备编译 Findutils：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --localstatedir=/var/lib/locate</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--localstatedir</parameter></term>
        <listitem>
          <para>该选项改变 <command moreinfo="none">locate</command> 数据库的位置为 FHS 兼容的 <filename class="directory" moreinfo="none">/var/lib/locate</filename>。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    

    <para revision="systemd">一些 BLFS 及之上的软件包希望 <command moreinfo="none">find</command> 程序在 <filename class="directory" moreinfo="none">/bin</filename>，因此确保位置正确：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/find /bin
sed -i 's|find:=${BINDIR}|find:=/bin|' /usr/bin/updatedb</userinput></screen>

  </sect2>

  <sect2 id="contents-findutils" role="content">
    <title>Findutils 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>find, locate, updatedb, 和 xargs</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="find">
        <term><command moreinfo="none">find</command></term>
        <listitem>
          <para>查找指定目录树中匹配特定要求的文件</para>
          <indexterm zone="ch-system-findutils find" significance="normal">
            <primary sortas="b-find">find</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="locate">
        <term><command moreinfo="none">locate</command></term>
        <listitem>
          <para>搜索文件名称数据库并报告包含给定字符串或匹配给定模式的文件名称</para>
          <indexterm zone="ch-system-findutils locate" significance="normal">
            <primary sortas="b-locate">locate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="oldfind">
        <term><command moreinfo="none">oldfind</command></term>
        <listitem>
          <para>老版本的 find，使用一个不同的算法</para>
          <indexterm zone="ch-system-findutils oldfind" significance="normal">
            <primary sortas="b-oldfind">oldfind</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="updatedb">
      <term><command moreinfo="none">updatedb</command></term>
        <listitem>
          <para>更新 <command moreinfo="none">locate</command> 数据库； 它搜索整个文件系统（包括已挂载的其它文件系统，除非指定排除） 并把找到的每个文件名插入到数据库</para>
          <indexterm zone="ch-system-findutils updatedb" significance="normal">
            <primary sortas="b-updatedb">updatedb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xargs">
        <term><command moreinfo="none">xargs</command></term>
        <listitem>
          <para>对一系列文件运行给定命令</para>
          <indexterm zone="ch-system-findutils xargs" significance="normal">
            <primary sortas="b-xargs">xargs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-groff" role="wrap">
  <?dbhtml filename="groff.html"?>

  

  <title>Groff-1.22.4</title>

  <indexterm zone="ch-system-groff" significance="normal">
    <primary sortas="a-Groff">Groff</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Groff 软件包包含用于处理和格式化文本的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.4 SBU</seg>
        <seg>94 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Groff</title>

    <para>Groff 希望环境变量 <envar>PAGE</envar> 包含默认的页面大小，对于美国的用户，为 <parameter moreinfo="none">PAGE=letter</parameter>，对于其它地方，<parameter moreinfo="none">PAGE=A4</parameter> 更合适。尽管在编译的时候配置了默认页面大小，后面通过 echo「A4」或「letter」到 <filename moreinfo="none">/etc/papersize</filename> 文件仍然可以修改。</para>

    <para>准备编译 Groff：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">PAGE=<replaceable>&lt;paper_size&gt;</replaceable> ./configure --prefix=/usr</userinput></screen>

    <para>该软件不支持并行构建。编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make -j1</userinput></screen>

    <para>该软件包没有测试套具。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-groff" role="content">
  <title>Groff 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>addftinfo, afmtodit, chem, eqn, eqn2graph, gdiffmk, glilypond,
        gperl, gpinyin, grap2graph, grn, grodvi, groff, groffer, grog, grolbp,
        grolj4, gropdf, grops, grotty, hpftodit, indxbib, lkbib, lookbib,
        mmroff, neqn, nroff, pdfmom, pdfroff, pfbtops, pic, pic2graph,
        post-grohtml, preconv, pre-grohtml, refer, roff2dvi, roff2html,
        roff2pdf, roff2ps, roff2text, roff2x, soelim, tbl, tfmtodit, 和
        troff</seg>
        <seg>/usr/lib/groff 和 /usr/share/doc/groff-1.22.4,
        /usr/share/groff</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="addftinfo">
        <term><command moreinfo="none">addftinfo</command></term>
        <listitem>
          <para>读 troff 字体文件并添加一些额外的 <command moreinfo="none">groff</command> 系统使用的字体信息</para>
          <indexterm zone="ch-system-groff addftinfo" significance="normal">
            <primary sortas="b-addftinfo">addftinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="afmtodit">
        <term><command moreinfo="none">afmtodit</command></term>
        <listitem>
          <para>创建用于和 <command moreinfo="none">groff</command> 以及 <command moreinfo="none">grops</command> 一起使用的字体文件</para>
          <indexterm zone="ch-system-groff afmtodit" significance="normal">
            <primary sortas="b-afmtodit">afmtodit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chem">
        <term><command moreinfo="none">chem</command></term>
        <listitem>
          <para>Gorff 预处理生成化学结构图</para>
          <indexterm zone="ch-system-groff chem" significance="normal">
            <primary sortas="b-chem">chem</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="eqn">
        <term><command moreinfo="none">eqn</command></term>
        <listitem>
          <para>编译嵌入了 troff 输入文件的方程的描述为 <command moreinfo="none">troff</command> 能理解的命令</para>
          <indexterm zone="ch-system-groff eqn" significance="normal">
            <primary sortas="b-eqn">eqn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="eqn2graph">
        <term><command moreinfo="none">eqn2graph</command></term>
        <listitem>
          <para>转换 troff EQN （equation 方程）为裁剪图像</para>
          <indexterm zone="ch-system-groff eqn2graph" significance="normal">
            <primary sortas="b-eqn2graph">eqn2graph</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gdiffmk">
        <term><command moreinfo="none">gdiffmk</command></term>
        <listitem>
          <para>标记 groff/nroff/troff 文件的差异</para>
          <indexterm zone="ch-system-groff gdiffmk" significance="normal">
            <primary sortas="b-gdiffmk">gdiffmk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="glilypond">
        <term><command moreinfo="none">glilypond</command></term>
        <listitem>
          <para>将 lilypond 语言写成的乐谱转换至 groff语言</para>
          <indexterm zone="ch-system-groff glilypond" significance="normal">
            <primary sortas="b-glilypond">glilypond</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gperl">
        <term><command moreinfo="none">gperl</command></term>
        <listitem>
          <para>Groff 的预处理器，允许在 groff 中添加 perl 代码</para>
          <indexterm zone="ch-system-groff gperl" significance="normal">
            <primary sortas="b-gperl">gperl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gpinyin">
        <term><command moreinfo="none">gpinyin</command></term>
        <listitem>
          <para>Groff 的预处理器，允许在 groff 文件中添加类似欧洲语言的中文拼音。</para>
          <indexterm zone="ch-system-groff gpinyin" significance="normal">
            <primary sortas="b-gpinyin">gpinyin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grap2graph">
        <term><command moreinfo="none">grap2graph</command></term>
        <listitem>
          <para>转换 grap 图为裁剪位图图像</para>
          <indexterm zone="ch-system-groff grap2graph" significance="normal">
            <primary sortas="b-grap2graph">grap2graph</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grn">
        <term><command moreinfo="none">grn</command></term>
        <listitem>
          <para>用于 gremlin 文件的 <command moreinfo="none">groff</command> 预处理器</para>
          <indexterm zone="ch-system-groff grn" significance="normal">
            <primary sortas="b-grn">grn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grodvi">
        <term><command moreinfo="none">grodvi</command></term>
        <listitem>
          <para>生成 TeX dvi 格式的 <command moreinfo="none">groff</command> 驱动</para>
          <indexterm zone="ch-system-groff grodvi" significance="normal">
            <primary sortas="b-grodvi">grodvi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groff">
        <term><command moreinfo="none">groff</command></term>
        <listitem>
          <para>groff 文档格式化系统前端；一般运行 <command moreinfo="none">troff</command> 程序和适合选定文件的后处理器</para>
          <indexterm zone="ch-system-groff groff" significance="normal">
            <primary sortas="b-groff">groff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="groffer">
        <term><command moreinfo="none">groffer</command></term>
        <listitem>
          <para>在 X 和 tty 终端显示 groff 文件以及 man 页面</para>
          <indexterm zone="ch-system-groff groffer" significance="normal">
            <primary sortas="b-groffer">groffer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grog">
        <term><command moreinfo="none">grog</command></term>
        <listitem>
          <para>读文件并猜测打印文件需要的 <command moreinfo="none">groff</command> 选项  <option>-e</option>，<option>-man</option>，<option>-me</option>，<option>-mm</option>，<option>-ms</option>，<option>-p</option>，<option>-s</option>,以及 <option>-t</option>，并报告包含这些选项的 <command moreinfo="none">groff</command> 命令</para>
          <indexterm zone="ch-system-groff grog" significance="normal">
            <primary sortas="b-grog">grog</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grolbp">
        <term><command moreinfo="none">grolbp</command></term>
        <listitem>
          <para>用于 Canon CAPSL 打印机（LBP-4 和 LBP-8 系列激光打印机） 的  <command moreinfo="none">groff</command> 驱动</para>
          <indexterm zone="ch-system-groff grolbp" significance="normal">
            <primary sortas="b-grolbp">grolbp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grolj4">
        <term><command moreinfo="none">grolj4</command></term>
        <listitem>
          <para>生成适合于 HP LaserJet 4 打印机的 PCL5 格式输出的 <command moreinfo="none">groff</command>  驱动</para>
          <indexterm zone="ch-system-groff grolj4" significance="normal">
            <primary sortas="b-grolj4">grolj4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gropdf">
        <term><command moreinfo="none">gropdf</command></term>
        <listitem>
          <para>翻译 GNU <command moreinfo="none">troff</command> 的输出至 PDF</para>
          <indexterm zone="ch-system-groff gropdf" significance="normal">
            <primary sortas="b-gropdf">gropdf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grops">
        <term><command moreinfo="none">grops</command></term>
        <listitem>
          <para>转换 GNU <command moreinfo="none">troff</command> 输出为 PostScript</para>
          <indexterm zone="ch-system-groff grops" significance="normal">
            <primary sortas="b-grops">grops</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grotty">
        <term><command moreinfo="none">grotty</command></term>
        <listitem>
          <para>转换 GNU <command moreinfo="none">troff</command> 输出为适合于打字机设备的格式</para>
          <indexterm zone="ch-system-groff grotty" significance="normal">
            <primary sortas="b-grotty">grotty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hpftodit">
        <term><command moreinfo="none">hpftodit</command></term>
        <listitem>
          <para>从 HP标签字体规格文件创建和 <command moreinfo="none">groff -Tlj4</command> 一起使用的字体文件</para>
          <indexterm zone="ch-system-groff hpftodit" significance="normal">
            <primary sortas="b-hpftodit">hpftodit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="indxbib">
        <term><command moreinfo="none">indxbib</command></term>
        <listitem>
          <para>用和 <command moreinfo="none">refer</command>，<command moreinfo="none">lookbib</command>, 以及  <command moreinfo="none">lkbib</command> 一起使用的指定文件为文献数据库创建倒排索引</para>
          <indexterm zone="ch-system-groff indxbib" significance="normal">
            <primary sortas="b-indxbib">indxbib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lkbib">
        <term><command moreinfo="none">lkbib</command></term>
        <listitem>
          <para>搜索文献数据库中包含指定键的引用并报告找到的任何引用</para>
          <indexterm zone="ch-system-groff lkbib" significance="normal">
            <primary sortas="b-lkbib">lkbib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lookbib">
        <term><command moreinfo="none">lookbib</command></term>
        <listitem>
          <para>在标准错误中输出提示（除非标准输入不是终端），从标准输入读取包含一系列关键字的行，在指定的文件中搜索文献数据库中包含那些关键字的引用，在标准输出中打印找到的任何引用，循环这些过程直到输入结束</para>
          <indexterm zone="ch-system-groff lookbib" significance="normal">
            <primary sortas="b-lookbib">lookbib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mmroff">
        <term><command moreinfo="none">mmroff</command></term>
        <listitem>
          <para><command moreinfo="none">groff</command> 的简单预处理器</para>
          <indexterm zone="ch-system-groff mmroff" significance="normal">
            <primary sortas="b-mmroff">mmroff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="neqn">
        <term><command moreinfo="none">neqn</command></term>
        <listitem>
          <para>为美国标准信息交换码（ASCII） 输出格式化方程</para>
          <indexterm zone="ch-system-groff neqn" significance="normal">
            <primary sortas="b-neqn">neqn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nroff">
        <term><command moreinfo="none">nroff</command></term>
        <listitem>
          <para>用 <command moreinfo="none">nroff</command> 模仿 <command moreinfo="none">groff</command> 命令的脚本</para>
          <indexterm zone="ch-system-groff nroff" significance="normal">
            <primary sortas="b-nroff">nroff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pdfmom">
        <term><command moreinfo="none">pdfmom</command></term>
        <listitem>
          <para>groff 周围的封装，用于简化从带有 mom 宏的文件格式生成 PDF 文件的过程。</para>
          <indexterm zone="ch-system-groff pdfmom" significance="normal">
            <primary sortas="b-pdfmom">pdfmom</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pdfroff">
        <term><command moreinfo="none">pdfroff</command></term>
        <listitem>
          <para>用 groff 创建 pdf 文档</para>
          <indexterm zone="ch-system-groff pdfroff" significance="normal">
            <primary sortas="b-pdfroff">pdfroff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pfbtops">
        <term><command moreinfo="none">pfbtops</command></term>
        <listitem>
          <para>转换 <filename class="extension" moreinfo="none">.pfb</filename> 格式中的 PostScript 字体为 ASCII</para>
          <indexterm zone="ch-system-groff pfbtops" significance="normal">
            <primary sortas="b-pfbtops">pfbtops</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pic">
        <term><command moreinfo="none">pic</command></term>
        <listitem>
          <para>编译嵌入了 troff 或 TeX 输入文件的图像的描述为 TeX 或  <command moreinfo="none">troff</command> 能理解的命令</para>
          <indexterm zone="ch-system-groff pic" significance="normal">
            <primary sortas="b-pic">pic</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pic2graph">
        <term><command moreinfo="none">pic2graph</command></term>
        <listitem>
          <para>转换 PIC 图为裁剪图像</para>
          <indexterm zone="ch-system-groff pic2graph" significance="normal">
            <primary sortas="b-pic2graph">pic2graph</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="post-grohtml">
        <term><command moreinfo="none">post-grohtml</command></term>
        <listitem>
          <para>转换 GNU <command moreinfo="none">troff</command> 输出为 HTML</para>
          <indexterm zone="ch-system-groff post-grohtml" significance="normal">
            <primary sortas="b-post-grohtml">post-grohtml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="preconv">
        <term><command moreinfo="none">preconv</command></term>
        <listitem>
          <para>转换输入文件编码为 GNU <command moreinfo="none">troff</command> 能理解的编码</para>
          <indexterm zone="ch-system-groff preconv" significance="normal">
            <primary sortas="b-preconv">preconv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pre-grohtml">
        <term><command moreinfo="none">pre-grohtml </command></term>
        <listitem>
          <para>转换 GNU <command moreinfo="none">troff</command> 的输出为 HTML</para>
          <indexterm zone="ch-system-groff pre-grohtml" significance="normal">
            <primary sortas="b-pre-grohtml">pre-grohtml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="refer">
        <term><command moreinfo="none">refer</command></term>
        <listitem>
          <para>复制文件内容到标准输出，其中 <emphasis>.[</emphasis> 和  <emphasis>.]</emphasis> 之间的行解释为引用，<emphasis>.R1</emphasis> 和  <emphasis>.R2</emphasis> 之间的行解释为如何处理引用的命令</para>
          <indexterm zone="ch-system-groff refer" significance="normal">
            <primary sortas="b-refer">refer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2dvi">
        <term><command moreinfo="none">roff2dvi</command></term>
        <listitem>
          <para>转化 roff 文件到 DVI 格式</para>
          <indexterm zone="ch-system-groff roff2dvi" significance="normal">
            <primary sortas="b-roff2dvi">roff2dvi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2html">
        <term><command moreinfo="none">roff2html</command></term>
        <listitem>
          <para>转换 roff 文件到 HTML 格式</para>
          <indexterm zone="ch-system-groff roff2html" significance="normal">
            <primary sortas="b-roff2html">roff2html</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2pdf">
        <term><command moreinfo="none">roff2pdf</command></term>
        <listitem>
          <para>转换 roff 文件到 PDFs</para>
          <indexterm zone="ch-system-groff roff2pdf" significance="normal">
            <primary sortas="b-roff2pdf">roff2pdf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2ps">
        <term><command moreinfo="none">roff2ps</command></term>
        <listitem>
          <para>转换 roff 文件为 ps 文件</para>
          <indexterm zone="ch-system-groff roff2ps" significance="normal">
            <primary sortas="b-roff2ps">roff2ps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2text">
        <term><command moreinfo="none">roff2text</command></term>
        <listitem>
          <para>转换 roff 文件为文本文件</para>
          <indexterm zone="ch-system-groff roff2text" significance="normal">
            <primary sortas="b-roff2text">roff2text</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="roff2x">
        <term><command moreinfo="none">roff2x</command></term>
        <listitem>
          <para>转换 roff 文件到其它格式</para>
          <indexterm zone="ch-system-groff roff2x" significance="normal">
            <primary sortas="b-roff2x">roff2x</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="soelim">
        <term><command moreinfo="none">soelim</command></term>
        <listitem>
          <para>读文件并用相应的 <emphasis>file</emphasis> 内容替换 <emphasis>.so file</emphasis> 格式的行</para>
          <indexterm zone="ch-system-groff soelim" significance="normal">
            <primary sortas="b-soelim">soelim</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tbl">
        <term><command moreinfo="none">tbl</command></term>
        <listitem>
          <para>编译嵌入了 troff 输入文件的表的描述为 <command moreinfo="none">troff</command> 能理解的命令</para>
          <indexterm zone="ch-system-groff tbl" significance="normal">
            <primary sortas="b-tbl">tbl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tfmtodit">
        <term><command moreinfo="none">tfmtodit</command></term>
        <listitem>
          <para>创建和 <command moreinfo="none">groff -Tdvi</command> 一起使用的字体文件</para>
          <indexterm zone="ch-system-groff tfmtodit" significance="normal">
            <primary sortas="b-tfmtodit">tfmtodit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="troff">
        <term><command moreinfo="none">troff</command></term>
        <listitem>
          <para>和 Unix <command moreinfo="none">troff</command> 高度兼容；通常应该使用  <command moreinfo="none">groff</command> 命令调用，它也会以恰当的顺序和选项运行预处理器和后处理器</para>
          <indexterm zone="ch-system-groff troff" significance="normal">
            <primary sortas="b-troff">troff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-grub" role="wrap">
  <?dbhtml filename="grub.html"?>

  

  <title>GRUB-2.02</title>

  <indexterm zone="ch-system-grub" significance="normal">
    <primary sortas="a-Grub">GRUB</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GRUB 软件包包含多重启动管理器（GRand Unified Bootloader）。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.6 SBU</seg>
        <seg>147 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GRUB</title>

    <para>准备编译 GRUB：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr          \
            --sbindir=/sbin        \
            --sysconfdir=/etc      \
            --disable-efiemu       \
            --disable-werror</userinput></screen>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-werror</parameter></term>
        <listitem>
          <para>允许忽视有更新 Flex 版本提示的警告以完成构建。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-efiemu</parameter></term>
        <listitem>
          <para>这些选项通过停用 LFS 不需要的功能和测试程序最小化构建。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
mv -v /etc/bash_completion.d/grub /usr/share/bash-completion/completions</userinput></screen>

  <para>会在 <xref linkend="ch-bootable-grub"/> 介绍通过 GRUB 启动你的 LFS 系统。</para>

  </sect2>

  <sect2 id="contents-gRUB" role="content">
    <title>GRUB 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>

       <seg>grub-bios-setup,      grub-editenv,    grub-file,        grub-fstest,
            grub-glue-efi,        grub-install,    grub-kbdcomp,     grub-macbless,   
            grub-menulst2cfg,     grub-mkconfig,
                                  grub-mkimage,    grub-mklayout,    grub-mknetdir,
            grub-mkpasswd-pbkdf2, grub-mkrelpath,  grub-mkrescue,    grub-mkstandalone,
            grub-ofpathname,      grub-probe,      grub-reboot,      grub-render-label, 
            grub-script-check,
            grub-set-default,     grub-sparc64-setup, 和 grub-syslinux2cfg</seg>

        <seg>/usr/lib/grub, /etc/grub.d, /usr/share/grub, 和 boot/grub (when grub-install
        is first run)</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="grub-bios-setup">
        <term><command moreinfo="none">grub-bios-setup</command></term>
        <listitem>
          <para>grub-install 的帮助程序</para>
          <indexterm zone="ch-system-grub grub-bios-setup" significance="normal">
            <primary sortas="b-grub-bios-setup">grub-bios-setup</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-editenv">
        <term><command moreinfo="none">grub-editenv</command></term>
        <listitem>
          <para>编辑环境块的工具</para>
          <indexterm zone="ch-system-grub grub-editenv" significance="normal">
            <primary sortas="b-grub-editenv">grub-editenv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-file">
        <term><command moreinfo="none">grub-file</command></term>
        <listitem>
          <para>检查 FILE 是否为指定的类型</para>
          <indexterm zone="ch-system-grub grub-file" significance="normal">
            <primary sortas="b-grub-file">grub-file</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-fstest">
        <term><command moreinfo="none">grub-fstest</command></term>
        <listitem>
          <para>调试文件系统驱动的工具</para>
          <indexterm zone="ch-system-grub grub-fstest" significance="normal">
            <primary sortas="b-grub-fstest">grub-fstest</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-glue-efi">
        <term><command moreinfo="none">grub-glue-efi</command></term>
        <listitem>
          <para>处理 ia32 和 amd64 的 EFI 镜像并按照 Apple 的格式将他们粘在一起</para>
          <indexterm zone="ch-system-grub grub-glue-efi" significance="normal">
            <primary sortas="b-grub-glue-efi">grub-glue-efi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-install">
        <term><command moreinfo="none">grub-install</command></term>
        <listitem>
          <para>在你的驱动器上安装 GRUB</para>
          <indexterm zone="ch-system-grub grub-install" significance="normal">
            <primary sortas="b-grub-install">grub-install</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-kbdcomp">
        <term><command moreinfo="none">grub-kbdcomp</command></term>
        <listitem>
          <para>转换 xkb 布局为 GRUB 可识别样式的脚本</para>
          <indexterm zone="ch-system-grub grub-kbdcomp" significance="normal">
            <primary sortas="b-grub-kbdcomp">grub-kbdcomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-macbless">
        <term><command moreinfo="none">grub-macbless</command></term>
        <listitem>
          <para>以 Mac 的风格保护 HFS 或 HFS+ 文件</para>
          <indexterm zone="ch-system-grub grub-macbless" significance="normal">
            <primary sortas="b-grub-macbless">grub-macbless</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-menulst2cfg">
        <term><command moreinfo="none">grub-menulst2cfg</command></term>
        <listitem>
          <para>为和 GRUB 2 一起使用，转换引导装载程序（GRUB Legacy）  <filename moreinfo="none">menu.lst</filename> 为 <filename moreinfo="none">grub.cfg</filename></para>
          <indexterm zone="ch-system-grub grub-menulst2cfg" significance="normal">
            <primary sortas="b-grub-menulst2cfg">grub-menulst2cfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkconfig">
        <term><command moreinfo="none">grub-mkconfig</command></term>
        <listitem>
          <para>生成 grub 配置文件</para>
          <indexterm zone="ch-system-grub grub-mkconfig" significance="normal">
            <primary sortas="b-grub-mkconfig">grub-mkconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkimage">
        <term><command moreinfo="none">grub-mkimage</command></term>
        <listitem>
          <para>创建 GRUB 可启动镜像</para>
          <indexterm zone="ch-system-grub grub-mkimage" significance="normal">
            <primary sortas="b-grub-mkimage">grub-mkimage</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mklayout">
        <term><command moreinfo="none">grub-mklayout</command></term>
        <listitem>
          <para>生成 GRUB 键盘布局文件</para>
          <indexterm zone="ch-system-grub grub-mklayout" significance="normal">
            <primary sortas="b-grub-mklayout">grub-mklayout</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mknetdir">
        <term><command moreinfo="none">grub-mknetdir</command></term>
        <listitem>
          <para>准备一个 GRUB 网络启动目录</para>
          <indexterm zone="ch-system-grub grub-mknetdir" significance="normal">
            <primary sortas="b-grub-mknetdir">grub-mknetdir</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkpasswd-pbkdf2">
        <term><command moreinfo="none">grub-mkpasswd-pbkdf2</command></term>
        <listitem>
          <para>生成一个用于启动菜单的加密 PBKDF2 密码</para>
          <indexterm zone="ch-system-grub grub-mkpasswd-pbkdf2" significance="normal">
            <primary sortas="b-grub-mkpasswd-pbkdf2">grub-mkpasswd-pbkdf2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkrelpath">
        <term><command moreinfo="none">grub-mkrelpath</command></term>
        <listitem>
          <para>生成相对于根目录的系统路径名称</para>
          <indexterm zone="ch-system-grub grub-mkrelpath" significance="normal">
            <primary sortas="b-grub-mkrelpath">grub-mkrelpath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkrescue">
        <term><command moreinfo="none">grub-mkrescue</command></term>
        <listitem>
          <para>创建适用于软盘或 CDROM/DVD 的可启动 GRUB 镜像</para>
          <indexterm zone="ch-system-grub grub-mkrescue" significance="normal">
            <primary sortas="b-grub-mkrescue">grub-mkrescue</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-mkstandalone">
        <term><command moreinfo="none">grub-mkstandalone</command></term>
        <listitem>
          <para>生成一个单独镜像</para>
          <indexterm zone="ch-system-grub grub-mkstandalone" significance="normal">
            <primary sortas="b-grub-mkstandalone">grub-mkstandalone</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-ofpathname">
        <term><command moreinfo="none">grub-ofpathname</command></term>
        <listitem>
          <para>打印 GRUB 设备路径的帮助程序</para>
          <indexterm zone="ch-system-grub grub-ofpathname" significance="normal">
            <primary sortas="b-grub-ofpathname">grub-ofpathname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-probe">
        <term><command moreinfo="none">grub-probe</command></term>
        <listitem>
          <para>对指定路径或设备检测设备信息</para>
          <indexterm zone="ch-system-grub grub-probe" significance="normal">
            <primary sortas="b-grub-probe">grub-probe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-reboot">
        <term><command moreinfo="none">grub-reboot</command></term>
        <listitem>
          <para>只为下次启动设置默认 GRUB 启动选项</para>
          <indexterm zone="ch-system-grub grub-reboot" significance="normal">
            <primary sortas="b-grub-reboot">grub-reboot</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-render-label">
        <term><command moreinfo="none">grub-render-label</command></term>
        <listitem>
          <para>为 Apple Mac 赋予 Apple 的 .disk_label</para>
          <indexterm zone="ch-system-grub grub-render-label" significance="normal">
            <primary sortas="b-grub-render-label">grub-render-label</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-script-check">
        <term><command moreinfo="none">grub-script-check</command></term>
        <listitem>
          <para>检查 GRUB 配置脚本是否有语法错误</para>
          <indexterm zone="ch-system-grub grub-script-check" significance="normal">
            <primary sortas="b-grub-script-check">grub-script-check</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-set-default">
        <term><command moreinfo="none">grub-set-default</command></term>
        <listitem>
          <para>为 GRUB 设置默认启动选项</para>
          <indexterm zone="ch-system-grub grub-set-default" significance="normal">
            <primary sortas="b-grub-set-default">grub-set-default</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-sparc64-setup">
        <term><command moreinfo="none">grub-sparc64-setup</command></term>
        <listitem>
          <para>grub-setup 的帮助程序</para>
          <indexterm zone="ch-system-grub grub-sparc64-setup" significance="normal">
            <primary sortas="b-grub-sparc64-setup">grub-setup</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="grub-syslinux2cfg">
        <term><command moreinfo="none">grub-syslinux2cfg</command></term>
        <listitem>
          <para>将 syslinux 的配置文件转换至 grub.cfg 格式</para>
          <indexterm zone="ch-system-grub grub-syslinux2cfg" significance="normal">
            <primary sortas="b-grub-syslinux2cfg">grub-syslinux2cfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-less" role="wrap">
  <?dbhtml filename="less.html"?>

  

  <title>Less-530</title>

  <indexterm zone="ch-system-less" significance="normal">
    <primary sortas="a-Less">Less</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Less 软件包包含一个文本文件查看器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>少于 0.1 SBU</seg>
        <seg>3.9 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Less</title>

    <para>准备编译 Less：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --sysconfdir=/etc</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--sysconfdir=/etc</parameter></term>
        <listitem>
          <para>该选项告诉软件包创建的程序在 <filename class="directory" moreinfo="none">/etc</filename> 中查找配置文件。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包没有测试套件。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-less" role="content">
    <title>Less 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>less, lessecho, 和 lesskey</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="less">
        <term><command moreinfo="none">less</command></term>
        <listitem>
          <para>文件查看器或分页器；显示指定文件的内容，允许用户滚动、查找字符串以及跳转到标记。</para>
          <indexterm zone="ch-system-less less" significance="normal">
            <primary sortas="b-less">less</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lessecho">
        <term><command moreinfo="none">lessecho</command></term>
        <listitem>
          <para>在 Unix 系统文件名中扩展元字符，例如 <emphasis>*</emphasis> 和 <emphasis>?</emphasis></para>
          <indexterm zone="ch-system-less lessecho" significance="normal">
            <primary sortas="b-lessecho">lessecho</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lesskey">
        <term><command moreinfo="none">lesskey</command></term>
        <listitem>
          <para>用于指定绑定到 <command moreinfo="none">less</command> 的键</para>
          <indexterm zone="ch-system-less lesskey" significance="normal">
            <primary sortas="b-lesskey">lesskey</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-gzip" role="wrap">
  <?dbhtml filename="gzip.html"?>

  

  <title>Gzip-1.10</title>

  <indexterm zone="ch-system-gzip" significance="normal">
    <primary sortas="a-Gzip">Gzip</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Gzip 软件包包含用于压缩和解压文件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>20 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Gzip</title>

    <para>准备编译 Gzip：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>已知有两个测试在 LFS 环境中会失败：help-version 和 zmore。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>移动一些需要放在根文件系统的程序：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/bin/gzip /bin</userinput></screen>

  </sect2>

  <sect2 id="contents-gzip" role="content">
    <title>Gzip 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>gunzip, gzexe, gzip, uncompress (到 gunzip 的硬链接), zcat, zcmp, 
        zdiff, zegrep, zfgrep, zforce, zgrep, zless, zmore, 和 znew</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gunzip">
        <term><command moreinfo="none">gunzip</command></term>
        <listitem>
          <para>解压 gzip 压缩的文件</para>
          <indexterm zone="ch-system-gzip gunzip" significance="normal">
            <primary sortas="b-gunzip">gunzip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gzexe">
        <term><command moreinfo="none">gzexe</command></term>
        <listitem>
          <para>创建自解压可执行文件</para>
          <indexterm zone="ch-system-gzip gzexe" significance="normal">
            <primary sortas="b-gzexe">gzexe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gzip">
        <term><command moreinfo="none">gzip</command></term>
        <listitem>
          <para>用 Lempel-Ziv(LZ77) 编码压缩指定文件</para>
          <indexterm zone="ch-system-gzip gzip" significance="normal">
            <primary sortas="b-gzip">gzip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uncompress">
        <term><command moreinfo="none">uncompress</command></term>
        <listitem>
          <para>解压压缩文件</para>
          <indexterm zone="ch-system-gzip uncompress" significance="normal">
            <primary sortas="b-uncompress">uncompress</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zcat">
        <term><command moreinfo="none">zcat</command></term>
        <listitem>
          <para>解压指定 gzip 压缩的文件到标准输出</para>
          <indexterm zone="ch-system-gzip zcat" significance="normal">
            <primary sortas="b-zcat">zcat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zcmp">
        <term><command moreinfo="none">zcmp</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">cmp</command> 命令</para>
          <indexterm zone="ch-system-gzip zcmp" significance="normal">
            <primary sortas="b-zcmp">zcmp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zdiff">
        <term><command moreinfo="none">zdiff</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">diff</command> 命令</para>
          <indexterm zone="ch-system-gzip zdiff" significance="normal">
            <primary sortas="b-zdiff">zdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zegrep">
        <term><command moreinfo="none">zegrep</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">egrep</command> 命令</para>
          <indexterm zone="ch-system-gzip zegrep" significance="normal">
            <primary sortas="b-zegrep">zegrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zfgrep">
        <term><command moreinfo="none">zfgrep</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">fgrep</command> 命令</para>
          <indexterm zone="ch-system-gzip zfgrep" significance="normal">
            <primary sortas="b-zfgrep">zfgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zforce">
        <term><command moreinfo="none">zforce</command></term>
        <listitem>
          <para>强制所有指定的 gzip 压缩文件的扩展名为 <filename class="extension" moreinfo="none">.gz</filename>，这样 <command moreinfo="none">gzip</command> 就不会对它们再次压缩；这在文件传输中文件名被截断时非常有用</para>
          <indexterm zone="ch-system-gzip zforce" significance="normal">
            <primary sortas="b-zforce">zforce</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zgrep">
        <term><command moreinfo="none">zgrep</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">grep</command> 命令</para>
          <indexterm zone="ch-system-gzip zgrep" significance="normal">
            <primary sortas="b-zgrep">zgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zless">
        <term><command moreinfo="none">zless</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">less</command> 命令</para>
          <indexterm zone="ch-system-gzip zless" significance="normal">
            <primary sortas="b-zless">zless</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zmore">
        <term><command moreinfo="none">zmore</command></term>
        <listitem>
          <para>对 gzip 压缩的文件运行 <command moreinfo="none">more</command> 命令</para>
          <indexterm zone="ch-system-gzip zmore" significance="normal">
            <primary sortas="b-zmore">zmore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="znew">
        <term><command moreinfo="none">znew</command></term>
        <listitem>
          <para>从 <command moreinfo="none">compress</command> 格式到 <command moreinfo="none">gzip</command> 格式重新压缩文件format——<filename class="extension" moreinfo="none">.Z</filename> 到 <filename class="extension" moreinfo="none">.gz</filename></para>
          <indexterm zone="ch-system-gzip znew" significance="normal">
            <primary sortas="b-znew">znew</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-iproute2" role="wrap">
  <?dbhtml filename="iproute2.html"?>

  

  <title>IPRoute2-4.20.0</title>

  <indexterm zone="ch-system-iproute2" significance="normal">
    <primary sortas="a-IPRoute2">IPRoute2</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>IPRoute2 软件包包含基于 IPV4 网络的基本和高级程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>13 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 IPRoute2</title>

    <para>此软件包中包含的 <command moreinfo="none">arpd</command> 因为依赖于 Berkeley DB，但是此软件并没有包含于 LFS 中，所以将不会进行编译。但是 <command moreinfo="none">arpd</command> 的目录依旧会被安装。运行以下的命令来阻止这一动作。如果需要 <command moreinfo="none">arpd</command> 的二进制文件，请查看 BLFS Book 的网页 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/server/databases.html#db"/> 以了解编译 Berkeley DB 都需要哪些指令。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i /ARPD/d Makefile
rm -fv man/man8/arpd.8</userinput></screen>

    <para>此外，还需要禁用两个模块，它依赖于 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/iptables.html"/>.</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/.m_ipt.o//' tc/Makefile</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>此软件包不包含可用的测试套件。</para>
<!-- currently not useful, no tests actually run
    <para>该软件包有测试套件，由于它的前置要求，一般不可能在 chroot 环境中运行这些测试。如果你希望在进入你的 LFS 系统后再运行这些测试，确保在你的的内核 （&quot;常规设置&quot; -> &quot;通过 /proc/config.gz 启用到 .config 的访问&quot; [CONFIG_IKCONFIG_PROC]） 中启用了  <filename>/proc/config.gz</filename> 支持，然后在 <filename class="directory">testsuite/</filename> 子目录运行 'make alltests' 命令。</para>-->

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make DOCDIR=/usr/share/doc/iproute2-4.20.0 install</userinput></screen>

  </sect2>

  <sect2 id="contents-iproute2" role="content">
    <title>IPRoute2 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>bridge, ctstat (链接到 lnstat), genl, ifcfg, ifstat, ip, lnstat,
        nstat, routef, routel, rtacct, rtmon, rtpr, rtstat (链接到 lnstat), ss,
        和 tc</seg>
        <seg>/etc/iproute2, /usr/lib/tc, 和 /usr/share/doc/iproute2-4.20.0,
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bridge">
        <term><command moreinfo="none">bridge</command></term>
        <listitem>
          <para>配置网桥</para>
          <indexterm zone="ch-system-iproute2 bridge" significance="normal">
            <primary sortas="b-bridge">bridge</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ctstat">
        <term><command moreinfo="none">ctstat</command></term>
        <listitem>
          <para>连接状态工具</para>
          <indexterm zone="ch-system-iproute2 ctstat" significance="normal">
            <primary sortas="b-ctstat">ctstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="genl">
        <term><command moreinfo="none">genl</command></term>
        <listitem>
          <para>通用 netlink 多用途前端</para>
          <indexterm zone="ch-system-iproute2 genl" significance="normal">
            <primary sortas="b-genl">genl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ifcfg">
        <term><command moreinfo="none">ifcfg</command></term>
        <listitem>
          <para><command moreinfo="none">ip</command> 命令的 shell 脚本封装 [注意它需要 iputils 软件包中的  <command moreinfo="none">arping</command> 和 <command moreinfo="none">rdisk</command> 程序，可以在 <ulink url="http://www.skbuff.net/iputils/"/> 找到 iputils 软件包。]</para>
          <indexterm zone="ch-system-iproute2 ifcfg" significance="normal">
            <primary sortas="b-ifcfg">ifcfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ifstat">
        <term><command moreinfo="none">ifstat</command></term>
        <listitem>
          <para>显示接口统计信息，包括接口发送和接收的包的数目</para>
          <indexterm zone="ch-system-iproute2 ifstat" significance="normal">
            <primary sortas="b-ifstat">ifstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ip">
        <term><command moreinfo="none">ip</command></term>
        <listitem>
          <para>主要的可执行程序。它有多种不同功能：</para>

          <para><command moreinfo="none">ip link <replaceable>&lt;device&gt;</replaceable></command> 允许用户查看设备状态或更改</para>

          <para><command moreinfo="none">ip addr</command> 允许用户查看地址和属性、增加新地址、删除旧地址</para>

          <para><command moreinfo="none">ip neighbor</command> 允许用户查看邻居和它们的特性、增加新邻居、删除旧邻居</para>

          <para><command moreinfo="none">ip rule</command> 允许用户查看路由策略并更改</para>

          <para><command moreinfo="none">ip route</command> 允许用户查看路由表并更改路由表规则</para>

          <para><command moreinfo="none">ip tunnel</command> 允许用户查看 IP 隧道及其特性、并进行更改</para>

          <para><command moreinfo="none">ip maddr</command> 允许用户查看多播地址及其特性、并进行更改</para>

          <para><command moreinfo="none">ip mroute</command> 允许用户设置、更改或删除多播路由</para>

          <para><command moreinfo="none">ip monitor</command> 允许用户持续监视设置、地址和路由状态</para>
          <indexterm zone="ch-system-iproute2 ip" significance="normal">
            <primary sortas="b-ip">ip</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lnstat">
        <term><command moreinfo="none">lnstat</command></term>
        <listitem>
          <para>提供 Linux 网络统计信息；是更通用、功能更完备的替代旧  <command moreinfo="none">rtstat</command> 的程序</para>
          <indexterm zone="ch-system-iproute2 lnstat" significance="normal">
            <primary sortas="b-lnstat">lnstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nstat">
        <term><command moreinfo="none">nstat</command></term>
        <listitem>
          <para>显示网络统计信息</para>
          <indexterm zone="ch-system-iproute2 nstat" significance="normal">
            <primary sortas="b-nstat">nstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="routef">
        <term><command moreinfo="none">routef</command></term>
        <listitem>
          <para><command moreinfo="none">ip route</command> 的组件。用于清空路由表</para>
          <indexterm zone="ch-system-iproute2 routef" significance="normal">
            <primary sortas="b-routef">routef</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="routel">
        <term><command moreinfo="none">routel</command></term>
        <listitem>
          <para><command moreinfo="none">ip route</command> 的组件。用于列出路由表</para>
          <indexterm zone="ch-system-iproute2 routel" significance="normal">
            <primary sortas="b-routel">routel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rtacct">
        <term><command moreinfo="none">rtacct</command></term>
        <listitem>
          <para>显示 <filename moreinfo="none">/proc/net/rt_acct</filename> 的内容</para>
          <indexterm zone="ch-system-iproute2 rtacct" significance="normal">
            <primary sortas="b-rtacct">rtacct</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rtmon">
        <term><command moreinfo="none">rtmon</command></term>
        <listitem>
          <para>路由监视工具</para>
          <indexterm zone="ch-system-iproute2 rtmon" significance="normal">
            <primary sortas="b-rtmon">rtmon</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rtpr">
        <term><command moreinfo="none">rtpr</command></term>
        <listitem>
          <para>转换 <command moreinfo="none">ip -o</command> 输出为可读形式</para>
          <indexterm zone="ch-system-iproute2 rtpr" significance="normal">
            <primary sortas="b-rtpr">rtpr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rtstat">
        <term><command moreinfo="none">rtstat</command></term>
        <listitem>
          <para>路由状态工具</para>
          <indexterm zone="ch-system-iproute2 rtstat" significance="normal">
            <primary sortas="b-rtstat">rtstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ss">
        <term><command moreinfo="none">ss</command></term>
        <listitem>
          <para>类似于 <command moreinfo="none">netstat</command> 命令；显示活动连接</para>
          <indexterm zone="ch-system-iproute2 ss" significance="normal">
            <primary sortas="b-ss">ss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tc">
        <term><command moreinfo="none">tc</command></term>
        <listitem>
          <para>拥塞控制可执行程序；用于实现服务质量（Quality Of Service,QOS）和服务等级（Class Of Service,COS）</para>

          <para><command moreinfo="none">tc qdisc</command> 允许用户设置排队规则</para>

          <para><command moreinfo="none">tc class</command> 允许用户基于排队规则调度策略设置等级</para>

          <para><command moreinfo="none">tc estimator</command> 允许用户估计到一个网络的网络流量</para>

          <para><command moreinfo="none">tc filter</command> 允许用户设置 QOS/COS 包过滤</para>

          <para><command moreinfo="none">tc policy</command> 允许用户设置 QOS/COS 策略</para>
          <indexterm zone="ch-system-iproute2 ss" significance="normal">
            <primary sortas="b-tc">tc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-kbd" role="wrap">
  <?dbhtml filename="kbd.html"?>

  

  <title>Kbd-2.0.4</title>

  <indexterm zone="ch-system-kbd" significance="normal">
    <primary sortas="a-Kbd">Kbd</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Kbd 软件包包含键表文件、控制台字体和键盘工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>30 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Kbd</title>

    <para>在 Kbd 软件包中退格键（Backspace）和删除键（Delete）的行为和键映射并不一致。下面的补丁修复了 i386 键映射中的这个问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">patch -Np1 -i ../kbd-2.0.4-backspace-1.patch</userinput></screen>

    <para>打补丁后，退格键生成编码为 127 的字符，删除键会生成一个著名的转义序列。</para>

    <para>移除冗余的 <command moreinfo="none">resizecons</command> 程序（它要求功能不全的 svglib 提供视频模式文件——用于正常使用 <command moreinfo="none">setfont</command> 设置控制台字体大小）以及帮助手册。</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/\(RESIZECONS_PROGS=\)yes/\1no/g' configure
sed -i 's/resizecons.8 //' docs/man/man8/Makefile.in</userinput></screen>

    <para>准备编译 Kbd：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure --prefix=/usr --disable-vlock</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>
<!--
      <varlistentry>
        <term><parameter>- -datadir=/lib/kbd</parameter></term>
        <listitem>
          <para>This option puts keyboard layout data in a directory that will
          always be on the root partition instead of the default <filename
          class="directory">/usr/share/kbd</filename>.</para>
       </listitem>
      </varlistentry>
-->
      <varlistentry>
        <term><parameter moreinfo="none">--disable-vlock</parameter></term>
        <listitem>
          <para>该选项防止编译 vlock 工具，因为它要求 chroot 环境中不可用的 PAM 库。</para>
       </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <note>
      <para>由于通常使用的 CP1251 键映射假设使用 ISO-8859-5 编码，Kbd 软件包不能为某些语言（例如，白俄罗斯） 提供可用的键映射。使用这样的语言需要单独下载能工作的键映射。</para>
    </note>

<!--
    <para>Some of the scripts in the LFS-Bootscripts package depend on
    <command>kbd_mode</command>, <command>loadkeys</command>,
    <command>openvt</command>, and
    <command>setfont</command>.  As <filename class="directory">/usr</filename>
    may not be available during the early stages of booting, those binaries
    need to be on the root partition:</para>

<screen><userinput remap="install">mv -v /usr/bin/{kbd_mode,loadkeys,openvt,setfont} /bin</userinput></screen>
-->
    <para>如果需要的话，安装帮助文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mkdir -v       /usr/share/doc/kbd-2.0.4
cp -R -v docs/doc/* /usr/share/doc/kbd-2.0.4</userinput></screen>

  </sect2>

  <sect2 id="contents-kbd" role="content">
    <title>Kbd 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>chvt, deallocvt, dumpkeys, fgconsole, getkeycodes, kbdinfo,
        kbd_mode, kbdrate, loadkeys, loadunimap,
        mapscrn, openvt, psfaddtable (链接到 psfxtable), psfgettable (链接到
        psfxtable), psfstriptable (链接到 psfxtable), psfxtable, <!--resizecons,-->
        setfont, setkeycodes, setleds, setmetamode, setvtrgb,
        showconsolefont, showkey, unicode_start, 和 unicode_stop</seg>
        <seg>/usr/share/consolefonts, /usr/share/consoletrans, /usr/share/keymaps, 
        /usr/share/doc/kbd-2.0.4,  和 /usr/share/unimaps</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="chvt">
        <term><command moreinfo="none">chvt</command></term>
        <listitem>
          <para>更改前台虚拟终端</para>
          <indexterm zone="ch-system-kbd chvt" significance="normal">
            <primary sortas="b-chvt">chvt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="deallocvt">
        <term><command moreinfo="none">deallocvt</command></term>
        <listitem>
          <para>重新分配未使用的虚拟终端</para>
          <indexterm zone="ch-system-kbd deallocvt" significance="normal">
            <primary sortas="b-deallocvt">deallocvt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dumpkeys">
        <term><command moreinfo="none">dumpkeys</command></term>
        <listitem>
          <para>转储键盘转换表</para>
          <indexterm zone="ch-system-kbd dumpkeys" significance="normal">
            <primary sortas="b-dumpkeys">dumpkeys</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fgconsole">
        <term><command moreinfo="none">fgconsole</command></term>
        <listitem>
          <para>输出活动虚拟终端的数目</para>
          <indexterm zone="ch-system-kbd fgconsole" significance="normal">
            <primary sortas="b-fgconsole">fgconsole</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getkeycodes">
        <term><command moreinfo="none">getkeycodes</command></term>
        <listitem>
          <para>输出内核扫描码到键码的映射表</para>
          <indexterm zone="ch-system-kbd getkeycodes" significance="normal">
            <primary sortas="b-getkeycodes">getkeycodes</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kbdinfo">
        <term><command moreinfo="none">kbdinfo</command></term>
        <listitem>
          <para>获取关于某个终端的状态信息</para>
          <indexterm zone="ch-system-kbd kbdinfo" significance="normal">
            <primary sortas="b-kbdinfo">kbdinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kbd_mode">
        <term><command moreinfo="none">kbd_mode</command></term>
        <listitem>
          <para>报告或设置键盘模式</para>
          <indexterm zone="ch-system-kbd kbd_mode" significance="normal">
            <primary sortas="b-kbd_mode">kbd_mode</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kbdrate">
        <term><command moreinfo="none">kbdrate</command></term>
        <listitem>
          <para>设置键盘重复和延迟速度</para>
          <indexterm zone="ch-system-kbd kbdrate" significance="normal">
            <primary sortas="b-kbdrate">kbdrate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="loadkeys">
        <term><command moreinfo="none">loadkeys</command></term>
        <listitem>
          <para>加载键盘转换表</para>
          <indexterm zone="ch-system-kbd loadkeys" significance="normal">
            <primary sortas="b-loadkeys">loadkeys</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="loadunimap">
        <term><command moreinfo="none">loadunimap</command></term>
        <listitem>
          <para>加载内核 Unicode 到字体映射表</para>
          <indexterm zone="ch-system-kbd loadunimap" significance="normal">
            <primary sortas="b-loadunimap">loadunimap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mapscrn">
        <term><command moreinfo="none">mapscrn</command></term>
        <listitem>
          <para>用于加载用户定义的输出字符映射表到控制台驱动的过时程序；现在通过  <command moreinfo="none">setfont</command> 完成</para>
          <indexterm zone="ch-system-kbd mapscrn" significance="normal">
            <primary sortas="b-mapscrn">mapscrn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="openvt">
        <term><command moreinfo="none">openvt</command></term>
        <listitem>
          <para>在一个新的虚拟终端（VT）启动程序</para>
          <indexterm zone="ch-system-kbd openvt" significance="normal">
            <primary sortas="b-openvt">openvt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="psfaddtable">
        <term><command moreinfo="none">psfaddtable</command></term>
        <listitem>
          <para>添加 Unicode 字符表到控制台字体</para>
          <indexterm zone="ch-system-kbd psfaddtable" significance="normal">
            <primary sortas="b-psfaddtable">psfaddtable</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="psfgettable">
        <term><command moreinfo="none">psfgettable</command></term>
        <listitem>
          <para>从控制台字体抽取嵌入的 Unicode 字符表</para>
          <indexterm zone="ch-system-kbd psfgettable" significance="normal">
            <primary sortas="b-psfgettable">psfgettable</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="psfstriptable">
        <term><command moreinfo="none">psfstriptable</command></term>
        <listitem>
          <para>从控制台字体移除嵌入的 Unicode 字符表</para>
          <indexterm zone="ch-system-kbd psfstriptable" significance="normal">
            <primary sortas="b-psfstriptable">psfstriptable</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="psfxtable">
        <term><command moreinfo="none">psfxtable</command></term>
        <listitem>
          <para>为控制台字体处理 Unicode 字符表</para>
          <indexterm zone="ch-system-kbd psfxtable" significance="normal">
            <primary sortas="b-psfxtable">psfxtable</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setfont">
        <term><command moreinfo="none">setfont</command></term>
        <listitem>
          <para>更改控制台的增强图形适配器（Enhanced Graphic Adapter,EGA）和视频图形阵列（Video Graphics Array,VGA）的字体</para>
          <indexterm zone="ch-system-kbd setfont" significance="normal">
            <primary sortas="b-setfont">setfont</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setkeycodes">
        <term><command moreinfo="none">setkeycodes</command></term>
        <listitem>
          <para>加载内核扫描码到键码映射表条目；键盘上有异常键时非常有用</para>
          <indexterm zone="ch-system-kbd setkeycodes" significance="normal">
            <primary sortas="b-setkeycodes">setkeycodes</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setleds">
        <term><command moreinfo="none">setleds</command></term>
        <listitem>
          <para>设置键盘标记和 LED 灯</para>
          <indexterm zone="ch-system-kbd setleds" significance="normal">
            <primary sortas="b-setleds">setleds</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setmetamode">
        <term><command moreinfo="none">setmetamode</command></term>
        <listitem>
          <para>定义键盘元键处理</para>
          <indexterm zone="ch-system-kbd setmetamode" significance="normal">
            <primary sortas="b-setmetamode">setmetamode</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setvtrgb">
        <term><command moreinfo="none">setvtrgb</command></term>
        <listitem>
          <para>设置所有虚拟终端中的控制台颜色映射</para>
          <indexterm zone="ch-system-kbd setvtrgb" significance="normal">
            <primary sortas="b-setvtrgb">setvtrgb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="showconsolefont">
        <term><command moreinfo="none">showconsolefont</command></term>
        <listitem>
          <para>显示当前 EGA/VGA 控制台屏幕字体</para>
          <indexterm zone="ch-system-kbd showconsolefont" significance="normal">
            <primary sortas="b-showconsolefont">showconsolefont</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="showkey">
        <term><command moreinfo="none">showkey</command></term>
        <listitem>
          <para>报告键盘上按键的扫描码、键码以及 ASCII 码</para>
          <indexterm zone="ch-system-kbd showkey" significance="normal">
            <primary sortas="b-showkey">showkey</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unicode_start">
        <term><command moreinfo="none">unicode_start</command></term>
        <listitem>
          <para>设置键盘和控制台为 UNICODE 模式[别用该程序，除非你的键映射文件是 ISO-8859-1 编码。对于其它编码，该工具会输出错误结果。]</para>
          <indexterm zone="ch-system-kbd unicode_start" significance="normal">
            <primary sortas="b-unicode_start">unicode_start</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unicode_stop">
        <term><command moreinfo="none">unicode_stop</command></term>
        <listitem>
          <para>从 UNICODE 模式恢复键盘和控制台为原来模式</para>
          <indexterm zone="ch-system-kbd unicode_stop" significance="normal">
            <primary sortas="b-unicode_stop">unicode_stop</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-libpipeline" role="wrap">
  <?dbhtml filename="libpipeline.html"?>

  

  <title>Libpipeline-1.5.1</title>

  <indexterm zone="ch-system-libpipeline" significance="normal">
    <primary sortas="a-Libpipeline">Libpipeline</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Libpipeline 软件包包含以灵活方便方式管理管道和子进程的库。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>9.0 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Libpipeline</title>

    <para>准备编译 Libpipeline：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

<!--
<screen><userinput remap="configure">PKG_CONFIG_PATH=/tools/lib/pkgconfig ./configure - -prefix=/usr</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter>PKG_CONFIG_PATH</parameter></term>
        <listitem>
          <para>用 pkg-config 获取 <xref linkend="ch-tools-check"/> 编译的测试库元数据的位置。</para>
        </listitem>
      </varlistentry>

    </variablelist>
-->
    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-libpipeline" role="content">
    <title>Libpipeline 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>libpipeline.so</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="libpipeline">
        <term><filename class="libraryfile" moreinfo="none">libpipeline</filename></term>
        <listitem>
          <para>该库用于在子进程之间安全地建立管道</para>
          <indexterm zone="ch-system-libpipeline" significance="normal">
            <primary sortas="c-libpipeline">libpipeline</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-make" role="wrap">
  <?dbhtml filename="make.html"?>

  

  <title>Make-4.2.1</title>

  <indexterm zone="ch-system-make" significance="normal">
    <primary sortas="a-Make">Make</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Make 软件包包含一个用于编译软件的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.5 SBU</seg>
        <seg>13 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Make</title>

    <para>再来一次，解决由 glibc-2.27 或更新版本 glibc 导致的错误：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '211,217 d; 219,229 d; 232 d' glob/glob.c</userinput></screen>

    <para>准备编译 Make：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>测试套件需要知道支持 perl 文件的位置。我们使用一个环境变量来达成这个目的。用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make PERL5LIB=$PWD/tests/ check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>


  <sect2 id="contents-make" role="content">
    <title>Make 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>make</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="make">
        <term><command moreinfo="none">make</command></term>
        <listitem>
          <para>自动检测软件包的哪些部分需要（重新）编译，然后运行相应命令</para>
          <indexterm zone="ch-system-make make" significance="normal">
            <primary sortas="b-make">make</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-patch" role="wrap">
  <?dbhtml filename="patch.html"?>

  

  <title>Patch-2.7.6</title>

  <indexterm zone="ch-system-patch" significance="normal">
    <primary sortas="a-Patch">Patch</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Patch 软件包包含一个通过打「补丁」创建或修改文件的程序，补丁文件通常由  <command moreinfo="none">diff</command> 程序生成。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>13 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Patch</title>

    <para>准备编译 Patch：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-patch" role="content">
    <title>Patch 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>

      <seglistitem>
        <seg>patch</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="patch">
        <term><command moreinfo="none">patch</command></term>
        <listitem>
          <para>根据补丁文件修改文件[补丁文件通常是由 <command moreinfo="none">diff</command> 程序产生的差异列表。通过对源文件应用这些差异生成打补丁后的版本。]</para>
          <indexterm zone="ch-system-patch patch" significance="normal">
            <primary sortas="b-patch">patch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-man-db" role="wrap">
  <?dbhtml filename="man-db.html"?>

  

  <title>Man-DB-2.8.5</title>

  <indexterm zone="ch-system-man-db" significance="normal">
    <primary sortas="a-Man-DB">Man-DB</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Man-DB 软件包包含用于查找和查看 man 页面的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.3 SBU</seg>
        <seg>36 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Man-DB</title>

    <para>准备编译 Man-DB：</para>

<screen revision="systemd" format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr                        \
            --docdir=/usr/share/doc/man-db-2.8.5 \
            --sysconfdir=/etc                    \
            --disable-setuid                     \
            --enable-cache-owner=bin             \
            --with-browser=/usr/bin/lynx         \
            --with-vgrind=/usr/bin/vgrind        \
            --with-grap=/usr/bin/grap</userinput></screen>



    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-setuid</parameter></term>
        <listitem>
          <para>为用户 <command moreinfo="none">man</command> 禁止 <systemitem class="username" moreinfo="none">man</systemitem>.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-cache-owner=bin</parameter></term>
        <listitem>
          <para>用于将系统范围内的 cache 文件的拥有者设置为 bin 用户。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--with-...</parameter></term>
        <listitem>
          <para>这些参数用于设置一些默认程序。<command moreinfo="none">lynx</command> 是一个基于文本的网络浏览器（查看 BLFS 获取安装指令），<command moreinfo="none">vgrind</command> 将程序源码转换为 Groff 输入，<command moreinfo="none">grap</command> 在 Groof 文档排版图中非常有用。查看手册页通常并不需要  <command moreinfo="none">vgrind</command> 和 <command moreinfo="none">grap</command> 程序。它们并不是 LFS 或 BLFS 的一部分，但是如果需要的话你自己应该能够在完成 LFS 之后安装它们。</para>
        </listitem>
      </varlistentry>

      

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

   <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>
<!--
    <para revision="systemd">Remove a reference to a non-existent user:</para>

<screen revision="systemd"><userinput remap="install">sed -i "s:man man:root root:g" /usr/lib/tmpfiles.d/man-db.conf</userinput></screen>
-->
  </sect2>

  <sect2>
    <title>LFS 中的非英语手册页</title>

    <para>下面的表格显示了 Man-DB 假定手册页安装到 <filename class="directory" moreinfo="none">/usr/share/man/&lt;ll&gt;</filename> 会使用的字符编码。除此之外，Man-DB 能正确判断安装到该目录的手册页是否采用 UTF-8 编码。</para>

    <!-- Origin: man-db-2.5.9/lib/encodings.c -->
    <table>
<title>传统 8 位手册页预期字符编码</title>
      <?dbfo table-width="6in" ?>

      <tgroup cols="4">

        <colspec colnum="1" colwidth="1.5in"/>
        <colspec colnum="2" colwidth="1in"/>
        <colspec colnum="3" colwidth="2.5in"/>
        <colspec colnum="4" colwidth="1in"/>

        <thead>
          <row>
            <entry>语言 (缩写)</entry>
            <entry>编码</entry>
            <entry>语言 (缩写)</entry>
            <entry>编码</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>Danish (da)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Croatian (hr)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>German (de)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Hungarian (hu)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>English (en)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Japanese (ja)</entry>
            <entry>EUC-JP</entry>
          </row>
          <row>
            <entry>Spanish (es)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Korean (ko)</entry>
            <entry>EUC-KR</entry>
          </row>
          <row>
            <entry>Estonian (et)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Lithuanian (lt)</entry>
            <entry>ISO-8859-13</entry>
          </row>
          <row>
            <entry>Finnish (fi)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Latvian (lv)</entry>
            <entry>ISO-8859-13</entry>
          </row>
          <row>
            <entry>French (fr)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Macedonian (mk)</entry>
            <entry>ISO-8859-5</entry>
          </row>
          <row>
            <entry>Irish (ga)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Polish (pl)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>Galician (gl)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Romanian (ro)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>Indonesian (id)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Russian (ru)</entry>
            <entry>KOI8-R</entry>
          </row>
          <row>
            <entry>Icelandic (is)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Slovak (sk)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>Italian (it)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Slovenian (sl)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>Norwegian Bokmal (nb)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Serbian Latin (sr@latin)</entry>
            <entry>ISO-8859-2</entry>
          </row>
          <row>
            <entry>Dutch (nl)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Serbian (sr)</entry>
            <entry>ISO-8859-5</entry>
          </row>
          <row>
            <entry>Norwegian Nynorsk (nn)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Turkish (tr)</entry>
            <entry>ISO-8859-9</entry>
          </row>
          <row>
            <entry>Norwegian (no)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Ukrainian (uk)</entry>
            <entry>KOI8-U</entry>
          </row>
          <row>
            <entry>Portuguese (pt)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Vietnamese (vi)</entry>
            <entry>TCVN5712-1</entry>
          </row>
          <row>
            <entry>Swedish (sv)</entry>
            <entry>ISO-8859-1</entry>
            <entry>Simplified Chinese (zh_CN)</entry>
            <entry>GBK</entry>
          </row>
          <row>
            <entry>Belarusian (be)</entry>
            <entry>CP1251</entry>
            <entry>Simplified Chinese, Singapore (zh_SG)</entry>
            <entry>GBK</entry>
          </row>
          <row>
            <entry>Bulgarian (bg)</entry>
            <entry>CP1251</entry>
            <entry>Traditional Chinese, Hong Kong (zh_HK)</entry>
            <entry>BIG5HKSCS</entry>
          </row>
          <row>
            <entry>Czech (cs)</entry>
            <entry>ISO-8859-2</entry>
            <entry>Traditional Chinese (zh_TW)</entry>
            <entry>BIG5</entry>
          </row>
          <row>
            <entry>Greek (el)</entry>
            <entry>ISO-8859-7</entry>
            <entry/>
            <entry/>
          </row>

        </tbody>

      </tgroup>

    </table>

    <note>
      <para>手册页不支持不在列表中的语言。</para>
    </note>

  </sect2>

  <sect2 id="contents-man-db" role="content">
    <title>Man-DB 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>accessdb, apropos (链接到 whatis), catman, lexgrog, man, mandb,
        manpath, 和 whatis</seg>
        <seg>libman.so 和 libmandb.so</seg>
        <seg>/usr/lib/man-db, /usr/lib/tmpfiles.d, /usr/libexec/man-db,
        和 /usr/share/doc/man-db-2.8.5</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="accessdb">
        <term><command moreinfo="none">accessdb</command></term>
        <listitem>
          <para>以人类可读形式转储 <command moreinfo="none">whatis</command> 数据库</para>
          <indexterm zone="ch-system-man-db accessdb" significance="normal">
            <primary sortas="b-accessdb">accessdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="apropos">
        <term><command moreinfo="none">apropos</command></term>
        <listitem>
          <para>查询 <command moreinfo="none">whatis</command> 数据库并显示包含指定字符串的系统命令的简要介绍</para>
          <indexterm zone="ch-system-man-db apropos" significance="normal">
            <primary sortas="b-apropos">apropos</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="catman">
        <term><command moreinfo="none">catman</command></term>
        <listitem>
          <para>创建或更新预格式化手册页</para>
          <indexterm zone="ch-system-man-db catman" significance="normal">
            <primary sortas="b-catman">catman</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lexgrog">
        <term><command moreinfo="none">lexgrog</command></term>
        <listitem>
          <para>显示指定手册页的一行概要信息</para>
          <indexterm zone="ch-system-man-db lexgrog" significance="normal">
            <primary sortas="b-lexgrog">lexgrog</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="man">
        <term><command moreinfo="none">man</command></term>
        <listitem>
          <para>格式化并显示要求的手册页</para>
          <indexterm zone="ch-system-man-db man" significance="normal">
            <primary sortas="b-man">man</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mandb">
        <term><command moreinfo="none">mandb</command></term>
        <listitem>
          <para>创建或更新 <command moreinfo="none">whatis</command> 数据库</para>
          <indexterm zone="ch-system-man-db mandb" significance="normal">
            <primary sortas="b-mandb">mandb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="manpath">
        <term><command moreinfo="none">manpath</command></term>
        <listitem>
          <para>基于 man.conf 中的设置和用户环境显示 $MANPATH 或 (如果没有设置 $MANPATH) 合适的搜索路径的内容</para>
          <indexterm zone="ch-system-man-db manpath" significance="normal">
            <primary sortas="b-manpath">manpath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="whatis">
        <term><command moreinfo="none">whatis</command></term>
        <listitem>
          <para>查询 <command moreinfo="none">whatis</command> 数据库并显示包含以给定关键字为独立字的系统命令的简要介绍</para>
          <indexterm zone="ch-system-man-db whatis" significance="normal">
            <primary sortas="b-whatis">whatis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libman">
        <term><filename class="libraryfile" moreinfo="none">libman</filename></term>
        <listitem>
          <para>包含 <command moreinfo="none">man</command> 的运行时支持</para>
          <indexterm zone="ch-system-man-db libman" significance="normal">
            <primary sortas="c-libman">libman</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmandb">
        <term><filename class="libraryfile" moreinfo="none">libmandb</filename></term>
        <listitem>
          <para>包含 <command moreinfo="none">man</command> 的运行时支持</para>
          <indexterm zone="ch-system-man-db libmandb" significance="normal">
            <primary sortas="c-libmandb">libmandb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-tar" role="wrap">
  <?dbhtml filename="tar.html"?>

  

  <title>Tar-1.31</title>

  <indexterm zone="ch-system-tar" significance="normal">
    <primary sortas="a-Tar">Tar</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Tar 软件包包含一个归档程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.7 SBU</seg>
        <seg>45 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Tar</title>

    <para>修复 tar-1.31 中引入的 bug：</para>
 
 <screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/abort.*/FALLTHROUGH;/' src/extract.c</userinput></screen>

    <para>准备编译 Tar：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">FORCE_UNSAFE_CONFIGURE=1  \
./configure --prefix=/usr \
            --bindir=/bin</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><envar>FORCE_UNSAFE_CONFIGURE=1</envar></term>
        <listitem>
          <para>强制以 root 用户运行 <function moreinfo="none">mknod</function> 的测试。通常认为以 root 用户运行该测试是危险的，但由于是在部分构建的系统上运行，这样并没有问题。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果（大概 3 SBU）：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

<!-- Seems to pass for version 1.31. Keeping as a comment just in case...
    <para>有一个测试 link mismatch 已知会失败。</para>
-->

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install
make -C doc install-html docdir=/usr/share/doc/tar-1.31</userinput></screen>

  </sect2>


  <sect2 id="contents-tar" role="content">
    <title>Tar 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>tar</seg>
        <seg>/usr/share/doc/tar-1.31</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="tar">
        <term><command moreinfo="none">tar</command></term>
        <listitem>
          <para>创建归档文件，从归档文件提取文件，列出归档文件的内容，归档文件也被成为 tar 包</para>
          <indexterm zone="ch-system-tar tar" significance="normal">
            <primary sortas="b-tar">tar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-texinfo" role="wrap">
  <?dbhtml filename="texinfo.html"?>

  

  <title>Texinfo-6.5</title>

  <indexterm zone="ch-system-texinfo" significance="normal">
    <primary sortas="a-Texinfo">Texinfo</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Texinfo 软件包包含用于读、写以及转换信息页的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.9 SBU</seg>
        <seg>129 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Texinfo</title>

    <para>修复在回归检测中导致大量失败项的文件：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i '5481,5485 s/({/(\\{/' tp/Texinfo/Parser.pm</userinput></screen>

    <para>准备编译 Texinfo：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr --disable-static</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-static</parameter></term>
        <listitem>
          <para>顶级的配置脚本会告诉你这是一个未能识别的选项，但是 XSParagraph 的配置脚本能够识别它，并能用其来禁用安装静态 <filename class="libraryfile" moreinfo="none">XSParagraph.a</filename> 至 <filename class="directory" moreinfo="none">/usr/lib/texinfo</filename> 的操作。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>用以下命令测试结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>可选地安装 TeX 中的组件：</para>
    <!-- FIXME: doesn't the TeX installation in BLFS overwrite files there? -->

<screen format="linespecific"><userinput remap="install" moreinfo="none">make TEXMF=/usr/share/texmf install-tex</userinput></screen>

    <variablelist>
      <title>make 参数的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">TEXMF=/usr/share/texmf</parameter></term>
        <listitem>
          <para>如果后面会安装 TeX 软件包，<envar>TEXMF</envar> makefile 变量保存了作为 TeX 树的根位置。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>该信息文档系统使用一个纯文本文件来存放菜单条目清单。文件保存在  <filename moreinfo="none">/usr/share/info/dir</filename>。不幸的是，由于不同软件包 Makefile 的偶然问题，有时候会和系统中安装的信息页不同步。如果需要重建 <filename moreinfo="none">/usr/share/info/dir</filename> 文件，下面的可选命令能完成任务：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">pushd /usr/share/info
rm -v dir
for f in *
  do install-info $f dir 2&gt;/dev/null
done
popd</userinput></screen>

  </sect2>

  <sect2 id="contents-texinfo" role="content">
    <title>Texinfo 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>info, install-info, makeinfo (链接到 texi2any),
        pdftexi2dvi, pod2texi, texi2any, texi2dvi, texi2pdf, 和 texindex</seg>
        <seg>XSParagraph.so</seg>
        <seg>/usr/share/texinfo 和 /usr/lib/texinfo</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="info">
        <term><command moreinfo="none">info</command></term>
        <listitem>
          <para>用于读取和 man 页面相似的信息页，但和只是解释所有可用命令行选项相比更加深入，[例如比较 <command moreinfo="none">man bison</command> 和 <command moreinfo="none">info bison</command>。]</para>
          <indexterm zone="ch-system-texinfo info" significance="normal">
            <primary sortas="b-info">info</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="install-info">
        <term><command moreinfo="none">install-info</command></term>
        <listitem>
          <para>用于安装信息页；它会更新 <command moreinfo="none">info</command> 索引文件中的条目</para>
          <indexterm zone="ch-system-texinfo install-info" significance="normal">
            <primary sortas="b-install-info">install-info</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="makeinfo">
        <term><command moreinfo="none">makeinfo</command></term>
        <listitem>
          <para>翻译给定的 Texinfo 源文档为信息页、纯文本或 HTML</para>
          <indexterm zone="ch-system-texinfo makeinfo" significance="normal">
            <primary sortas="b-makeinfo">makeinfo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pdftexi2dvi">
        <term><command moreinfo="none">pdftexi2dvi</command></term>
        <listitem>
          <para>用于格式化给定的 Texinfo 文档为 PDF 文件</para>
          <indexterm zone="ch-system-texinfo pdftexi2dvi" significance="normal">
            <primary sortas="b-pdftexi2dvi">pdftexi2dvi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pod2texi">
        <term><command moreinfo="none">pod2texi</command></term>
        <listitem>
          <para>转换 Pod 为 Texinfo 格式</para>
          <indexterm zone="ch-system-texinfo pod2texi" significance="normal">
            <primary sortas="b-pod2texi">pod2texi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="texi2any">
        <term><command moreinfo="none">texi2any</command></term>
        <listitem>
          <para>翻译 Texinfo 源文档为多种其它格式</para>
          <indexterm zone="ch-system-texinfo texi2any" significance="normal">
            <primary sortas="b-texiany">texi2any</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="texi2dvi">
        <term><command moreinfo="none">texi2dvi</command></term>
        <listitem>
          <para>用于格式化给定 Texinfo 文档为可打印的设备无关文件</para>
          <indexterm zone="ch-system-texinfo texi2dvi" significance="normal">
            <primary sortas="b-texi2dvi">texi2dvi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="texi2pdf">
        <term><command moreinfo="none">texi2pdf</command></term>
        <listitem>
          <para>用于格式化给定 Texinfo 文档为 PDF 文件</para>
          <indexterm zone="ch-system-texinfo texi2pdf" significance="normal">
            <primary sortas="b-texi2pdf">texi2pdf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="texindex">
        <term><command moreinfo="none">texindex</command></term>
        <listitem>
          <para>用于对 Texinfo 索引文件进行排序</para>
          <indexterm zone="ch-system-texinfo texindex" significance="normal">
            <primary sortas="b-texindex">texindex</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-vim" role="wrap">
  <?dbhtml filename="vim.html"?>

  

  <title>Vim-8.1</title>

  <indexterm zone="ch-system-vim" significance="normal">
    <primary sortas="a-Vim">Vim</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Vim 软件包包含了一个强大的文本编辑器。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.3 SBU</seg>
        <seg>169 MB</seg>
      </seglistitem>
    </segmentedlist>

    <tip>
      <title>Vim 的安装</title>

      <para>如果你钟情于其它的编辑器，比如 Emacs、Joe，或 Nano。请参考 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/editors.html"/> 里的安装指导。</para>
    </tip>

  </sect2>

  <sect2 role="installation">
    <title>Vim 的安装</title>

    <para>首先，把配置文件 <filename moreinfo="none">vimrc</filename> 从默认位置移动到 <filename class="directory" moreinfo="none">/etc</filename>：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">echo '#define SYS_VIMRC_FILE "/etc/vimrc"' &gt;&gt; src/feature.h</userinput></screen>

<!--    <para>Disable a test that fails:</para>

<screen><userinput remap="pre">sed -i '/call/{s/split/xsplit/;s/303/492/}' src/testdir/test_recover.vim</userinput></screen>
-->
    <para>让 Vim 做好编译准备：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr</userinput></screen>

    <para>编译安装包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>检验结果：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">LANG=en_US.UTF-8 make -j1 test &amp;&gt; vim-test.log</userinput></screen>

    <para>这个测试套件会输出一堆二进制数据到屏幕上。这会导致当前设置下的终端出现问题。把输出重定向到一个日志文件就可以解决这个问题。测试成功的话就会输出「ALL DONE」。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>许多用户习惯于使用 <command moreinfo="none">vi</command> 而不是 <command moreinfo="none">vim</command>。为了当人们在习惯性的输入 <command moreinfo="none">vi</command> 时能执行 <command moreinfo="none">vim</command>，需要给二进制文件和 man 页建立符号连接：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv vim /usr/bin/vi
for L in  /usr/share/man/{,*/}man1/vim.1; do
    ln -sv vim.1 $(dirname $L)/vi.1
done</userinput></screen>

    <para>默认情况下，Vim 的说明文档被安装在 <filename class="directory" moreinfo="none">/usr/share/vim</filename> 里。下面的这个符号链接使得可以通过 <filename class="directory" moreinfo="none">/usr/share/doc/vim-8.1</filename> 访问该文档，让它的位置与其它软件包的文档位置保持一致：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sv ../vim/vim81/doc /usr/share/doc/vim-8.1</userinput></screen>

    <para>如果要把一个 X Window 系统安装在 LFS 系统上，可能得在安装完 X 系统后再重新编译 Vim。Vim 带有一个 GUI 版本，这个版本需要安装 X 和一些额外的库。想了解更多信息，请参考 Vim 文档和 BLFS <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/vim.html"/> 中 Vim 安装指导页。</para>

  </sect2>

  <sect2 id="conf-vim" role="configuration">
    <title>设置 Vim</title>

    <indexterm zone="conf-vim" significance="normal">
      <primary sortas="e-/etc/vimrc">/etc/vimrc</primary>
    </indexterm>

    <para>默认情况下，<command moreinfo="none">vim</command> 是以不兼容 vi 的模式运行的。这对于过去使用其它编辑器的用户可能是个新问题。下面列出了「非兼容性」设置以突出显示使用的新特性。它也提醒着那些想换成「兼容」模式的人，这是配置文件里第一个该被设置的地方。这非常有必要，因为它会改变其它的设置，而且覆写必须在这个设置之后。以下面的方式，创建一个默认的 <command moreinfo="none">vim</command> 配置文件：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/vimrc &lt;&lt; "EOF"
<literal moreinfo="none">" Begin /etc/vimrc

" Ensure defaults are set before customizing settings, not after
source $VIMRUNTIME/defaults.vim
let skip_defaults_vim=1 

set nocompatible
set backspace=2
set mouse=
syntax on
if (&amp;term == "xterm") || (&amp;term == "putty")
  set background=dark
endif

" End /etc/vimrc</literal>
EOF</userinput></screen>

    <para>设置 <parameter moreinfo="none">set nocompatible</parameter> 让 <command moreinfo="none">vim</command> 比 vi 兼容模式更有用。删掉「no」以保留旧的 <command moreinfo="none">vi</command> 特性。设置 <parameter moreinfo="none">set backspace=2</parameter> 让退格跨越换行、自动缩进和插入的开始。<parameter moreinfo="none">syntax on</parameter> 参数使 vim 能高亮显示语法。设置 <parameter moreinfo="none">set mouse</parameter> 让你能在 chroot 和远程连接的时候用鼠标粘帖文本。最后，带有 <parameter moreinfo="none">set  background=dark</parameter> 的 <emphasis>if</emphasis> 语句矫正了 <command moreinfo="none">vim</command> 对于某些终端模拟器的背景颜色的估算。这让某些写在黑色背景上的程序的高亮色能有更好的调色方案。</para>
<!--
    <para>Creating an empty <filename>~/.vimrc</filename> prevents vim from
    overriding settings in <filename>/etc/vimrc</filename> by using
    <filename>/usr/share/vim/vim80/defaults.vim</filename>.</para>
-->
    <para>用下面的命令可以获得其它选项的文档：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">vim -c ':options'</userinput></screen>

    <note>
      <para>默认情况下，Vim 只安装了英文的拼写检查文件。要想安装你想要的语言的拼写检查文件，请从 <ulink url="ftp://ftp.vim.org/pub/vim/runtime/spell/"/> 下载你所用语言的  <filename moreinfo="none">*.spl</filename>  文件，可下可不下的 <filename moreinfo="none">*.sug</filename> 文件和文字编码。并把它们保存到 <filename class="directory" moreinfo="none">/usr/share/vim/vim81/spell/</filename>。</para>

      <para>要使用这些文件，需要设置 <filename moreinfo="none">/etc/vimrc</filename> 里的某些项，例如：</para>

<screen format="linespecific"><literal moreinfo="none">set spelllang=en,ru
set spell</literal></screen>

      <para>想要了解更多信息，请阅读上方 URL 里对应 README 文件。</para>
    </note>

  </sect2>

  <sect2 id="contents-vim" role="content">
    <title>Vim 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的软件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
       <seg> ex (链接到 vim), rview (链接到 vim), rvim (链接到 vim), vi
       (链接到 vim), view (链接到 vim), vim, vimdiff (链接到 vim), vimtutor,
       和 xxd</seg>
        <seg>/usr/share/vim</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="ex">
        <term><command moreinfo="none">ex</command></term>
        <listitem>
          <para>以 ex 模式启动 <command moreinfo="none">vim</command></para>
          <indexterm zone="ch-system-vim ex" significance="normal">
            <primary sortas="b-ex">ex</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rview">
        <term><command moreinfo="none">rview</command></term>
        <listitem>
          <para>是 <command moreinfo="none">view</command> 的一个受限版本；不能启动 shell 命令，而且  <command moreinfo="none">view</command> 无法暂停</para>
          <indexterm zone="ch-system-vim rview" significance="normal">
            <primary sortas="b-rview">rview</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rvim">
        <term><command moreinfo="none">rvim</command></term>
        <listitem>
          <para>是 <command moreinfo="none">vim</command> 的一个受限版本；不能启动 shell 命令，而且  <command moreinfo="none">vim</command> 无法暂停</para>
          <indexterm zone="ch-system-vim rvim" significance="normal">
            <primary sortas="b-rvim">rvim</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vi">
        <term><command moreinfo="none">vi</command></term>
        <listitem>
          <para>链接到 <command moreinfo="none">vim</command></para>
          <indexterm zone="ch-system-vim vi" significance="normal">
            <primary sortas="b-vi">vi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="view">
        <term><command moreinfo="none">view</command></term>
        <listitem>
          <para>以只读模式启动 <command moreinfo="none">vim</command></para>
          <indexterm zone="ch-system-vim view" significance="normal">
            <primary sortas="b-view">view</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vim">
        <term><command moreinfo="none">vim</command></term>
        <listitem>
          <para>就是这个编辑器</para>
          <indexterm zone="ch-system-vim vim" significance="normal">
            <primary sortas="b-vim">vim</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vimdiff">
        <term><command moreinfo="none">vimdiff</command></term>
        <listitem>
          <para>用 <command moreinfo="none">vim</command> 编辑一个文件的两到三个版本并显示它们的区别</para>
          <indexterm zone="ch-system-vim vimdiff" significance="normal">
            <primary sortas="b-vimdiff">vimdiff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vimtutor">
        <term><command moreinfo="none">vimtutor</command></term>
        <listitem>
          <para><command moreinfo="none">vim</command> 基本热键和命令的教学</para>
          <indexterm zone="ch-system-vim vimtutor" significance="normal">
            <primary sortas="b-vimtutor">vimtutor</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="xxd">
        <term><command moreinfo="none">xxd</command></term>
        <listitem>
          <para>将给定文件进行十六进制转储，还可以还原；所以它可以被用于打二进制补丁</para>
          <indexterm zone="ch-system-vim xxd" significance="normal">
            <primary sortas="b-xxd">xxd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

  <!-- systemd only -->
  <sect1 id="ch-system-systemd" role="wrap" revision="systemd">
  <?dbhtml filename="systemd.html"?>

  

  <title>systemd-240</title>

  <indexterm zone="ch-system-systemd" significance="normal">
    <primary sortas="a-systemd">systemd</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>systemd 软件包包含用于控制启动、运行和关闭系统的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>2.4 SBU</seg>
        <seg>226 MB</seg>
      </seglistitem>
    </segmentedlist>
  </sect2>

  <sect2 role="installation">
    <title>安装 systemd</title>

    <para>应有该补丁以修复两个严重的安全漏洞：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">patch -Np1 -i ../systemd-240-security_fixes-2.patch</userinput></screen>

    <para>创建符号链接以解决丢失 xsltproc 的问题：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">ln -sf /tools/bin/true /usr/bin/xsltproc</userinput></screen>

    <para>由于我们还未安装 Util-Linux 的最终版本，所以在适当的位置创建指向库的链接：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">for file in /tools/lib/lib{blkid,mount,uuid}*; do
    ln -sf $file /usr/lib/
done</userinput></screen>

    <para>设置 man 手册：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">tar -xf ../systemd-man-pages-240.tar.xz</userinput></screen>

    <para>移除不能在 chroot 下构建的测试：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed '177,$ d' -i src/resolve/meson.build</userinput></screen>

    <para>从默认的 udev 规则中删除没有必要的组 <systemitem class="groupname" moreinfo="none">render</systemitem>：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">sed -i 's/GROUP="render", //' rules/50-udev-default.rules.in</userinput></screen>

    <para>systemd 编译前准备：</para>

    <screen format="linespecific"><userinput remap="configure" moreinfo="none">mkdir -p build
cd       build

PKG_CONFIG_PATH="/usr/lib/pkgconfig:/tools/lib/pkgconfig" \
LANG=en_US.UTF-8                   \
meson --prefix=/usr                \
      --sysconfdir=/etc            \
      --localstatedir=/var         \
      -Dblkid=true                 \
      -Dbuildtype=release          \
      -Ddefault-dnssec=no          \
      -Dfirstboot=false            \
      -Dinstall-tests=false        \
      -Dkill-path=/bin/kill        \
      -Dkmod-path=/bin/kmod        \
      -Dldconfig=false             \
      -Dmount-path=/bin/mount      \
      -Drootprefix=                \
      -Drootlibdir=/lib            \
      -Dsplit-usr=true             \
      -Dsulogin-path=/sbin/sulogin \
      -Dsysusers=false             \
      -Dumount-path=/bin/umount    \
      -Db_lto=false                \
      ..</userinput></screen>

    <variablelist>
      <title>选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">-D*-path=*</parameter></term>
        <listitem>
          <para>此类参数提供了 systemd 在运行时所需的二进制的位置，这些二进制文件有些还未安装，有些的 pkgconfig 文件现在还在<filename moreinfo="none">/tools/lib/pkgconfig</filename> 中。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Ddefault-dnssec=no</parameter></term>
        <listitem>
          <para>此参数关闭了实验性 DNSSEC 的支持。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dfirstboot=false</parameter></term>
        <listitem>
          <para>此参数将防止负责首次设置系统的 systemd 服务被安装。这对 LFS 没什么用，因为 LFS 的一切都是手动完成的。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dinstall-tests=false</parameter></term>
        <listitem>
          <para>此参数将防止编译测试的安装。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dldconfig=false</parameter></term>
        <listitem>
          <para>此参数将防止启动时运行 <command moreinfo="none">ldconfig</command> 的 systemd 单元被安装，对于 LFS 这样的 原生发行版而言毫无作用还会拖慢启动时间。如果你也是这么想的就删掉它。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Droot*</parameter></term>
        <listitem>
          <para>此类参数用于确保核心程序和共享库能够安装到根分区的子目录。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dsplit-usr=true</parameter></term>
        <listitem>
          <para>此参数用于确保 systemd 可以在 /bin，/lib 和 /sbin 目录工作，而非符号链接指向的 /usr 副本。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">-Dsysusers=false</parameter></term>
        <listitem>
          <para>此参数用于防止负责于设置 <filename moreinfo="none">/etc/group</filename> 和 <filename moreinfo="none">/etc/passwd</filename> 文件的 systemd 服务被安装。这两个文件都早在前章就创建了。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">LANG=en_US.UTF-8 ninja</userinput></screen>
<!--
    <para>To test the package, execute the following command:</para>

<screen><userinput remap="test">LANG=en_US.UTF-8 ninja test</userinput></screen>
-->
    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">LANG=en_US.UTF-8 ninja install</userinput></screen>

    <para>移除不必要的目录：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">rm -rfv /usr/lib/rpm
rm -f /usr/bin/xsltproc</userinput></screen>

    <para>创建 <filename moreinfo="none">/etc/machine-id</filename> 需要的  <command moreinfo="none">systemd-journald</command> 文件：</para>

<screen format="linespecific"><userinput remap="adjust" moreinfo="none">systemd-machine-id-setup</userinput></screen>

    <para>创建 <filename moreinfo="none">/lib/systemd/systemd-user-sessions</filename> 脚本，以允许非特权用户无需 <application moreinfo="none">systemd-logind</application> 亦可登录：</para>

<screen format="linespecific"><userinput remap="adjust" moreinfo="none">cat &gt; /lib/systemd/systemd-user-sessions &lt;&lt; "EOF"
#!/bin/bash
rm -f /run/nologin
EOF
chmod 755 /lib/systemd/systemd-user-sessions</userinput></screen>

  </sect2>

  <sect2 id="contents-systemd" role="content">
    <title>systemd 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>bootctl, busctl, coredumpctl, halt, hostnamectl, init, journalctl,
        kernel-install, localectl, loginctl, machinectl, networkctl, poweroff,
        reboot, runlevel, shutdown, systemctl, systemd-analyze,
        systemd-ask-password, systemd-cat, systemd-cgls, systemd-cgtop,
        systemd-delta, systemd-detect-virt, systemd-escape, systemd-hwdb,
        systemd-inhibit, systemd-machine-id-setup, systemd-mount, 
        systemd-notify, systemd-nspawn, systemd-path, systemd-resolve, 
        systemd-run, systemd-socket-activate,
        systemd-stdio-bridge, systemd-tmpfiles, systemd-tty-ask-password-agent,
        telinit, timedatectl, 和 udevadm</seg>
        <seg>libnss_myhostname.so.2, libnss_mymachines.so.2,
        libnss_resolve.so.2, libnss_systemd.so.2, 
        libsystemd.so, libsystemd-shared-240.so,
        和 libudev.so</seg>
        <seg>/etc/binfmt.d, /etc/init.d, /etc/kernel, /etc/modules-load.d,
        /etc/sysctl.d, /etc/systemd, /etc/tmpfiles.d, /etc/udev,
        /etc/xdg/systemd, /lib/systemd, /lib/udev, /usr/include/systemd,
        /usr/lib/binfmt.d, /usr/lib/kernel, /usr/lib/modules-load.d,
        /usr/lib/sysctl.d, /usr/lib/systemd, /usr/lib/tmpfiles.d,
        /usr/share/doc/systemd-240, /usr/share/factory,
        /usr/share/systemd, /var/lib/systemd, 和 /var/log/journal</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bootctl">
        <term><command moreinfo="none">bootctl</command></term>
        <listitem>
          <para>用于查询固件和启动管理设置</para>
          <indexterm zone="ch-system-systemd bootctl" significance="normal">
            <primary sortas="b-bootctl">bootctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="busctl">
        <term><command moreinfo="none">busctl</command></term>
        <listitem>
          <para>用于自检和监控 D-Bus 总线</para>
          <indexterm zone="ch-system-systemd busctl" significance="normal">
            <primary sortas="b-busctl">busctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="coredumpctl">
        <term><command moreinfo="none">coredumpctl</command></term>
        <listitem>
          <para>用于检索 systemd 日志生成的核心转储</para>
          <indexterm zone="ch-system-systemd coredumpctl" significance="normal">
            <primary sortas="b-coredumpctl">coredumpctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="halt">
        <term><command moreinfo="none">halt</command></term>
        <listitem>
          <para>通常调用带 <parameter moreinfo="none">-h</parameter> 参数的 <command moreinfo="none">shutdown</command> 命令，除非已经是运行等级 0，然后告诉内核暂停系统；它会在  <filename moreinfo="none">/var/log/wtmp</filename> 文件中标记正准备关闭系统。</para>
          <indexterm zone="ch-system-systemd halt" significance="normal">
            <primary sortas="b-halt">halt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hostnamectl">
        <term><command moreinfo="none">hostnamectl</command></term>
        <listitem>
          <para>用于查询或更改系统名称以及相关的设置</para>
          <indexterm zone="ch-system-systemd hostnamectl" significance="normal">
            <primary sortas="b-hostnamectl">hostnamectl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="init">
        <term><command moreinfo="none">init</command></term>
        <listitem>
          <para>内核初始化硬件后接管启动过程而启动的第一个进程，随后会根据其配置文件，启动其中所有的进程。</para>
          <indexterm zone="ch-system-systemd init" significance="normal">
            <primary sortas="b-init">init</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="journalctl">
        <term><command moreinfo="none">journalctl</command></term>
        <listitem>
          <para>用于查询 systemd 日志的内容</para>
          <indexterm zone="ch-system-systemd journalctl" significance="normal">
            <primary sortas="b-journalctl">journalctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kernel-install">
        <term><command moreinfo="none">kernel-install</command></term>
        <listitem>
          <para>用于向和从 /boot 中添加或移除内核以及 initramfs 镜像</para>
          <indexterm zone="ch-system-systemd kernel-install" significance="normal">
            <primary sortas="b-kernel-install">kernel-install</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="localectl">
        <term><command moreinfo="none">localectl</command></term>
        <listitem>
          <para>用于查询和更改系统区域设置和键盘布局设置</para>
          <indexterm zone="ch-system-systemd localectl" significance="normal">
            <primary sortas="b-localectl">localectl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="loginctl">
        <term><command moreinfo="none">loginctl</command></term>
        <listitem>
          <para>用于自检和控制 systemd 登录管理器的状态</para>
          <indexterm zone="ch-system-systemd loginctl" significance="normal">
            <primary sortas="b-loginctl">loginctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="machinectl">
        <term><command moreinfo="none">machinectl</command></term>
        <listitem>
          <para>用于自检和控制 systemd 虚拟机和容器注册管理器的状态</para>
          <indexterm zone="ch-system-systemd machinectl" significance="normal">
            <primary sortas="b-machinectl">machinectl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="networkctl">
        <term><command moreinfo="none">networkctl</command></term>
        <listitem>
          <para>用于检查 systemd-networkd 所看到的网络链接状态</para>
          <indexterm zone="ch-system-systemd networkctl" significance="normal">
            <primary sortas="b-networkctl">networkctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="poweroff">
        <term><command moreinfo="none">poweroff</command></term>
        <listitem>
          <para>告诉内核暂停系统并关闭计算机 （查看 <command moreinfo="none">halt</command>）</para>
          <indexterm zone="ch-system-systemd poweroff" significance="normal">
            <primary sortas="b-poweroff">poweroff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="reboot">
        <term><command moreinfo="none">reboot</command></term>
        <listitem>
          <para>告诉内核重启系统 （查看 <command moreinfo="none">halt</command>）</para>
          <indexterm zone="ch-system-systemd reboot" significance="normal">
            <primary sortas="b-reboot">reboot</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="runlevel">
        <term><command moreinfo="none">runlevel</command></term>
        <listitem>
          <para>报告之前和当期的运行等级、即 <filename moreinfo="none">/var/run/utmp</filename> 文件中的最后一个运行等级记录</para>
          <indexterm zone="ch-system-systemd runlevel" significance="normal">
            <primary sortas="b-runlevel">runlevel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="shutdown">
        <term><command moreinfo="none">shutdown</command></term>
        <listitem>
          <para>以安全的方式关闭系统、向所有进程发送信号并通知所有登录的用户</para>
          <indexterm zone="ch-system-systemd shutdown" significance="normal">
            <primary sortas="b-shutdown">shutdown</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemctl">
        <term><command moreinfo="none">systemctl</command></term>
        <listitem>
          <para>用于自检和控制 systemd 系统和服务管理器的状态</para>
          <indexterm zone="ch-system-systemd systemctl" significance="normal">
            <primary sortas="b-systemctl">systemctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-analyze">
        <term><command moreinfo="none">systemd-analyze</command></term>
        <listitem>
          <para>用于确定当前引导中的系统启动性能</para>
          <indexterm zone="ch-system-systemd systemd-analyze" significance="normal">
            <primary sortas="b-systemd-analyze">systemd-analyze</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-ask-password">
        <term><command moreinfo="none">systemd-ask-password</command></term>
        <listitem>
          <para>通过命令行中的问题消息用于向用户查询系统密码或口令</para>
          <indexterm zone="ch-system-systemd systemd-ask-password" significance="normal">
            <primary sortas="b-systemd-ask-password">systemd-ask-password</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-cat">
        <term><command moreinfo="none">systemd-cat</command></term>
        <listitem>
          <para>用于连接进程日志的 STDOUT 和 STDERR</para>
          <indexterm zone="ch-system-systemd systemd-cat" significance="normal">
            <primary sortas="b-systemd-cat">systemd-cat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-cgls">
        <term><command moreinfo="none">systemd-cgls</command></term>
        <listitem>
          <para>以树的形式递归显示指定 Linux 控制组层次结构的内容</para>
          <indexterm zone="ch-system-systemd systemd-cgls" significance="normal">
            <primary sortas="b-systemd-cgls">systemd-cgls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-cgtop">
        <term><command moreinfo="none">systemd-cgtop</command></term>
        <listitem>
          <para>按照 CPU、内存和磁盘 I/O 负载的顺序显示本地 Linux 控制组层次结构的顶层控制组</para>
          <indexterm zone="ch-system-systemd systemd-cgtop" significance="normal">
            <primary sortas="b-systemd-cgtop">systemd-cgtop</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-delta">
        <term><command moreinfo="none">systemd-delta</command></term>
        <listitem>
          <para>用于识别和比较 <filename class="directory" moreinfo="none">/etc</filename> 中覆盖  <filename class="directory" moreinfo="none">/usr</filename> 对应部分的配置文件</para>
          <indexterm zone="ch-system-systemd systemd-delta" significance="normal">
            <primary sortas="b-systemd-delta">systemd-delta</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-detect-virt">
        <term><command moreinfo="none">systemd-detect-virt</command></term>
        <listitem>
          <para>在虚拟化环境中检测执行情况</para>
          <indexterm zone="ch-system-systemd systemd-detect-virt" significance="normal">
            <primary sortas="b-systemd-detect-virt">systemd-detect-virt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-escape">
        <term><command moreinfo="none">systemd-escape</command></term>
        <listitem>
          <para>用于在 systemd 单元名称中包含转义字符串</para>
          <indexterm zone="ch-system-systemd systemd-escape" significance="normal">
            <primary sortas="b-systemd-escape">systemd-escape</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-hwdb">
        <term><command moreinfo="none">systemd-hwdb</command></term>
        <listitem>
          <para>用户管理硬件数据库（hwdb）</para>
          <indexterm zone="ch-system-systemd systemd-hwdb" significance="normal">
            <primary sortas="b-systemd-hwdb">systemd-hwdb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-inhibit">
        <term><command moreinfo="none">systemd-inhibit</command></term>
        <listitem>
          <para>用于在关机、睡眠或空闲休眠锁时执行程序</para>
          <indexterm zone="ch-system-systemd systemd-inhibit" significance="normal">
            <primary sortas="b-systemd-inhibit">systemd-inhibit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-machine-id-setup">
        <term><command moreinfo="none">systemd-machine-id-setup</command></term>
        <listitem>
          <para>启动时系统安装程序用随机生成的 ID 初始化保存到  <filename moreinfo="none">/etc/machine-id</filename> 的机器 ID</para>
          <indexterm zone="ch-system-systemd systemd-machine-id-setup" significance="normal">
            <primary sortas="b-systemd-machine-id-setup">systemd-machine-id-setup</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-mount">
        <term><command moreinfo="none">systemd-mount</command></term>
        <listitem>
          <para>是临时挂载或自动挂载驱动器的工具。</para>
          <indexterm zone="ch-system-systemd systemd-mount" significance="normal">
            <primary sortas="b-systemd-mount">systemd-mount</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-notify">
        <term><command moreinfo="none">systemd-notify</command></term>
        <listitem>
          <para>守护进程脚本用于通知 init 系统状态更改</para>
          <indexterm zone="ch-system-systemd systemd-notify" significance="normal">
            <primary sortas="b-systemd-notify">systemd-notify</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-nspawn">
        <term><command moreinfo="none">systemd-nspawn</command></term>
        <listitem>
          <para>用于在轻量级容器空间中运行命令或操作系统</para>
          <indexterm zone="ch-system-systemd systemd-nspawn" significance="normal">
            <primary sortas="b-systemd-nspawn">systemd-nspawn</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-path">
        <term><command moreinfo="none">systemd-path</command></term>
        <listitem>
          <para>用于查询系统和用户路径</para>
          <indexterm zone="ch-system-systemd systemd-path" significance="normal">
            <primary sortas="b-systemd-path">systemd-path</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-resolve">
        <term><command moreinfo="none">systemd-resolve</command></term>
        <listitem>
          <para>用于解析域名，IPv4 和 IPv6 地址，DNS 资源记录，以及服务</para>
          <indexterm zone="ch-system-systemd systemd-resolve" significance="normal">
            <primary sortas="b-systemd-resolve">systemd-resolve</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-run">
        <term><command moreinfo="none">systemd-run</command></term>
        <listitem>
          <para>用于创建并运行一个临时 .service 或 .scope 单元并在其中运行指定命令</para>
          <indexterm zone="ch-system-systemd systemd-run" significance="normal">
            <primary sortas="b-systemd-run">systemd-run</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <!-- <varlistentry id="systemd-stdio-bridge">
        <term><command>systemd-stdio-bridge</command></term>
        <listitem>
          <para>To be completed</para>
          <indexterm zone="ch-system-systemd systemd-stdio-bridge">
            <primary sortas="b-systemd-stdio-bridge">systemd-stdio-bridge</primary>
          </indexterm>
        </listitem>
      </varlistentry> -->

      <varlistentry id="systemd-socket-activate">
        <term><command moreinfo="none">systemd-socket-activate</command></term>
        <listitem>
          <para>用于监听设备套接字并在连接时启动进程的工具。</para>
          <indexterm zone="ch-system-systemd systemd-socket-activate" significance="normal">
            <primary sortas="b-systemd-socket-activate">systemd-socket-activate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-tmpfiles">
        <term><command moreinfo="none">systemd-tmpfiles</command></term>
        <listitem>
          <para>基于配置文件格式和 <filename class="directory" moreinfo="none">tmpfiles.d</filename> 指定的位置创建、删除以及清理易变的和临时文件和目录</para>
          <indexterm zone="ch-system-systemd systemd-tmpfiles" significance="normal">
            <primary sortas="b-systemd-tmpfiles">systemd-tmpfiles</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="systemd-tty-ask-password-agent">
        <term><command moreinfo="none">systemd-tty-ask-password-agent</command></term>
        <listitem>
          <para>用于列出或执行正在等待的 systemd 密码请求</para>
          <indexterm zone="ch-system-systemd systemd-tty-ask-password-agent" significance="normal">
            <primary sortas="b-systemd-tty-ask-password-agent">systemd-tty-ask-password-agent</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="telinit">
        <term><command moreinfo="none">telinit</command></term>
        <listitem>
          <para>告诉 <command moreinfo="none">init</command> 要更改的运行等级</para>
          <indexterm zone="ch-system-systemd telinit" significance="normal">
            <primary sortas="b-telinit">telinit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="timedatectl">
        <term><command moreinfo="none">timedatectl</command></term>
        <listitem>
          <para>用于查询和更改系统时间和设置</para>
          <indexterm zone="ch-system-systemd timedatectl" significance="normal">
            <primary sortas="b-timedatectl">timedatectl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="udevadm">
        <term><command moreinfo="none">udevadm</command></term>
        <listitem>
          <para>通用 udev 管理工具：控制 udevd 守护进程、从 udev 数据库提供信息、监控 uevent、等待 uevent 完成、检测 udev 配置、为指定设备触发 uevents</para>
          <indexterm zone="ch-system-systemd udevadm" significance="normal">
            <primary sortas="b-udevadm">udevadm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsystemd">
        <term><filename class="libraryfile" moreinfo="none">libsystemd</filename></term>
        <listitem>
          <para>systemd 主要的实用工具库</para>
          <indexterm zone="ch-system-systemd libsystemd" significance="normal">
            <primary sortas="c-libsystemd">libsystemd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libudev">
        <term><filename class="libraryfile" moreinfo="none">libudev</filename></term>
        <listitem>
          <para>用于获取 udev 设备信息的库</para>
          <indexterm zone="ch-system-systemd libudev" significance="normal">
            <primary sortas="c-libudev">libudev</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-dbus" role="wrap" revision="systemd">
  <?dbhtml filename="dbus.html"?>

  

  <title>D-Bus-1.12.12</title>

  <indexterm zone="ch-system-dbus" significance="normal">
    <primary sortas="a-dbus">D-Bus</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>D-Bus 是一个消息总线系统，应用之间相互通信的简单方式。D-Bus 支持系统守护进程（例如添加新硬件设备或打印队列更改事件）和每个用户的登录会话守护进程 （例如用户应用程序之间的一般进程间通信）。另外，消息总线在通用一对一消息传递框架之上构建，该框架使得任意两个应用可以直接通信（而不需要通过消息总线守护进程）。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.2 SBU</seg>
        <seg>18 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 D-Bus</title>

    <para>准备编译 D-Bus：</para>

<screen format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr                       \
            --sysconfdir=/etc                   \
            --localstatedir=/var                \
            --disable-static                    \
            --disable-doxygen-docs              \
            --disable-xml-docs                  \
            --docdir=/usr/share/doc/dbus-1.12.12 \
            --with-console-auth-dir=/run/console</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--with-console-auth-dir=/run/console</parameter></term>
        <listitem>
          <para>该选项指定 ConsoleKit 验证目录的位置。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>该软件包附带了一个测试套件，但需求几个未包含在 LFS 中的软件包。运行测试套件的命令可以在 BLFS 指南 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/dbus.html"/> 中找到。</para>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>需要移动共享库到 <filename class="directory" moreinfo="none">/lib</filename>，因此需要重建 <filename class="directory" moreinfo="none">/usr/lib</filename> 中的 <filename class="extension" moreinfo="none">.so</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libdbus-1.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libdbus-1.so) /usr/lib/libdbus-1.so</userinput></screen>

    <para>创建符号链接，使得 D-Bus 和 systemd 可以使用相同的 <filename moreinfo="none">machine-id</filename>  文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">ln -sfv /etc/machine-id /var/lib/dbus</userinput></screen>

  </sect2>

  <sect2 id="contents-dbus" role="content">
    <title>D-Bus 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>dbus-cleanup-sockets, dbus-daemon, dbus-launch, dbus-monitor,
        dbus-run-session, dbus-send, dbus-test-tool, 
        dbus-update-activation-environment, and dbus-uuidgen</seg>
        <seg>libdbus-1.{a,so}</seg>
        <seg>/etc/dbus-1, /usr/include/dbus-1.0, /usr/lib/dbus-1.0,
        /usr/share/dbus-1, /usr/share/doc/dbus-1.12.12,
        和 /var/lib/dbus</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="dbus-cleanup-sockets">
        <term><command moreinfo="none">dbus-cleanup-sockets</command></term>
        <listitem>
          <para>用于清理目录中残留的套接字</para>
          <indexterm zone="ch-system-dbus dbus-cleanup-sockets" significance="normal">
            <primary sortas="b-dbus-cleanup-sockets">dbus-cleanup-sockets</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-daemon">
        <term><command moreinfo="none">dbus-daemon</command></term>
        <listitem>
          <para>D-Bus 消息总线守护进程</para>
          <indexterm zone="ch-system-dbus dbus-daemon" significance="normal">
            <primary sortas="b-dbus-daemon">dbus-daemon</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-launch">
        <term><command moreinfo="none">dbus-launch</command></term>
        <listitem>
          <para>从 shell 脚本启动 <command moreinfo="none">dbus-daemon</command></para>
          <indexterm zone="ch-system-dbus dbus-launch" significance="normal">
            <primary sortas="b-dbus-launch">dbus-launch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-monitor">
        <term><command moreinfo="none">dbus-monitor</command></term>
        <listitem>
          <para>监控 D-Bus 消息总线中传送的消息</para>
          <indexterm zone="ch-system-dbus dbus-monitor" significance="normal">
            <primary sortas="b-dbus-monitor">dbus-monitor</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-run-session">
        <term><command moreinfo="none">dbus-run-session</command></term>
        <listitem>
          <para>从 shell 脚本中启动一个 <command moreinfo="none">dbus-daemon</command> 会话总线实例并在会话中启动指定程序</para>
          <indexterm zone="ch-system-dbus dbus-run-session" significance="normal">
            <primary sortas="b-dbus-run-session">dbus-run-session</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-send">
        <term><command moreinfo="none">dbus-send</command></term>
        <listitem>
          <para>发送消息到 D-Bus 消息总线</para>
          <indexterm zone="ch-system-dbus dbus-send" significance="normal">
            <primary sortas="b-dbus-send">dbus-send</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-test-tool">
        <term><command moreinfo="none">dbus-test-tool</command></term>
        <listitem>
          <para>帮助软件包测试 <application moreinfo="none">D-Bus</application> 的工具</para>
          <indexterm zone="ch-system-dbus dbus-test-tool" significance="normal">
            <primary sortas="b-dbus-test-tool">dbus-test-tool</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <!-- This is a very long command name. Excuse the long <primary> statement below. -->
      <varlistentry id="dbus-update-activation-environment">
        <term><command moreinfo="none">dbus-update-activation-environment</command></term>
        <listitem>
          <para>更新 <application moreinfo="none">D-Bus</application> 会话服务的环境变量</para>
          <indexterm zone="ch-system-dbus dbus-update-activation-environment" significance="normal">
            <primary sortas="b-dbus-update-activation-environment">dbus-update-activation-environment</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dbus-uuidgen">
        <term><command moreinfo="none">dbus-uuidgen</command></term>
        <listitem>
          <para>生成一个通用唯一 ID</para>
          <indexterm zone="ch-system-dbus dbus-uuidgen" significance="normal">
            <primary sortas="b-dbus-uuidgen">dbus-uuidgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libdbus-1">
        <term><filename class="libraryfile" moreinfo="none">libdbus-1</filename></term>
        <listitem>
          <para>包含用于和 D-Bus 消息总线交互的 API 函数</para>
          <indexterm zone="ch-system-dbus libdbus-1" significance="normal">
            <primary sortas="c-libdbus-1">libdbus-1</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

  <!-- these packages libsystemd on systemd builds -->
  <sect1 id="ch-system-procps" role="wrap">
  <?dbhtml filename="procps-ng.html"?>

  

  <title>Procps-ng-3.3.15</title>

  <indexterm zone="ch-system-procps" significance="normal">
    <primary sortas="a-Procps">Procps-ng</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Procps-ng 软件包包含监视进程的程序。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>0.1 SBU</seg>
        <seg>17 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Procps-ng</title>

    <para>准备编译 procps-ng：</para>



<screen revision="systemd" format="linespecific"><userinput remap="configure" moreinfo="none">./configure --prefix=/usr                            \
            --exec-prefix=                           \
            --libdir=/usr/lib                        \
            --docdir=/usr/share/doc/procps-ng-3.3.15 \
            --disable-static                         \
            --disable-kill                           \
            --with-systemd</userinput></screen>

    <variablelist>
      <title>配置选项的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-kill</parameter></term>
        <listitem>
          <para>该选项将不会编译已经由 Util-linux 软件包安装了的 <command moreinfo="none">kill</command> 命令。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>对于 LFS，测试套件需要自定义某些更改。移除当脚本不使用 tty 设备时失败的测试，同时修复另两个失败。用下面的命令运行测试套件：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">sed -i -r 's|(pmap_initname)\\\$|\1|' testsuite/pmap.test/pmap.exp
sed -i '/set tty/d' testsuite/pkill.test/pkill.exp
rm testsuite/pgrep.test/pgrep.exp
make check</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

<para>最后，如果
<filename class="directory" moreinfo="none">/usr</filename> 没有挂载的话，移动重要文件到一个可以找到的位置。</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">mv -v /usr/lib/libprocps.so.* /lib
ln -sfv ../../lib/$(readlink /usr/lib/libprocps.so) /usr/lib/libprocps.so</userinput></screen>

  </sect2>

  <sect2 id="contents-procps" role="content">
    <title>Procps-ng 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>free, pgrep, pidof, pkill, pmap, ps, pwdx, slabtop,
        sysctl, tload, top, uptime, vmstat, w, 和 watch</seg>
        <seg>libprocps.so</seg>
        <seg>/usr/include/proc 和 /usr/share/doc/procps-ng-3.3.15</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="free">
        <term><command moreinfo="none">free</command></term>
        <listitem>
          <para>报告系统中空闲和使用的内存容量（包括物理和交换内存）</para>
          <indexterm zone="ch-system-procps free" significance="normal">
            <primary sortas="b-free">free</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pgrep">
        <term><command moreinfo="none">pgrep</command></term>
        <listitem>
          <para>根据名称和其它属性查找进程</para>
          <indexterm zone="ch-system-procps pgrep" significance="normal">
            <primary sortas="b-pgrep">pgrep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pidof">
        <term><command moreinfo="none">pidof</command></term>
        <listitem>
          <para>报告指定程序的 PID</para>
          <indexterm zone="ch-system-procps pidof" significance="normal">
            <primary sortas="b-pidof">pidof</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pkill">
        <term><command moreinfo="none">pkill</command></term>
        <listitem>
          <para>根据名称和其它属性给进程发送信号</para>
          <indexterm zone="ch-system-procps pkill" significance="normal">
            <primary sortas="b-pkill">pkill</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pmap">
        <term><command moreinfo="none">pmap</command></term>
        <listitem>
          <para>报告指定进程的内存映射情况</para>
          <indexterm zone="ch-system-procps pmap" significance="normal">
            <primary sortas="b-pmap">pmap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ps">
        <term><command moreinfo="none">ps</command></term>
        <listitem>
          <para>列出正在运行的进程</para>
          <indexterm zone="ch-system-procps ps" significance="normal">
            <primary sortas="b-ps">ps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pwdx">
        <term><command moreinfo="none">pwdx</command></term>
        <listitem>
          <para>报告进程的当前工作目录</para>
          <indexterm zone="ch-system-procps pwdx" significance="normal">
            <primary sortas="b-pwdx">pwdx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="slabtop">
        <term><command moreinfo="none">slabtop</command></term>
        <listitem>
          <para>实时显示内核 slab 缓存信息</para>
          <indexterm zone="ch-system-procps slabtop" significance="normal">
            <primary sortas="b-slabtop">slabtop</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sysctl">
        <term><command moreinfo="none">sysctl</command></term>
        <listitem>
          <para>运行时修改内核参数</para>
          <indexterm zone="ch-system-procps sysctl" significance="normal">
            <primary sortas="b-sysctl">sysctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tload">
        <term><command moreinfo="none">tload</command></term>
        <listitem>
          <para>打印当前系统平均负荷曲线图</para>
          <indexterm zone="ch-system-procps tload" significance="normal">
            <primary sortas="b-tload">tload</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="top">
        <term><command moreinfo="none">top</command></term>
        <listitem>
          <para>显示最 CPU 密集型进程列表；它可以实时地连续查看处理器活动</para>
          <indexterm zone="ch-system-procps top" significance="normal">
            <primary sortas="b-top">top</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uptime">
        <term><command moreinfo="none">uptime</command></term>
        <listitem>
          <para>报告系统运行时长、登录用户数目以及系统平均负荷</para>
          <indexterm zone="ch-system-procps uptime" significance="normal">
            <primary sortas="b-uptime">uptime</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="vmstat">
        <term><command moreinfo="none">vmstat</command></term>
        <listitem>
          <para>报告虚拟内存统计信息、给出关于进程、内存、分页、块输入/输出(IO)、陷阱以及 CPU 活动的信息</para>
          <indexterm zone="ch-system-procps vmstat" significance="normal">
            <primary sortas="b-vmstat">vmstat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="w">
        <term><command moreinfo="none">w</command></term>
        <listitem>
          <para>显示当前登录的用户、以及登录地点和时间</para>
          <indexterm zone="ch-system-procps w" significance="normal">
            <primary sortas="b-w">w</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="watch">
        <term><command moreinfo="none">watch</command></term>
        <listitem>
          <para>重复运行指定命令，显示输出的第一个整屏；这允许用户查看随着时间的输出变化</para>
          <indexterm zone="ch-system-procps watch" significance="normal">
            <primary sortas="b-watch">watch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libprocps">
        <term><filename class="libraryfile" moreinfo="none">libprocps</filename></term>
        <listitem>
          <para>包含该软件包大部分程序使用的函数</para>
          <indexterm zone="ch-system-procps libprocps" significance="normal">
            <primary sortas="c-libprocps">libprocps</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-util-linux" role="wrap">
  <?dbhtml filename="util-linux.html"?>

  

  <title>Util-linux-2.33.1</title>

  <indexterm zone="ch-system-util-linux" significance="normal">
    <primary sortas="a-Util-linux">Util-linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Util-linux 软件包其它实用程序。包括处理文件系统、控制台、分区以及消息等工具。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.5 SBU</seg>
        <seg>214 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>FHS 兼容性注意事项</title>

    <para>FHS 推荐使用 <filename class="directory" moreinfo="none">/var/lib/hwclock</filename> 目录而不是通常的 <filename class="directory" moreinfo="none">/etc</filename> 目录作为  <filename moreinfo="none">adjtime</filename> 文件的位置。首先新建目录用于存储 <command moreinfo="none">hwclock</command> 程序：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -pv /var/lib/hwclock</userinput></screen>

  </sect2>

  <sect2 role="installation">
    <title>安装 Util-linux</title>
<!--
    <para>First, fix one of the regression tests:</para>

<screen><userinput remap="pre">sed -e 's/2^64/(2^64/' -e 's/E &lt;/E) &lt;=/' -e 's/ne /eq /' \
    -i tests/ts/ipcs/limits2</userinput></screen>
-->
    <para>删除早前创建的符号链接：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">rm -vf /usr/include/{blkid,libmount,uuid}</userinput></screen>

    <para>准备编译 Util-linux：</para>



<screen revision="systemd" format="linespecific"><userinput remap="configure" moreinfo="none">./configure ADJTIME_PATH=/var/lib/hwclock/adjtime   \
            --docdir=/usr/share/doc/util-linux-2.33.1 \
            --disable-chfn-chsh  \
            --disable-login      \
            --disable-nologin    \
            --disable-su         \
            --disable-setpriv    \
            --disable-runuser    \
            --disable-pylibmount \
            --disable-static     \
            --without-python</userinput></screen>

    <para>--disable 和 --without 选项用于防止出现关于 LFS 中缺少构建组件需要的软件包或和其它软件包安装的程序不一致的警告。</para>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>如果需要的话，以非 root 用户运行测试套件：</para>

    <warning><para>以 root 用户运行测试套件会对系统有害。为了运行测试套件，必须保证当前运行的系统中用于内核的 CONFIG_SCSI_DEBUG 选项可用，且是以一个模块的方式编译。把它构建到内核中将阻止启动。为了全面覆盖，还必须安装其它的 BLFS 软件包。如果需要的话，可以在重启进入完整的 LFS 系统后用以下命令运行该测试：</para>

    <screen role="nodump" format="linespecific"><userinput moreinfo="none">bash tests/run.sh --srcdir=$PWD --builddir=$PWD</userinput></screen>
    </warning>

    <screen format="linespecific"><userinput remap="test" moreinfo="none">chown -Rv nobody .
su nobody -s /bin/bash -c "PATH=$PATH make -k check"</userinput></screen>

    <para>安装软件包：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-utillinux" role="content">
    <title>Util-linux 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装的库</segtitle>

      <seglistitem>
        <seg>addpart, agetty, blkdiscard, blkid, blockdev, cal, cfdisk, chcpu,
        choom, chrt, col, colcrt, colrm, column, ctrlaltdel, delpart, dmesg,
        eject, fallocate, fdformat, fdisk, findfs, findmnt, flock, fsck,
        fsck.cramfs, fsck.minix, fsfreeze, fstrim, getopt, hexdump, hwclock,
        i386, ionice, ipcmk, ipcrm, ipcs, isosize, kill, last, lastb (link to
        last), ldattach, linux32, linux64, logger, look, losetup, lsblk, lscpu,
        lsipc, lslocks, lslogins, mcookie, mesg, mkfs, mkfs.bfs, mkfs.cramfs, mkfs.minix, mkswap,
        more, mount, mountpoint, namei, nsenter, partx, pg, pivot_root, prlimit, raw,
        readprofile, rename, renice, resizepart, rev, rtcwake, script,
        scriptreplay, setarch, setsid, setterm, sfdisk, sulogin, swaplabel,
        swapoff (link to swapon), swapon, switch_root, tailf, taskset, ul,
        umount, uname26, unshare, utmpdump, uuidd, uuidgen, wall, wdctl, whereis,
        wipefs, x86_64, 和 zramctl</seg>
        <seg>libblkid.so, libfdisk.so, libmount.so, 
        libsmartcols.so, 和 libuuid.so</seg>
        <seg>/usr/include/blkid, 
             /usr/include/libfdisk, 
             /usr/include/libmount, 
             /usr/include/libsmartcols, 
             /usr/include/uuid, 
             /usr/share/doc/util-linux-2.33.1, 
         和 /var/lib/hwclock</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="addpart">
        <term><command moreinfo="none">addpart</command></term>
        <listitem>
          <para>通知 Linux 内核有新的分区</para>
          <indexterm zone="ch-system-util-linux addpart" significance="normal">
            <primary sortas="b-addpart">addpart</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="agetty">
        <term><command moreinfo="none">agetty</command></term>
        <listitem>
          <para>打开一个 tty 端口，提示输入登录名，然后调用 <command moreinfo="none">login</command> 程序</para>
          <indexterm zone="ch-system-util-linux agetty" significance="normal">
            <primary sortas="b-agetty">agetty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="blkdiscard">
        <term><command moreinfo="none">blkdiscard</command></term>
        <listitem>
          <para>丢弃设备上的扇区</para>
          <indexterm zone="ch-system-util-linux blkdiscard" significance="normal">
            <primary sortas="b-blkdiscard">blkdiscard</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="blkid">
        <term><command moreinfo="none">blkid</command></term>
        <listitem>
          <para>用于定位和打印块设备属性的命令行工具</para>
          <indexterm zone="ch-system-util-linux blkid" significance="normal">
            <primary sortas="b-blkid">blkid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="blockdev">
        <term><command moreinfo="none">blockdev</command></term>
        <listitem>
          <para>允许用户在命令行中调用块设备的 ioctls</para>
          <indexterm zone="ch-system-util-linux blockdev" significance="normal">
            <primary sortas="b-blockdev">blockdev</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cal">
        <term><command moreinfo="none">cal</command></term>
        <listitem>
          <para>显示一个简单的日历</para>
          <indexterm zone="ch-system-util-linux cal" significance="normal">
            <primary sortas="b-cal">cal</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cfdisk">
        <term><command moreinfo="none">cfdisk</command></term>
        <listitem>
          <para>管理指定设备的分区表</para>
          <indexterm zone="ch-system-util-linux cfdisk" significance="normal">
            <primary sortas="b-cfdisk">cfdisk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chcpu">
        <term><command moreinfo="none">chcpu</command></term>
        <listitem>
          <para>更改 CPU 的状态</para>
          <indexterm zone="ch-system-util-linux chcpu" significance="normal">
            <primary sortas="b-chcpu">chcpu</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="choom">
        <term><command moreinfo="none">choom</command></term>
        <listitem>
          <para>显示和调整 OOM-killer 分数</para>
          <indexterm zone="ch-system-util-linux choom" significance="normal">
            <primary sortas="b-choom">choom</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chrt">
        <term><command moreinfo="none">chrt</command></term>
        <listitem>
          <para>管理进程的的实时属性</para>
          <indexterm zone="ch-system-util-linux chrt" significance="normal">
            <primary sortas="b-chrt">chrt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="col">
        <term><command moreinfo="none">col</command></term>
        <listitem>
          <para>过滤掉反向换行符</para>
          <indexterm zone="ch-system-util-linux col" significance="normal">
            <primary sortas="b-col">col</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="colcrt">
        <term><command moreinfo="none">colcrt</command></term>
        <listitem>
          <para>为终端过滤缺少某些功能，例如加粗和半行的 <command moreinfo="none">nroff</command> 输出</para>
          <indexterm zone="ch-system-util-linux colcrt" significance="normal">
            <primary sortas="b-colcrt">colcrt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="colrm">
        <term><command moreinfo="none">colrm</command></term>
        <listitem>
          <para>过滤掉指定的列</para>
          <indexterm zone="ch-system-util-linux colrm" significance="normal">
            <primary sortas="b-colrm">colrm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="column">
        <term><command moreinfo="none">column</command></term>
        <listitem>
          <para>格式化指定文件为多列</para>
          <indexterm zone="ch-system-util-linux column" significance="normal">
            <primary sortas="b-column">column</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ctrlaltdel">
        <term><command moreinfo="none">ctrlaltdel</command></term>
        <listitem>
          <para>设置 Ctrl+Alt+Del 组合键的功能为硬或软复位</para>
          <indexterm zone="ch-system-util-linux ctrlaltdel" significance="normal">
            <primary sortas="b-ctrlaltdel">ctrlaltdel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="delpart">
        <term><command moreinfo="none">delpart</command></term>
        <listitem>
          <para>请求 Linux 内核移除一个分区</para>
          <indexterm zone="ch-system-util-linux delpart" significance="normal">
            <primary sortas="b-delpart">delpart</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dmesg">
        <term><command moreinfo="none">dmesg</command></term>
        <listitem>
          <para>转储内核启动信息</para>
          <indexterm zone="ch-system-util-linux dmesg" significance="normal">
            <primary sortas="b-dmesg">dmesg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="eject">
        <term><command moreinfo="none">eject</command></term>
        <listitem>
          <para>弹出可移除媒体</para>
          <indexterm zone="ch-system-util-linux eject" significance="normal">
            <primary sortas="b-eject">eject</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fallocate">
        <term><command moreinfo="none">fallocate</command></term>
        <listitem>
          <para>为文件预分配空间</para>
          <indexterm zone="ch-system-util-linux fallocate" significance="normal">
            <primary sortas="b-fallocate">fallocate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fdformat">
        <term><command moreinfo="none">fdformat</command></term>
        <listitem>
          <para>低级别格式化软盘</para>
          <indexterm zone="ch-system-util-linux fdformat" significance="normal">
            <primary sortas="b-fdformat">fdformat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fdisk">
        <term><command moreinfo="none">fdisk</command></term>
        <listitem>
          <para>管理指定设备的分区表</para>
          <indexterm zone="ch-system-util-linux fdisk" significance="normal">
            <primary sortas="b-fdisk">fdisk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="findfs">
        <term><command moreinfo="none">findfs</command></term>
        <listitem>
          <para>通过标签或通用唯一标识符（UUID）查找文件系统</para>
          <indexterm zone="ch-system-util-linux findfs" significance="normal">
            <primary sortas="b-findfs">findfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="findmnt">
        <term><command moreinfo="none">findmnt</command></term>
        <listitem>
          <para>libmount 库中用于和 mountinfo、fstab 和 mtab 文件工作的命令行接口</para>
          <indexterm zone="ch-system-util-linux findmnt" significance="normal">
            <primary sortas="b-findmnt">findmnt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="flock">
        <term><command moreinfo="none">flock</command></term>
        <listitem>
          <para>请求一个文件锁，然后用所持有的锁执行命令</para>
          <indexterm zone="ch-system-util-linux flock" significance="normal">
            <primary sortas="b-flock">flock</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck">
        <term><command moreinfo="none">fsck</command></term>
        <listitem>
          <para>用于检查或者修复文件系统</para>
          <indexterm zone="ch-system-util-linux fsck" significance="normal">
            <primary sortas="b-fsck">fsck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.cramfs">
        <term><command moreinfo="none">fsck.cramfs</command></term>
        <listitem>
          <para>在指定设备的 Cramfs 文件系统上进行一致性检查</para>
          <indexterm zone="ch-system-util-linux fsck.cramfs" significance="normal">
            <primary sortas="b-fsck.cramfs">fsck.cramfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.minix">
        <term><command moreinfo="none">fsck.minix</command></term>
        <listitem>
          <para>在指定设备的 Minix 文件系统上进行一致性检查</para>
          <indexterm zone="ch-system-util-linux fsck.minix" significance="normal">
            <primary sortas="b-fsck.minix">fsck.minix</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsfreeze">
        <term><command moreinfo="none">fsfreeze</command></term>
        <listitem>
          <para>FIFREEZE/FITHAW ioctl 内核驱动操作的简单封装</para>
          <indexterm zone="ch-system-util-linux fsfreeze" significance="normal">
            <primary sortas="b-fsfreeze">fsfreeze</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fstrim">
        <term><command moreinfo="none">fstrim</command></term>
        <listitem>
          <para>丢弃已挂载的文件系统中未使用的块</para>
          <indexterm zone="ch-system-util-linux fstrim" significance="normal">
            <primary sortas="b-fstrim">fstrim</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="getopt">
        <term><command moreinfo="none">getopt</command></term>
        <listitem>
          <para>解析给定命令行中的选项</para>
          <indexterm zone="ch-system-util-linux getopt" significance="normal">
            <primary sortas="b-getopt">getopt</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hexdump">
        <term><command moreinfo="none">hexdump</command></term>
        <listitem>
          <para>以十六进制或其它指定格式转储给定文件</para>
          <indexterm zone="ch-system-util-linux hexdump" significance="normal">
            <primary sortas="b-hexdump">hexdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="hwclock">
        <term><command moreinfo="none">hwclock</command></term>
        <listitem>
          <para>读取或设置系统硬件时钟，也称为实时时钟（RTC）或基本输入输出系统（BIOS）时钟</para>
          <indexterm zone="ch-system-util-linux hwclock" significance="normal">
            <primary sortas="b-hwclock">hwclock</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="i386">
        <term><command moreinfo="none">i386</command></term>
        <listitem>
          <para>到 setarch 的符号链接</para>
          <indexterm zone="ch-system-util-linux i386" significance="normal">
            <primary sortas="b-i386">i386</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ionice">
        <term><command moreinfo="none">ionice</command></term>
        <listitem>
          <para>为某个程序获取或设置 io 调度类和优先级</para>
          <indexterm zone="ch-system-util-linux ionice" significance="normal">
            <primary sortas="b-ionice">ionice</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ipcmk">
        <term><command moreinfo="none">ipcmk</command></term>
        <listitem>
          <para>创建多种 IPC（进程间通信） 资源</para>
          <indexterm zone="ch-system-util-linux ipcmk" significance="normal">
            <primary sortas="b-ipcmk">ipcmk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ipcrm">
        <term><command moreinfo="none">ipcrm</command></term>
        <listitem>
          <para>移除指定的进程间通信（IPC）资源</para>
          <indexterm zone="ch-system-util-linux ipcrm" significance="normal">
            <primary sortas="b-ipcrm">ipcrm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ipcs">
        <term><command moreinfo="none">ipcs</command></term>
        <listitem>
          <para>提供 IPC 状态信息</para>
          <indexterm zone="ch-system-util-linux ipcs" significance="normal">
            <primary sortas="b-ipcs">ipcs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="isosize">
        <term><command moreinfo="none">isosize</command></term>
        <listitem>
          <para>报告 iso9660 文件系统的大小</para>
          <indexterm zone="ch-system-util-linux isosize" significance="normal">
            <primary sortas="b-isosize">isosize</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="kill">
        <term><command moreinfo="none">kill</command></term>
        <listitem>
          <para>向进程发送信号</para>
          <indexterm zone="ch-system-util-linux kill" significance="normal">
            <primary sortas="b-kill">kill</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="last">
        <term><command moreinfo="none">last</command></term>
        <listitem>
          <para>通过反向查找 <filename moreinfo="none">/var/log/wtmp</filename> 文件显示上次登录（注销）的用户；同时还显示系统启动、关闭以及运行时级别更改</para>
          <indexterm zone="ch-system-util-linux last" significance="normal">
            <primary sortas="b-last">last</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lastb">
        <term><command moreinfo="none">lastb</command></term>
        <listitem>
          <para>根据 <filename moreinfo="none">/var/log/btmp</filename> 中的日志显示失败的登录尝试</para>
          <indexterm zone="ch-system-util-linux lastb" significance="normal">
            <primary sortas="b-lastb">lastb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ldattach">
        <term><command moreinfo="none">ldattach</command></term>
        <listitem>
          <para>向行中添加行规则</para>
          <indexterm zone="ch-system-util-linux ldattach" significance="normal">
            <primary sortas="b-ldattach">ldattach</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="linux32">
        <term><command moreinfo="none">linux32</command></term>
        <listitem>
          <para>到 setarch 的符号链接</para>
          <indexterm zone="ch-system-util-linux linux32" significance="normal">
            <primary sortas="b-linux32">linux32</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="linux64">
        <term><command moreinfo="none">linux64</command></term>
        <listitem>
          <para>到 setarch 的符号链接</para>
          <indexterm zone="ch-system-util-linux linux64" significance="normal">
            <primary sortas="b-linux64">linux64</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="logger">
        <term><command moreinfo="none">logger</command></term>
        <listitem>
          <para>输入给定的信息到系统日志</para>
          <indexterm zone="ch-system-util-linux logger" significance="normal">
            <primary sortas="b-logger">logger</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="look">
        <term><command moreinfo="none">look</command></term>
        <listitem>
          <para>显示以指定字符串开头的行</para>
          <indexterm zone="ch-system-util-linux look" significance="normal">
            <primary sortas="b-look">look</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="losetup">
        <term><command moreinfo="none">losetup</command></term>
        <listitem>
          <para>设置和控制环路设备</para>
          <indexterm zone="ch-system-util-linux losetup" significance="normal">
            <primary sortas="b-losetup">losetup</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lsblk">
        <term><command moreinfo="none">lsblk</command></term>
        <listitem>
          <para>以类似树的形式列出所有或指定块设备的信息</para>
          <indexterm zone="ch-system-util-linux lsblk" significance="normal">
            <primary sortas="b-lsblk">lsblk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lscpu">
        <term><command moreinfo="none">lscpu</command></term>
        <listitem>
          <para>打印 CPU 架构信息</para>
          <indexterm zone="ch-system-util-linux lscpu" significance="normal">
            <primary sortas="b-lscpu">lscpu</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lsipc">
        <term><command moreinfo="none">lsipc</command></term>
        <listitem>
          <para>打印目前使用的 IPC 设备的信息</para>
          <indexterm zone="ch-system-util-linux lsipc" significance="normal">
            <primary sortas="b-lsipc">lsipc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lslocks">
        <term><command moreinfo="none">lslocks</command></term>
        <listitem>
          <para>打印 CPU 架构信息</para>
          <indexterm zone="ch-system-util-linux lslocks" significance="normal">
            <primary sortas="b-lslocks">lslocks</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lslogins">
        <term><command moreinfo="none">lslogins</command></term>
        <listitem>
          <para>列出关于用户、组和系统账号的信息</para>
          <indexterm zone="ch-system-util-linux lslogins" significance="normal">
            <primary sortas="b-lslogins">lslogins</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mcookie">
        <term><command moreinfo="none">mcookie</command></term>
        <listitem>
          <para>为 <command moreinfo="none">xauth</command> 生成 magic cookies（128位随机十六进制数）</para>
          <indexterm zone="ch-system-util-linux mcookie" significance="normal">
            <primary sortas="b-mcookie">mcookie</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mesg">
        <term><command moreinfo="none">mesg</command></term>
        <listitem>
          <para>控制其它用户是否可以向当前用户终端发送信息</para>
          <indexterm zone="ch-system-util-linux mesg" significance="normal">
            <primary sortas="b-mesg">mesg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs">
        <term><command moreinfo="none">mkfs</command></term>
        <listitem>
          <para>在设备上构建文件系统（通常是一个硬盘分区）</para>
          <indexterm zone="ch-system-util-linux mkfs" significance="normal">
            <primary sortas="b-mkfs">mkfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.bfs">
        <term><command moreinfo="none">mkfs.bfs</command></term>
        <listitem>
          <para>创建 Santa Cruz Operations（SCO） bfs 文件系统</para>
          <indexterm zone="ch-system-util-linux mkfs.bfs" significance="normal">
            <primary sortas="b-mkfs.bfs">mkfs.bfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.cramfs">
        <term><command moreinfo="none">mkfs.cramfs</command></term>
        <listitem>
          <para>创建 cramfs 文件系统</para>
          <indexterm zone="ch-system-util-linux mkfs.cramfs" significance="normal">
            <primary sortas="b-mkfs.cramfs">mkfs.cramfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.minix">
        <term><command moreinfo="none">mkfs.minix</command></term>
        <listitem>
          <para>创建 Minix 文件系统</para>
          <indexterm zone="ch-system-util-linux mkfs.minix" significance="normal">
            <primary sortas="b-mkfs.minix">mkfs.minix</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkswap">
        <term><command moreinfo="none">mkswap</command></term>
        <listitem>
          <para>初始化指定设备或文件作为交换空间使用</para>
          <indexterm zone="ch-system-util-linux mkswap" significance="normal">
            <primary sortas="b-mkswap">mkswap</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="more">
        <term><command moreinfo="none">more</command></term>
        <listitem>
          <para>用于每次显示文本一页的过滤器</para>
          <indexterm zone="ch-system-util-linux more" significance="normal">
            <primary sortas="b-more">more</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mount">
        <term><command moreinfo="none">mount</command></term>
        <listitem>
          <para>在文件系统树中挂载文件系统到给定设备的指定目录</para>
          <indexterm zone="ch-system-util-linux mount" significance="normal">
            <primary sortas="b-mount">mount</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mountpoint">
        <term><command moreinfo="none">mountpoint</command></term>
        <listitem>
          <para>检查目录是否是一个挂载点</para>
          <indexterm zone="ch-system-util-linux mountpoint" significance="normal">
            <primary sortas="b-mountpoint">mountpoint</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="namei">
        <term><command moreinfo="none">namei</command></term>
        <listitem>
          <para>显示给定路径名称的符号链接</para>
          <indexterm zone="ch-system-util-linux namei" significance="normal">
            <primary sortas="b-namei">namei</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nsenter">
        <term><command moreinfo="none">nsenter</command></term>
        <listitem>
          <para>在其他进程的命名空间中运行程序</para>
          <indexterm zone="ch-system-util-linux nsenter" significance="normal">
            <primary sortas="b-nsenter">nsenter</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="partx">
        <term><command moreinfo="none">partx</command></term>
        <listitem>
          <para>告诉内核磁盘上存在的分区和编号</para>
          <indexterm zone="ch-system-util-linux partx" significance="normal">
            <primary sortas="b-partx">partx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pg">
        <term><command moreinfo="none">pg</command></term>
        <listitem>
          <para>每次显示一屏文本文件</para>
          <indexterm zone="ch-system-util-linux pg" significance="normal">
            <primary sortas="b-pg">pg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="pivot_root">
        <term><command moreinfo="none">pivot_root</command></term>
        <listitem>
          <para>使指定文件系统作为当前进程的新的根文件系统</para>
          <indexterm zone="ch-system-util-linux pivot_root" significance="normal">
            <primary sortas="b-pivot_root">pivot_root</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="prlimit">
        <term><command moreinfo="none">prlimit</command></term>
        <listitem>
          <para>获取或设置进程资源限制</para>
          <indexterm zone="ch-system-util-linux prlimit" significance="normal">
            <primary sortas="b-prlimit">prlimit</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="raw">
        <term><command moreinfo="none">raw</command></term>
        <listitem>
          <para>绑定 Linux 原始字符设备到一个块设备</para>
          <indexterm zone="ch-system-util-linux raw" significance="normal">
            <primary sortas="b-raw">raw</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="readprofile">
        <term><command moreinfo="none">readprofile</command></term>
        <listitem>
          <para>读取内核分析信息</para>
          <indexterm zone="ch-system-util-linux readprofile" significance="normal">
            <primary sortas="b-readprofile">readprofile</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rename">
        <term><command moreinfo="none">rename</command></term>
        <listitem>
          <para>重命名指定文件，用另一个字符串替换指定字符串</para>
          <indexterm zone="ch-system-util-linux rename" significance="normal">
            <primary sortas="b-rename">rename</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="renice">
        <term><command moreinfo="none">renice</command></term>
        <listitem>
          <para>更改运行中进程的优先级</para>
          <indexterm zone="ch-system-util-linux renice" significance="normal">
            <primary sortas="b-renice">renice</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="resizepart">
        <term><command moreinfo="none">resizepart</command></term>
        <listitem>
          <para>请求 Linux 内核重新设置分区大小</para>
          <indexterm zone="ch-system-util-linux resizepart" significance="normal">
            <primary sortas="b-resizepart">resizepart</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rev">
        <term><command moreinfo="none">rev</command></term>
        <listitem>
          <para>反转指定文件的行</para>
          <indexterm zone="ch-system-util-linux rev" significance="normal">
            <primary sortas="b-rev">rev</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="rtcwake">
        <term><command moreinfo="none">rtcwake</command></term>
        <listitem>
          <para>用于进入系统睡眠状态知道指定的唤醒时间</para>
          <indexterm zone="ch-system-util-linux rtcwake" significance="normal">
            <primary sortas="b-rtcwake">rtcwake</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="script">
        <term><command moreinfo="none">script</command></term>
        <listitem>
          <para>生成终端会话的打字稿</para>
          <indexterm zone="ch-system-util-linux script" significance="normal">
            <primary sortas="b-script">script</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scriptreplay">
        <term><command moreinfo="none">scriptreplay</command></term>
        <listitem>
          <para>用定时信息播放打字稿</para>
          <indexterm zone="ch-system-util-linux scriptreplay" significance="normal">
            <primary sortas="b-scriptreplay">scriptreplay</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setarch">
        <term><command moreinfo="none">setarch</command></term>
        <listitem>
          <para>在新程序环境中更改报告架构并设置个性标签</para>
          <indexterm zone="ch-system-util-linux setarch" significance="normal">
            <primary sortas="b-setarch">setarch</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setsid">
        <term><command moreinfo="none">setsid</command></term>
        <listitem>
          <para>在新会话中运行指定程序</para>
          <indexterm zone="ch-system-util-linux setsid" significance="normal">
            <primary sortas="b-setsid">setsid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="setterm">
        <term><command moreinfo="none">setterm</command></term>
        <listitem>
          <para>设置终端属性</para>
          <indexterm zone="ch-system-util-linux setterm" significance="normal">
            <primary sortas="b-setterm">setterm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sfdisk">
        <term><command moreinfo="none">sfdisk</command></term>
        <listitem>
          <para>磁盘分区表管理器</para>
          <indexterm zone="ch-system-util-linux sfdisk" significance="normal">
            <primary sortas="b-sfdisk">sfdisk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="sulogin">
        <term><command moreinfo="none">sulogin</command></term>
        <listitem>
          <para>允许 <systemitem class="username" moreinfo="none">root</systemitem> 登录；通常当系统进入单用户模式时由 <command moreinfo="none">init</command> 调用</para>
          <indexterm zone="ch-system-util-linux sulogin" significance="normal">
            <primary sortas="b-sulogin">sulogin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="swaplabel">
        <term><command moreinfo="none">swaplabel</command></term>
        <listitem>
          <para>允许更改交换空间 UUID 和标签</para>
          <indexterm zone="ch-system-util-linux swaplabel" significance="normal">
            <primary sortas="b-swaplabel">swaplabel</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="swapoff">
        <term><command moreinfo="none">swapoff</command></term>
        <listitem>
          <para>停用设备和文件的分页和交换机制</para>
          <indexterm zone="ch-system-util-linux swapoff" significance="normal">
            <primary sortas="b-swapoff">swapoff</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="swapon">
        <term><command moreinfo="none">swapon</command></term>
        <listitem>
          <para>启用设备和文件的分页和交换机制并列出当前使用的设备和文件</para>
          <indexterm zone="ch-system-util-linux swapon" significance="normal">
            <primary sortas="b-swapon">swapon</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="switch_root">
        <term><command moreinfo="none">switch_root</command></term>
        <listitem>
          <para>切换到另一个文件系统并把当前路径作为挂载树的根</para>
          <indexterm zone="ch-system-util-linux switch_root" significance="normal">
            <primary sortas="b-switch_root">switch_root</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tailf">
        <term><command moreinfo="none">tailf</command></term>
        <listitem>
          <para>跟踪日志文件的的增长；显示日志文件的最后 10 行然后继续显示日志文件中 添加的任何新条目</para>
          <indexterm zone="ch-system-util-linux tailf" significance="normal">
            <primary sortas="b-tailf">tailf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="taskset">
        <term><command moreinfo="none">taskset</command></term>
        <listitem>
          <para>获取或设置一个进程的 CPU 亲和力</para>
          <indexterm zone="ch-system-util-linux taskset" significance="normal">
            <primary sortas="b-taskset">taskset</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ul">
        <term><command moreinfo="none">ul</command></term>
        <listitem>
          <para>将强调转换为转义序列以表示强调正在使用的终端的过滤器</para>
          <indexterm zone="ch-system-util-linux ul" significance="normal">
            <primary sortas="b-ul">ul</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="umount">
        <term><command moreinfo="none">umount</command></term>
        <listitem>
          <para>断开文件系统到系统文件树的连接</para>
          <indexterm zone="ch-system-util-linux umount" significance="normal">
            <primary sortas="b-umount">umount</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uname26">
        <term><command moreinfo="none">uname26</command></term>
        <listitem>
          <para>一个到 setarch 的软链接</para>
          <indexterm zone="ch-system-util-linux uname26" significance="normal">
            <primary sortas="b-uname26">uname26</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="unshare">
        <term><command moreinfo="none">unshare</command></term>
        <listitem>
          <para>用一些父进程非共享的名字空间运行程序</para>
          <indexterm zone="ch-system-util-linux unshare" significance="normal">
            <primary sortas="b-unshare">unshare</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="utmpdump">
        <term><command moreinfo="none">utmpdump</command></term>
        <listitem>
          <para>以更友好的格式显示指定登录文件的内容</para>
          <indexterm zone="ch-system-util-linux utmpdump" significance="normal">
            <primary sortas="b-utmpdump">utmpdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uuidd">
        <term><command moreinfo="none">uuidd</command></term>
        <listitem>
          <para>UUID 库用于生成基于时间的安全和保证唯一的 UUID 的守护进程</para>
          <indexterm zone="ch-system-util-linux uuidd" significance="normal">
            <primary sortas="b-uuidd">uuidd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="uuidgen">
        <term><command moreinfo="none">uuidgen</command></term>
        <listitem>
          <para>创建新的 UUID。在所有创建的 UUID 中，在本地系统或其它系统，在之前和以后，每个新的 UUID 都可以被认为是唯一的</para>
          <indexterm zone="ch-system-util-linux uuidgen" significance="normal">
            <primary sortas="b-uuidgen">uuidgen</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wall">
        <term><command moreinfo="none">wall</command></term>
        <listitem>
          <para>在终端上显示所有当前登录用户的文件内容，或者默认的标准输出</para>
          <indexterm zone="ch-system-util-linux wall" significance="normal">
            <primary sortas="b-wall">wall</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wdctl">
        <term><command moreinfo="none">wdctl</command></term>
        <listitem>
          <para>显示硬件看门狗状态</para>
          <indexterm zone="ch-system-util-linux wdctl" significance="normal">
            <primary sortas="b-wdctl">wdctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="whereis">
        <term><command moreinfo="none">whereis</command></term>
        <listitem>
          <para>报告指定命令的二进制文件、源代码或者 man 手册的位置</para>
          <indexterm zone="ch-system-util-linux whereis" significance="normal">
            <primary sortas="b-whereis">whereis</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="wipefs">
        <term><command moreinfo="none">wipefs</command></term>
        <listitem>
          <para>从设备中擦除文件系统签名</para>
          <indexterm zone="ch-system-util-linux wipefs" significance="normal">
            <primary sortas="b-wipefs">wipefs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="x86_64">
        <term><command moreinfo="none">x86_64</command></term>
        <listitem>
          <para>到 setarch 的符号链接</para>
          <indexterm zone="ch-system-util-linux x86_64" significance="normal">
            <primary sortas="b-x86_64">x86_64</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="zramctl">
        <term><command moreinfo="none">zramctl</command></term>
        <listitem>
          <para>用于设置和控制 zram（压缩后的 ram 磁盘）的程序</para>
          <indexterm zone="ch-system-util-linux zramctl" significance="normal">
            <primary sortas="b-zramctl">zramctl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libblkid">
        <term><filename class="libraryfile" moreinfo="none">libblkid</filename></term>
        <listitem>
          <para>包含用于设备识别和标记提取的例程</para>
          <indexterm zone="ch-system-util-linux libblkid" significance="normal">
            <primary sortas="c-libblkid">libblkid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libfdisk">
        <term><filename class="libraryfile" moreinfo="none">libfdisk</filename></term>
        <listitem>
          <para>包含操作分区表的例程</para>
          <indexterm zone="ch-system-util-linux libfdisk" significance="normal">
            <primary sortas="c-libfdisk">libfdisk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libmount">
        <term><filename class="libraryfile" moreinfo="none">libmount</filename></term>
        <listitem>
          <para>包含用于块设备挂载和卸载的例程</para>
          <indexterm zone="ch-system-util-linux libmount" significance="normal">
            <primary sortas="c-libmount">libmount</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsmartcols">
        <term><filename class="libraryfile" moreinfo="none">libsmartcols</filename></term>
        <listitem>
          <para>包含以表格形式进行屏幕输出的例程</para>
          <indexterm zone="ch-system-util-linux libsmartcols" significance="normal">
            <primary sortas="c-libsmartcols">libsmartcols</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libuuid">
        <term><filename class="libraryfile" moreinfo="none">libuuid</filename></term>
        <listitem>
          <para>包含用于生成在本地系统之上可访问对象的唯一标识符的例程</para>
          <indexterm zone="ch-system-util-linux libuuid" significance="normal">
            <primary sortas="c-libuuid">libuuid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-system-e2fsprogs" role="wrap">
  <?dbhtml filename="e2fsprogs.html"?>

  

  <title>E2fsprogs-1.44.5</title>

  <indexterm zone="ch-system-e2fsprogs" significance="normal">
    <primary sortas="a-E2fsprogs">E2fsprogs</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>E2fsprogs 软件包包含用于处理 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的工具。它也支持 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 和 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 日志文件系统。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>1.6 SBU</seg>
        <seg>96 MB</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 E2fsprogs</title>

    <para>E2fsprogs 的文档建议在源码目录下新建目录进行编译：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">mkdir -v build
cd build</userinput></screen>

    <para>准备编译 E2fsprogs：</para>

<!--<screen><userinput remap="configure">LIBS=-L/tools/lib                    \
CFLAGS=-I/tools/include              \
CFLAGS=-I/tools/include              \
PKG_CONFIG_PATH=/tools/lib/pkgconfig \
../configure - -prefix=/usr           \-->
<screen format="linespecific"><userinput remap="configure" moreinfo="none">../configure --prefix=/usr           \
             --bindir=/bin           \
             --with-root-prefix=""   \
             --enable-elf-shlibs     \
             --disable-libblkid      \
             --disable-libuuid       \
             --disable-uuidd         \
             --disable-fsck</userinput></screen>

    <variablelist>
      <title>环境变量和配置选项的含义：</title>
<!--
      <varlistentry>
        <term><parameter>PKG_CONFIG_PATH, LIBS, CFLAGS</parameter></term>
        <listitem>
          <para>These variables enable e2fsprogs to be built using the 
          <xref linkend="ch-tools-util-linux"/> package built earlier.</para>
        </listitem>
      </varlistentry>
-->
      <varlistentry>
        <term><parameter moreinfo="none">--with-root-prefix=""</parameter> 和 <parameter moreinfo="none">--bindir=/bin</parameter></term>
        <listitem>
          <para>有些程序（例如 <command moreinfo="none">e2fsck</command>）属于重要程序。比如，当 <filename class="directory" moreinfo="none">/usr</filename> 没有挂载的时候，仍然要求这些程序可用。它们放在类似 <filename class="directory" moreinfo="none">/lib</filename> 和 <filename class="directory" moreinfo="none">/sbin</filename> 的目录中。如果没有传递这个参数到 E2fsprogs 的配置参数中，程序就会被安装在 <filename class="directory" moreinfo="none">/usr</filename>  目录。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--enable-elf-shlibs</parameter></term>
        <listitem>
          <para>创建该软件包中一些程序会使用的共享库。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">--disable-*</parameter></term>
        <listitem>
          <para>这会阻止 E2fsprogs 编译和安装 <systemitem class="library" moreinfo="none">libuuid</systemitem> 和 <systemitem class="library" moreinfo="none">libblkid</systemitem> 库、<systemitem class="daemon" moreinfo="none">uuidd</systemitem> 守护进程、以及 <command moreinfo="none">fsck</command> 封装包。因为 Util-Linux 安装了更新的版本。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>编译软件包：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>
<!--
    <para>要设置和运行测试套件，我们首先需要把 /tools/lib 中的一些库链接到测试程序查找的位置。输入命令运行测试：</para>
-->

    <para>输入命令运行测试：</para>

<screen format="linespecific"><userinput remap="test" moreinfo="none">make check</userinput></screen>
<!--ln -sfv /tools/lib/lib{blk,uu}id.so.1 lib -->
<!--make LD_LIBRARY_PATH=/tools/lib check</userinput></screen>-->

    <para>E2fsprogs 的其中一个测试程序会试图分配 256M 的内存。如果你没有比这更多的 RAM，确保为测试启用了足够的交换空间。阅读 <xref linkend="space-creatingfilesystem"/> 以及 <xref linkend="space-mounting"/> 查看创建和启用交换空间的详细信息。</para>

    <para>安装二进制文件、文档以及共享库：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install</userinput></screen>

    <para>安装静态库和头文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make install-libs</userinput></screen>

    <para>使安装的静态库可写，以便后面可以移除调试符号：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">chmod -v u+w /usr/lib/{libcom_err,libe2p,libext2fs,libss}.a</userinput></screen>

    <para>该软件包安装了一个 gzip 压缩的 <filename class="extension" moreinfo="none">.info</filename> 文件但并没有更新系统级的 <filename moreinfo="none">dir</filename> 文件。解压该文件并用下面的命令更新系统的 <filename moreinfo="none">dir</filename> 文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">gunzip -v /usr/share/info/libext2fs.info.gz
install-info --dir-file=/usr/share/info/dir /usr/share/info/libext2fs.info</userinput></screen>

    <para>如果需要的话，用下面的命令创建和安装一些额外的文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">makeinfo -o      doc/com_err.info ../lib/et/com_err.texinfo
install -v -m644 doc/com_err.info /usr/share/info
install-info --dir-file=/usr/share/info/dir /usr/share/info/com_err.info</userinput></screen>
  </sect2>

  <sect2 id="contents-e2fsprogs" role="content">
    <title>E2fsprogs 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>badblocks, chattr, compile_et, debugfs, dumpe2fs,e2freefrag,
        e2fsck, e2image, e2label, e2undo, e4defrag, filefrag, fsck.ext2,
        fsck.ext3, fsck.ext4, fsck.ext4dev, logsave, lsattr, mk_cmds, mke2fs,
        mkfs.ext2, mkfs.ext3, mkfs.ext4, mkfs.ext4dev, mklost+found,
        resize2fs, 和 tune2fs</seg>
        <seg>libcom_err.so, libe2p.so, libext2fs.so, 和 libss.so</seg>
        <seg>/usr/include/e2p, /usr/include/et, /usr/include/ext2fs,
        /usr/include/ss, /usr/share/et, 和 /usr/share/ss</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="badblocks">
        <term><command moreinfo="none">badblocks</command></term>
        <listitem>
          <para>搜索设备（通常是一个磁盘分区）的坏块</para>
          <indexterm zone="ch-system-e2fsprogs badblocks" significance="normal">
            <primary sortas="b-badblocks">badblocks</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="chattr">
        <term><command moreinfo="none">chattr</command></term>
        <listitem>
          <para>更改 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统中文件的属性；它也可以更改 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 文件系统，这是 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的日志版本</para>
          <indexterm zone="ch-system-e2fsprogs chattr" significance="normal">
            <primary sortas="b-chattr">chattr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="compile_et">
        <term><command moreinfo="none">compile_et</command></term>
        <listitem>
          <para>错误表编译器；它将错误代码名称和信息对照表转换为适用于 <filename class="libraryfile" moreinfo="none">com_err</filename> 库的 C 源文件。</para>
          <indexterm zone="ch-system-e2fsprogs compile_et" significance="normal">
            <primary sortas="b-compile_et">compile_et</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="debugfs">
        <term><command moreinfo="none">debugfs</command></term>
        <listitem>
          <para>文件系统调试器；可用于检查和更改 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的状态</para>
          <indexterm zone="ch-system-e2fsprogs debugfs" significance="normal">
            <primary sortas="b-debugfs">debugfs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="dumpe2fs">
        <term><command moreinfo="none">dumpe2fs</command></term>
        <listitem>
          <para>对指定设备上的文件系统打印超级块和块组信息</para>
          <indexterm zone="ch-system-e2fsprogs dumpe2fs" significance="normal">
            <primary sortas="b-dumpe2fs">dumpe2fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e2freefrag">
        <term><command moreinfo="none">e2freefrag</command></term>
        <listitem>
          <para>报告空闲空间的碎片信息</para>
          <indexterm zone="ch-system-e2fsprogs e2freefrag" significance="normal">
            <primary sortas="b-e2freefrag">e2freefrag</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e2fsck">
        <term><command moreinfo="none">e2fsck</command></term>
        <listitem>
          <para>用于检查或者修复 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统和 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 文件系统</para>
          <indexterm zone="ch-system-e2fsprogs e2fsck" significance="normal">
            <primary sortas="b-e2fsck">e2fsck</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e2image">
        <term><command moreinfo="none">e2image</command></term>
        <listitem>
          <para>用于将重要 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统数据保存到文件中</para>
          <indexterm zone="ch-system-e2fsprogs e2image" significance="normal">
            <primary sortas="b-e2image">e2image</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e2label">
        <term><command moreinfo="none">e2label</command></term>
        <listitem>
          <para>显示或更改指定设备上的 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的标签</para>
          <indexterm zone="ch-system-e2fsprogs e2label" significance="normal">
            <primary sortas="b-e2label">e2label</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e2undo">
        <term><command moreinfo="none">e2undo</command></term>
        <listitem>
          <para>对设备上发现的 ext2/ext3/ext4 文件系统重做撤销日志 undo_log [ 这可用于取消一个 e2fsprogs 程序的失败操作。]</para>
          <indexterm zone="ch-system-e2fsprogs e2undo" significance="normal">
            <primary sortas="b-e2undo">e2undo</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="e4defrag">
        <term><command moreinfo="none">e4defrag</command></term>
        <listitem>
          <para>ext4 文件系统的在线碎片整理器</para>
          <indexterm zone="ch-system-e2fsprogs e4defrag" significance="normal">
            <primary sortas="b-e4defrag">e4defrag</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="filefrag">
        <term><command moreinfo="none">filefrag</command></term>
        <listitem>
          <para>报告一个文件可能的碎片化程度</para>
          <indexterm zone="ch-system-e2fsprogs filefrag" significance="normal">
            <primary sortas="b-filefrag">filefrag</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.ext2">
        <term><command moreinfo="none">fsck.ext2</command></term>
        <listitem>
          <para>默认检查 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统，是到 <command moreinfo="none">e2fsck</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs fsck.ext2" significance="normal">
            <primary sortas="b-fsck.ext2">fsck.ext2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.ext3">
        <term><command moreinfo="none">fsck.ext3</command></term>
        <listitem>
          <para>默认检查 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 文件系统，是到 <command moreinfo="none">e2fsck</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs fsck.ext3" significance="normal">
            <primary sortas="b-fsck.ext3">fsck.ext3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.ext4">
        <term><command moreinfo="none">fsck.ext4</command></term>
        <listitem>
          <para>默认检查 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 文件系统，是到 <command moreinfo="none">e2fsck</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs fsck.ext4" significance="normal">
            <primary sortas="b-fsck.ext4">fsck.ext4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="fsck.ext4dev">
        <term><command moreinfo="none">fsck.ext4dev</command></term>
        <listitem>
          <para>默认检查 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 开发版文件系统，是到 <command moreinfo="none">e2fsck</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs fsck.ext4dev" significance="normal">
            <primary sortas="b-fsck.ext4dev">fsck.ext4dev</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="logsave">
        <term><command moreinfo="none">logsave</command></term>
        <listitem>
          <para>在日志文件中保存命令的输出</para>
          <indexterm zone="ch-system-e2fsprogs logsave" significance="normal">
            <primary sortas="b-logsave">logsave</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lsattr">
        <term><command moreinfo="none">lsattr</command></term>
        <listitem>
          <para>列出二级扩展文件系统中一个文件的属性</para>
          <indexterm zone="ch-system-e2fsprogs lsattr" significance="normal">
            <primary sortas="b-lsattr">lsattr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mk_cmds">
        <term><command moreinfo="none">mk_cmds</command></term>
        <listitem>
          <para>将命令名称和帮助信息的映射表转换为适用于 <filename class="libraryfile" moreinfo="none">libss</filename> 子系统库的 C 源文件</para>
          <indexterm zone="ch-system-e2fsprogs mk_cmds" significance="normal">
            <primary sortas="b-mk_cmds">mk_cmds</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mke2fs">
        <term><command moreinfo="none">mke2fs</command></term>
        <listitem>
          <para>在指定设备上创建 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 或 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 文件系统</para>
          <indexterm zone="ch-system-e2fsprogs mke2fs" significance="normal">
            <primary sortas="b-mke2fs">mke2fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.ext2">
        <term><command moreinfo="none">mkfs.ext2</command></term>
        <listitem>
          <para>默认创建 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统，是到 <command moreinfo="none">mke2fs</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs mkfs.ext2" significance="normal">
            <primary sortas="b-mkfs.ext2">mkfs.ext2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.ext3">
        <term><command moreinfo="none">mkfs.ext3</command></term>
        <listitem>
          <para>默认创建 <systemitem class="filesystem" moreinfo="none">ext3</systemitem> 文件系统，是到 <command moreinfo="none">mke2fs</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs mkfs.ext3" significance="normal">
            <primary sortas="b-mkfs.ext3">mkfs.ext3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.ext4">
        <term><command moreinfo="none">mkfs.ext4</command></term>
        <listitem>
          <para>默认创建 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 文件系统，是到 <command moreinfo="none">mke2fs</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs mkfs.ext4" significance="normal">
            <primary sortas="b-mkfs.ext4">mkfs.ext4</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mkfs.ext4dev">
        <term><command moreinfo="none">mkfs.ext4dev</command></term>
        <listitem>
          <para>默认创建 <systemitem class="filesystem" moreinfo="none">ext4</systemitem> 开发版文件系统，是到 <command moreinfo="none">mke2fs</command> 的硬链接</para>
          <indexterm zone="ch-system-e2fsprogs mkfs.ext4dev" significance="normal">
            <primary sortas="b-mkfs.ext4dev">mkfs.ext4dev</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="mklost-found">
        <term><command moreinfo="none">mklost+found</command></term>
        <listitem>
          <para>用于在 <filename class="directory" moreinfo="none">lost+found</filename> 文件系统上创建 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 目录，它可以预先为目录分配磁盘块，以减轻 <command moreinfo="none">e2fsck</command> 任务</para>
          <indexterm zone="ch-system-e2fsprogs mklost-found" significance="normal">
            <primary sortas="b-mklost+found">mklost+found</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="resize2fs">
        <term><command moreinfo="none">resize2fs</command></term>
        <listitem>
          <para>用于伸缩 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的大小</para>
          <indexterm zone="ch-system-e2fsprogs resize2fs" significance="normal">
            <primary sortas="b-resize2fs">resize2fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="tune2fs">
        <term><command moreinfo="none">tune2fs</command></term>
        <listitem>
          <para>调整 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统上的可调文件系统参数</para>
          <indexterm zone="ch-system-e2fsprogs tune2fs" significance="normal">
            <primary sortas="b-tune2fs">tune2fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcom_err">
        <term><filename class="libraryfile" moreinfo="none">libcom_err</filename></term>
        <listitem>
          <para>常用错误显示例程</para>
          <indexterm zone="ch-system-e2fsprogs libcom_err" significance="normal">
            <primary sortas="c-libcom_err">libcom_err</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libe2p">
        <term><filename class="libraryfile" moreinfo="none">libe2p</filename></term>
        <listitem>
          <para>用于 <command moreinfo="none">dumpe2fs</command>，<command moreinfo="none">chattr</command>，和 <command moreinfo="none">lsattr</command></para>
          <indexterm zone="ch-system-e2fsprogs libe2p" significance="normal">
            <primary sortas="c-libe2p">libe2p</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libext2fs">
        <term><filename class="libraryfile" moreinfo="none">libext2fs</filename></term>
        <listitem>
          <para>包含使用户层程序可以操作 <systemitem class="filesystem" moreinfo="none">ext2</systemitem> 文件系统的例程</para>
          <indexterm zone="ch-system-e2fsprogs libext2fs" significance="normal">
            <primary sortas="c-libext2fs">libext2fs</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libss">
        <term><filename class="libraryfile" moreinfo="none">libss</filename></term>
        <listitem>
          <para>用于 <command moreinfo="none">debugfs</command></para>
          <indexterm zone="ch-system-e2fsprogs libss" significance="normal">
            <primary sortas="c-libss">libss</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>

  <!-- sysv only -->
  
  
  

  <sect1 id="ch-system-aboutdebug">
  <?dbhtml filename="aboutdebug.html"?>

  <title>关于调试符号</title>

  <para>默认情况下大多数程序和库的编译带有调试符号。（类似 <command moreinfo="none">gcc</command> 的 <parameter moreinfo="none">-g</parameter> 选项。）这意味着当你调试一个包含调试信息的已编译的程序或库时，调试程序不仅能提供内存地址，还能提供变量和实例的名字。</para>

  <para>然而，包含这些调试符号明显的增大了程序或库。下面这个例子说明了这些符号有多么占地方：</para>

  <itemizedlist>
    <listitem>
      <para>有调试符号的二进制 <command moreinfo="none">bash</command>：1200 KB</para>
    </listitem>
    <listitem>
      <para>无调试符号的二进制 <command moreinfo="none">bash</command>：480 KB</para>
    </listitem>
    <listitem>
      <para>有调试符号的 Glibc 和 GCC 文件（<filename class="directory" moreinfo="none">/lib</filename> 和 <filename class="directory" moreinfo="none">/usr/lib</filename>）：87 MB</para>
    </listitem>
    <listitem>
      <para>无调试符号的 Glibc 和 GCC 文件：16 MB</para>
    </listitem>
  </itemizedlist>

  <para>大小可能会因为所使用的编译器和 C 语言库的不同而改变，但是当比较有无调试符号的程序时，大小可能相差 2 到 5 倍。</para>

  <para>因为大多数用户从来不会在他们的系统软件上使用调试器，没了这些调试符号可以省下很多磁盘空间。下一页将会告诉你如何剥离程序和库中所有的调试符号。</para>

</sect1>
  <sect1 id="ch-system-strippingagain">
  <?dbhtml filename="strippingagain.html"?>

  <title>再次清理无用内容</title>

  <para>这个部分是可选的。如果预期的用户不是一个程序员或者不打算对系统软件进行任何调试，通过从二进制文件和库中删除调试符号能减少 90MB 的系统大小。除了不能完全调试软件，这不会导致任何不便。</para>

  <para>大部分人使用下面提到的命令并不会感到任何困难。然而，很容易出现错误并导致新的系统不可用，因此在运行 <command moreinfo="none">strip</command> 命令之前，对当前状态的 LFS 系统进行备份是个好主意。</para>

  <para>首先将选定库的调试符号文件分开放置。如果要在后续的 BLFS 中用 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4//general/valgrind.html">valgrind</ulink> 或 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4//general/gdb.html">gdb</ulink> 做回归测试，那么调试信息还有用武之地。
  </para>

<!-- also of interest are libgfortan, libgo, libgomp, and libobjc from gcc -->

<!--<screen><userinput>save_lib="ld-2.25.so libc-2.25.so libpthread-2.25.so libthread_db-1.0.so"-->
<screen format="linespecific"><userinput moreinfo="none">save_lib="ld-2.29.so libc-2.29.so libpthread-2.29.so libthread_db-1.0.so"

cd /lib

for LIB in $save_lib; do
    objcopy --only-keep-debug $LIB $LIB.dbg 
    strip --strip-unneeded $LIB
    objcopy --add-gnu-debuglink=$LIB.dbg $LIB 
done    

save_usrlib="libquadmath.so.0.0.0 libstdc++.so.6.0.25
             libitm.so.1.0.0 libatomic.so.1.2.0" <!-- libcilkrts.so.&libcilkrts-version;-->

cd /usr/lib

for LIB in $save_usrlib; do
    objcopy --only-keep-debug $LIB $LIB.dbg
    strip --strip-unneeded $LIB
    objcopy --add-gnu-debuglink=$LIB.dbg $LIB
done

unset LIB save_lib save_usrlib</userinput></screen>

  <para>在进行清理无用内容之前，格外注意确保要删除的二进制文件没有正在运行：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">exec /tools/bin/bash</userinput></screen>
  
  <!--
  If
  unsure whether the user entered chroot with the command given in
  <xref linkend="ch-system-chroot" role=","/> first use the version
  of bash we created in 
  chroot:</para>

<screen role="nodump"><userinput>logout</userinput></screen>

  <para>Then reenter it with:</para>

<screen role="nodump"><userinput>chroot $LFS /tools/bin/env -i          \
    HOME=/root TERM=$TERM              \
    PS1='(lfs chroot) \u:\w\$ '        \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /tools/bin/bash - -login</userinput></screen>-->

  <para>现在可以安心的清除二进制文件和库：</para>

<screen format="linespecific"><userinput moreinfo="none">/tools/bin/find /usr/lib -type f -name \*.a \
   -exec /tools/bin/strip --strip-debug {} ';'

/tools/bin/find /lib /usr/lib -type f \( -name \*.so* -a ! -name \*dbg \) \
   -exec /tools/bin/strip --strip-unneeded {} ';'

/tools/bin/find /{bin,sbin} /usr/{bin,sbin,libexec} -type f \
    -exec /tools/bin/strip --strip-all {} ';'</userinput></screen>

  <para>该命令会报告有很大数目的文件不能识别它们的格式。你可以安全地忽略这些警告。这些警告表示这些文件是脚本而不是二进制文件。</para>

</sect1>
  <sect1 id="ch-system-revisedchroot">
  <?dbhtml filename="revisedchroot.html"?>

  <title>清理</title>

  <para>最后，清除运行测试留下来的多余文件：</para>

<screen format="linespecific"><userinput moreinfo="none">rm -rf /tmp/*</userinput></screen>

  <para>现在，登出后用以下新的 chroot 命令重新进入 chroot 环境。在此以后当需要进入 chroot 环境时，都是用这个新的 chroot 命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">logout

chroot "$LFS" /usr/bin/env -i          \
    HOME=/root TERM="$TERM"            \
    PS1='(lfs chroot) \u:\w\$ '        \
    PATH=/bin:/usr/bin:/sbin:/usr/sbin \
    /bin/bash --login</userinput></screen>

  <para>这样做的原因是不再需要 <filename class="directory" moreinfo="none">/tools</filename> 中的程序。因此你可以删除 <filename class="directory" moreinfo="none">/tools</filename> 目录。</para>

  <note>
    <para>移除 <filename class="directory" moreinfo="none">/tools</filename> 也会删除用于运行工具链测试的 Tcl、Expect和 DejaGNU 的临时复制。如果你在后面还需要这些程序，需要重新编译并安装它们。BLFS 手册有关于这些的指令（请查看<ulink url="http://www.linuxfromscratch.org/blfs/"/>）。</para>
  </note>

  <para>如果通过手动或者重启卸载了虚拟内核文件系统，重新进入 chroot 的时候确保挂载了虚拟内核文件系统。在 <xref linkend="ch-system-bindmount"/> 和 <xref linkend="ch-system-kernfsmount"/> 中介绍了该过程。</para>

  <para>还有一些此章之前为了一些软件包的回归测试而留下的静态库。这些库来自 binutils、bzip2、e2fsprogs、flex、libtool 和 zlib。如果想删的话，现在就删：</para>

<screen format="linespecific"><userinput moreinfo="none">rm -f /usr/lib/lib{bfd,opcodes}.a
rm -f /usr/lib/libbz2.a
rm -f /usr/lib/lib{com_err,e2p,ext2fs,ss}.a
rm -f /usr/lib/libltdl.a
rm -f /usr/lib/libfl.a
rm -f /usr/lib/libz.a</userinput></screen>

  <para>还有几个安装在 /usr/lib 和 /usr/libexec 目录下的文件，文件的扩展名为 .la。这些是「libtool 归档」文件，在 Linux 系统中通常不需要它们。这些都是没有必要的东西。想要删除的话，运行：</para>

<screen format="linespecific"><userinput moreinfo="none">find /usr/lib /usr/libexec -name \*.la -delete</userinput></screen>

   <para>关于 libtool 归档文件的更多信息，参考 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4//introduction/la-files.html">BLFS 段落「关于 Libtool 归档（.la）文件」</ulink>。</para>

</sect1>

</chapter>
<chapter id="chapter-bootscripts" xreflabel="&#x7B2C; 7 &#x7AE0;" xml:base="chapter07/chapter07.xml">
  <?dbhtml dir="chapter07"?>
  <?dbhtml filename="chapter07.html"?>

  <title>基本系统配置</title>

  <!-- sysv -->
  
  

  <!-- systemd -->
  <sect1 id="ch-scripts-introduction" revision="systemd">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>这一章将会讲解配置文件和 systemd 服务。首先，给出了设置网络需要的通用配置文件。</para>

  <itemizedlist>
     <listitem>
       <para><xref linkend="ch-scripts-network"/></para>
     </listitem>
     <listitem>
       <para><xref linkend="ch-scripts-hostname"/></para>
     </listitem>
     <listitem>
       <para><xref linkend="ch-scripts-hosts"/></para>
     </listitem>
  </itemizedlist>

  <para>然后，讨论可能影响正确的设备配置的问题。</para>

  <itemizedlist>
     <listitem>
       <para><xref linkend="ch-scripts-udev"/></para>
     </listitem>
     <listitem>
       <para><xref linkend="ch-scripts-symlinks"/></para>
     </listitem>
  </itemizedlist>

  <para>第三步，配置系统时间和键盘布局。</para>

  <itemizedlist>
     <listitem>
       <para><xref linkend="ch-scripts-clock"/></para>
     </listitem>
     <listitem>
       <para><xref linkend="ch-scripts-console"/></para>
     </listitem>
  </itemizedlist>


  <para>第四步，简单介绍当用户登录系统时用到的脚本和配置文件。</para>

  <itemizedlist>
     <listitem>
       <para><xref linkend="ch-scripts-locale"/></para>
     </listitem>
     <listitem>
       <para><xref linkend="ch-scripts-inputrc"/></para>
     </listitem>
  </itemizedlist>

  <para>最后，配置 systemd。</para>

  <itemizedlist>
     <listitem>
       <para><xref linkend="ch-scripts-systemd-custom"/></para>
     </listitem>
  </itemizedlist>

</sect1>
  <sect1 id="ch-scripts-network" revision="systemd">
  <?dbhtml filename="network.html"?>

  <title>通用网络配置</title>

  <indexterm zone="ch-scripts-network" significance="normal">
    <primary sortas="d-network">network</primary>
  <secondary>configuring</secondary></indexterm>

  <para>本节仅在需要配置网卡时参考。</para>

  <sect2>
    <title>网络接口配置文件</title>

    <para>自版本 209 开始，systemd 提供了一个名为 <command moreinfo="none">systemd-networkd</command> 的命令用于处理基本的网络配置。另外，自版本 213 开始，DNS 名称解析可用 <command moreinfo="none">systemd-resolved</command> 代替静态的 <filename moreinfo="none">/etc/resolv.conf</filename> 文件来解决。默认情况，两种服务都将被启用。</para>

    <para><command moreinfo="none">systemd-networkd</command>（和 <command moreinfo="none">systemd-resolved</command> 的配置文件可能在 <filename class="directory" moreinfo="none">/usr/lib/systemd/network</filename> 或 <filename class="directory" moreinfo="none">/etc/systemd/network</filename>中。<filename class="directory" moreinfo="none">/etc/systemd/network</filename> 中文件比 <filename class="directory" moreinfo="none">/usr/lib/systemd/network</filename>中的有更高的优先级。配置文件类型有三种：<filename class="extension" moreinfo="none">.link</filename>，<filename class="extension" moreinfo="none">.netdev</filename> 和 <filename class="extension" moreinfo="none">.network</filename> 文件。可以通过查阅 man 手册的 <filename moreinfo="none">systemd-link(5)</filename>，<filename moreinfo="none">systemd-netdev(5)</filename> 和 <filename moreinfo="none">systemd-network(5)</filename> 获取更多关于这些配置文件的详细介绍。</para>

    <sect3 id="systemd-network-devices">
      <title>网络设备命名</title>

      <para>
        udev 通常会根据系统物理特性分配接口名称。例如，enp2s1。如果你不确定你的接口名称，你可以在系统启动后运行 <command moreinfo="none">ip link</command> 查看。
      </para>

      <para>
        对于大多数系统，每种连接只会有一种网络接口。例如，传统有线连接的接口名 eth0。而无线连接的名称通常是 wifi0 或 wlan0。 
      </para>

      <para>如果你更青睐传统或是自定义的网络接口名称，有三种实现的方法：</para>

      <itemizedlist>
        <listitem>
          <para>为默认的策略隐蔽 udev 的 .link 文件：
<screen role="nodump" format="linespecific"><userinput moreinfo="none">ln -s /dev/null /etc/systemd/network/99-default.link</userinput></screen>
          </para>
        </listitem>

        <listitem>
          <para>创建手动命名规则，比方说，将接口命名成「internet0」，「dmz0」或「lan0」这样。为此，请在 /etc/systemd/network/ 中创建 .link 文件，为其中的一个，一些，或者说你全部的接口赋予明确的名字或是更妥善的命名规则。示例：
          </para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/systemd/network/10-ether0.link &lt;&lt; "EOF"
<literal moreinfo="none">[Match]
# Change the MAC address as appropriate for your network device
MACAddress=12:34:45:78:90:AB

[Link]
Name=ether0</literal>
EOF</userinput></screen>

          <para>参考 man 手册 systemd.link(5) 获取更多信息。
          </para>
        </listitem>

        <listitem>
          <para>在 /boot/grub/grub.cfg 中，给内核命令行传递 net.ifnames=0 选项。
          </para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3 id="systemd-networkd-static">
      <title>静态 IP 的配置</title>

      <para>以下为设置静态 IP 而创建的基础配置文件（同时用到了 systemd-networkd 和 systemd-resolved）：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/systemd/network/10-eth-static.network &lt;&lt; "EOF"
<literal moreinfo="none">[Match]
Name=&lt;network-device-name&gt;

[Network]
Address=192.168.0.2/24
Gateway=192.168.0.1
DNS=192.168.0.1
Domains=<replaceable>&lt;Your Domain Name&gt;</replaceable></literal>
EOF</userinput></screen>

      <para>如果你拥有的 DNS 服务器超过了一个，可以为其添加多个 DNS 条目。然而，如果你打算用静态的 <filename moreinfo="none">/etc/resolv.conf</filename> 文件，就不要添加 DNS 或域名条目。</para>

    </sect3>

    <sect3 id="systemd-networkd-dhcp">
      <title>DHCP 的配置</title>

      <para>通过以下命令，你可以创建用于设置 IPv4 DHCP 的基础配置文件：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/systemd/network/10-eth-dhcp.network &lt;&lt; "EOF"
<literal moreinfo="none">[Match]
Name=&lt;network-device-name&gt;

[Network]
DHCP=ipv4

[DHCP]
UseDomains=true</literal>
EOF</userinput></screen>

    </sect3>

  </sect2>

  <sect2 id="resolv.conf">
    <title>创建 /etc/resolv.conf 文件</title>

    <indexterm zone="resolv.conf" significance="normal">
      <primary sortas="e-/etc/resolv.conf">/etc/resolv.conf</primary>
    </indexterm>

    <para>如果你的系统需要连接到互联网，它需要利用 DNS 服务将互联网域名解析为实际的 IP 地址，反之亦然。最好的方法是将从 ISP 或者是网络管理员那里取得的 DNS 服务器地址填入 <filename moreinfo="none">/etc/resolv.conf</filename>。</para>


    <sect3 id="resolv-conf-systemd-resolved">
      <title>systemd-resolved 的配置</title>

      <note><para>如果你使用其他方式来配置你的网络接口（例如：ppp，network-manager，等），或是任何类型的本地解析器（例如：bind，dnsmasq，等），或是任何生成 <filename moreinfo="none">/etc/resolv.conf</filename> 文件的软件（例如：resolvconf），也就别用 <command moreinfo="none">systemd-resolved</command> 服务了。</para></note>

      <para>用 <command moreinfo="none">systemd-resolved</command> 配置 DNS 时，会创建 <filename moreinfo="none">/run/systemd/resolve/resolv.conf</filename> 文件。并在 <filename moreinfo="none">/etc</filename> 中创建一个指向生成文件的软链接：</para>

<screen format="linespecific"><userinput moreinfo="none">ln -sfv /run/systemd/resolve/resolv.conf /etc/resolv.conf</userinput></screen>

    </sect3>

    <sect3 id="resolv-conf-static">
      <title>静态 resolv.conf 的配置</title>

      <para>如果需要静态的 <filename moreinfo="none">/etc/resolv.conf</filename> 文件，请使用以下命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/resolv.conf &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/resolv.conf

domain <replaceable>&lt;Your Domain Name&gt;</replaceable>
nameserver <replaceable>&lt;IP address of your primary nameserver&gt;</replaceable>
nameserver <replaceable>&lt;IP address of your secondary nameserver&gt;</replaceable>

# End /etc/resolv.conf</literal>
EOF</userinput></screen>

      <para><varname>domain</varname> 声明可以忽略或者以 <varname>search</varname> 声明替换。参考 man 手册的 resolv.conf 部分获得更多信息。</para>

      <para>其中，<replaceable>&lt;IP address of the nameserver&gt;</replaceable> 替换为最合适的 DNS 的 IP 地址。通常会有多个条目（需要备选服务器具有相关兼容性）。如果你只需要一台 DNS 服务器，请不要输入第二行 <emphasis>nameserver</emphasis> 的内容。该 IP 地址也可以是本地网络中的一台路由。</para>

      <note><para>Google 公开的 DNS 解析服务器地址 IPv4 的为：<parameter moreinfo="none">8.8.8.8</parameter> 和 <parameter moreinfo="none">8.8.4.4</parameter>。IPv6 的为 <parameter moreinfo="none">2001:4860:4860::8888</parameter> 和 <parameter moreinfo="none">2001:4860:4860::8844</parameter>。</para>
      <para>114 DNS：<parameter moreinfo="none">114.114.114.114</parameter> 和 <parameter moreinfo="none">114.114.115.115</parameter>。</para>     
      <para>阿里 DNS：<parameter moreinfo="none">223.5.5.5</parameter> 和 <parameter moreinfo="none">223.6.6.6</parameter>。</para>
      <para>百度 DNS：<parameter moreinfo="none">180.76.76.76</parameter></para>
      <para>OpenDNS：<parameter moreinfo="none">208.67.220.220</parameter></para>
      </note>

    </sect3>

  </sect2>

  <sect2 id="ch-scripts-hostname">
    <title>配置系统主机名称</title>

    <indexterm zone="ch-scripts-hostname" significance="normal">
      <primary sortas="d-hostname">hostname</primary>
      <secondary>configuring</secondary>
    </indexterm>

     <para>在系统启动过程中，<filename moreinfo="none">/etc/hostname</filename> 文件用于创建系统的主机名称。</para>

     <para>通过以下命令创建 <filename moreinfo="none">/etc/hostname</filename> 文件：</para>

<screen format="linespecific"><userinput moreinfo="none">echo "<replaceable>&lt;lfs&gt;</replaceable>" &gt; /etc/hostname</userinput></screen>

     <para><replaceable>&lt;lfs&gt;</replaceable> 替换为你想要设置的名称。请不要输入完整域名（Fully Qualified Domain Name，FQDN），那应该是放在 <filename moreinfo="none">/etc/hosts</filename> 文件中的信息。</para>

  </sect2>

  <sect2 id="ch-scripts-hosts">
     <title>自定义 /etc/hosts 文件</title>

     <indexterm zone="ch-scripts-hosts" significance="normal">
       <primary sortas="e-/etc/hosts">/etc/hosts</primary>
     </indexterm>
   
     <indexterm zone="ch-scripts-hosts" significance="normal">
       <primary sortas="d-localnet">localnet</primary>
       <secondary>/etc/hosts</secondary>
     </indexterm>
   
     <indexterm zone="ch-scripts-hosts" significance="normal">
       <primary sortas="d-network">network</primary>
       <secondary>/etc/hosts</secondary>
     </indexterm>

     <para>决定完整域名（Fully-Qualified Domain Name，FQDN），和可在文件 <filename moreinfo="none">/etc/hosts</filename> 中使用的别名。如果使用的是静态地址，你还需要决定 IP 地址。hosts 文件中条目的语法为：</para>

<screen format="linespecific"><literal moreinfo="none">IP_address myhost.example.org aliases</literal></screen>

<para>除非电脑在互联网中可见（例如，拥有注册的域名且分配有有效的 IP 地址——大多数用户并没有这些），请确保 IP 地址位于有效的私有网络 IP 地址段。有效区间是：</para>

<screen format="linespecific"><literal moreinfo="none">Private Network Address Range      Normal Prefix
10.0.0.1 - 10.255.255.254           8
172.x.0.1 - 172.x.255.254           16
192.168.y.1 - 192.168.y.254         24</literal></screen>

<para>x 可以时 16-31 之间的任何数字。y 可以时 0-255 之间的任何数字。</para>

     <para>有效的私有 IP 可以是 192.168.1.1。而与之相配的完整域名可以是 lfs.example.org。</para>

     <para>即使没有网卡，一个有效的完整仍然有其必要。它的存在可以确保程序正常运行。</para>

     <para>如果使用的是 DHCP，DHCPv6，IPv6 自动配置，或者说不配置网卡的话，通过以下命令可以创建 <filename moreinfo="none">/etc/hosts</filename> 文件：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/hosts &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/hosts

127.0.0.1 localhost
127.0.1.1 <replaceable>&lt;FQDN&gt;</replaceable> <replaceable>&lt;HOSTNAME&gt;</replaceable>
::1       localhost ip6-localhost ip6-loopback
ff02::1   ip6-allnodes
ff02::2   ip6-allrouters

# End /etc/hosts</literal>
EOF</userinput></screen>

     <para>::1 相对与 IPv4 的 127.0.0.1，是 IPv6 的回环地址。127.0.1.1 专门为 FQDN 保留的回环地址。</para>

     <para>如果使用的是静态地址，可代替的使用以下命令创建 <filename moreinfo="none">/etc/hosts</filename> 文件。</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/hosts &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/hosts

127.0.0.1 localhost
127.0.1.1 <replaceable>&lt;FQDN&gt;</replaceable> <replaceable>&lt;HOSTNAME&gt;</replaceable>
<replaceable>&lt;192.168.0.2&gt;</replaceable> <replaceable>&lt;FQDN&gt;</replaceable> <replaceable>&lt;HOSTNAME&gt;</replaceable> <replaceable>[alias1] [alias2] ...</replaceable>
::1       localhost ip6-localhost ip6-loopback
ff02::1   ip6-allnodes
ff02::2   ip6-allrouters

# End /etc/hosts</literal>
EOF</userinput></screen>

     <para>其中 <replaceable>&lt;192.168.0.2&gt;</replaceable>，<replaceable>&lt;FQDN&gt;</replaceable>，和 <replaceable>&lt;HOSTNAME&gt;</replaceable> 的值需要根据具体的用途或需求更改（如果网络/系统管理员会分配了 IP 地址，且机器将会接入现有的网络）。那可选的别名可以忽略。</para>
   
   </sect2>

</sect1>

  <!-- common -->
  <sect1 id="ch-scripts-udev">
  <?dbhtml filename="udev.html"?>

  <title>设备与模块管理概述</title>

  <indexterm zone="ch-scripts-udev" significance="normal">
    <primary sortas="a-udev">udev</primary>
    <secondary>用法</secondary>
  </indexterm>

  <para>在 <xref linkend="chapter-building-system"/> 我们构建 <phrase revision="systemd">systemd</phrase> 时，已经安装了 udev 包。在我们详细说明 udev 系统的用法之前，我们先大致了解早先的设备控制方式。</para>

  <para>传统的 Linux 不管硬件是否真实存在，都以创建静态设备的方法来处理硬件，因此需要在 <filename class="directory" moreinfo="none">/dev</filename> 目录下创建大量的设备节点文件（有时会有上千个）。这通常由 <command moreinfo="none">MAKEDEV</command> 脚本完成，它通过大量调用 <command moreinfo="none">mknod</command> 程序为这个世界上可能存在的每一个设备建立对应的主设备号和次设备号。</para>

  <para>而使用 udev 方法，只有当内核检测到硬件接入，才会建立对应的节点文件。因为需要在系统启动的时候重新建立设备节点文件，所以将它存储在 <systemitem class="filesystem" moreinfo="none">devtmpfs</systemitem> 文件系统中（完全存在于内存中的虚拟文件系统）。设备节点文件无需太多的空间，所以占用的内存也很小。</para>

  <sect2>
    <title>历史</title>

    <para>2000 年 2 月，一种名叫 <systemitem class="filesystem" moreinfo="none">devfs</systemitem> 的文件系统被合并到 2.3.46 版本的内核之中，而在 2.4 系列的稳定内核中基本可用。尽管它存在于内核代码中，但是这种动态创建设备的方法却从来都没有到核心开发者的大力支持。</para>

    <para>问题存在于它处理设备的检测、创建和命令的方式。其中最大的问题莫过于它对设备节点的命名方式。大部分开发者的观点是：设备的命名应该由系统的所有者决定，而不是开发者。而且 <systemitem class="filesystem" moreinfo="none">devfs</systemitem> 存在严重的竞争条件(race condition)问题，如不对内核做大量的修改就无法修正这一问题。最终，因为缺乏有效的维护，在 2006 年 6 月终被移出内核源代码。</para>

    <para>后来，有一种新的虚拟文件系统 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 在 2.5 系列测试版本内核中引入，并且加入了 2.6 系列的稳定版本内核之中。<systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 系统的任务就是将系统中的硬件配置状态导出至用户空间，而这给开发一种运行于用户空间的新型 <systemitem class="filesystem" moreinfo="none">devfs</systemitem> 系统带来了可能。</para>

  </sect2>

  <sect2>
    <title>udev 实现</title>

    <sect3>
      <title>Sysfs</title>

      <para>上文简单的提及了 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 文件系统。有些人可能会问，<systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 到底是如何知道当前系统有哪些设备、这些设备又该使用什么设备号呢。对于那些已经编译进内核的设备，会在内核检测到时被直接注册为 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 对象（由 devtmpfs 内建）。对于编译为内核模块的设备，将会在模块载入的时候注册。一旦 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 文件系统挂载到 /sys，已经在 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 注册的硬件数据就可以被用户空间的进程使用，随后也就可以被 udevd 处理了（包括对设备节点进行修改）。</para>

    </sect3>

    <sect3>
      <title>设备节点的创建</title>

      <para>设备文件是通过内核中的 <systemitem class="filesystem" moreinfo="none">devtmpfs</systemitem> 文件系统创建的。任何想要注册的设备都需要通过 <systemitem class="filesystem" moreinfo="none">devtmpfs</systemitem> （经由驱动程序核心）实现。每当一个 <systemitem class="filesystem" moreinfo="none">devtmpfs</systemitem> 实例挂载到 <filename class="directory" moreinfo="none">/dev</filename>，就会建立一个设备节点文件，它拥有固定的名称、权限以及所有者。</para>

      <para>很短的时间之后，内核将给 <command moreinfo="none"> udevd</command> 一个 uevent。基于 <filename class="directory" moreinfo="none">/etc/udev/rules.d</filename>、<filename class="directory" moreinfo="none">/lib/udev/rules.d</filename> 和 <filename class="directory" moreinfo="none">/run/udev/rules.d</filename> 目录内文件指定的规则，<command moreinfo="none">udevd</command> 将会建立到设备节点文件的额外符号链接，这有可能更改其权限、所有者和所在组，或者是更改 <command moreinfo="none">udevd</command> 内建接口（名称）。</para>

      <para>这三个文件夹中的规则文件都应以数字编号，并会被一起处理。当发现一个新的设备时，若 <command moreinfo="none">udevd</command> 无法找到对应的规则，将会使用 <systemitem class="filesystem" moreinfo="none">devtmpfs</systemitem> 中初始的权限以及所有者。</para>

    </sect3>

    <sect3 id="module-loading">
      <title>加载模块</title>

      <para>编译成模块的设备驱动可能会包含别名。别名可以通过 <command moreinfo="none">modinfo</command> 命令查看，一般是模块支持的特定总线的设备描述符。举个例子，驱动 <emphasis>snd-fm801</emphasis> 支持厂商 ID 为 0x1319 以及设备 ID 为 0x0801 的设备，它包含一个「pci:v00001319d00000801sv*sd*bc04sc01i*」的别名，总线驱动导出该驱动别名并通过 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 处理相关设备。例如，文件 <filename moreinfo="none">/sys/bus/pci/devices/0000:00:0d.0/modalias</filename> 应该会包含字符串「pci:v00001319d00000801sv00001319sd00001319bc04sc01i00」。udev 采用的默认规则会让 <command moreinfo="none">udevd</command> 根据 uevent 环境变量 <envar>MODALIAS</envar> 的内容（它应该和 sysfs 里的 <filename moreinfo="none">modalias</filename> 文件内容一样）调用 <command moreinfo="none">/sbin/modprobe</command>，这样就可以加载在通配符扩展后能和这个字符串一致的所有模块。</para>

      <para>这个例子意味着，除了 <emphasis>snd-fm801</emphasis> 之外，一个已经废弃的（不是我们所希望的）驱动 <emphasis>forte</emphasis> 如果存在的话也会被加载。下面有几种可以避免加载多余驱动的方式。</para>

      <para>内核本身也能够根据需要加载网络协议，文件系统以及 NLS 支持模块。</para>

    </sect3>

    <sect3>
      <title>处理热插拔/动态设备</title>

      <para>在你插入一个设备时，例如一个通用串行总线（USB）MP3 播放器，内核检测到设备已连接就会生成一个 uevent。这个 uevent 随后会被上面所说的 <command moreinfo="none">udevd</command> 处理。</para>

    </sect3>

  </sect2>

  <sect2>
    <title>加载模块和创建设备时可能碰到的问题</title>

    <para>在自动创建设备节点时可能会碰到一些问题。</para>

    <sect3>
      <title>内核模块没有自动加载</title>

      <para>udev 只会加载包含有特定总线别名而且已经被总线驱动导出到 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 下的模块。在其它情况下，你应该考虑用其它方式加载模块。采用 Linux-4.20.12，udev 可以加载编写合适的 INPUT、IDE、PCI、USB、SCSI、SERIO 和 FireWire 设备驱动。</para>

      <para>要确定你希望加载的驱动是否支持 udev，可以用模块名字作为参数运行 <command moreinfo="none">modinfo</command>。然后查看 <filename class="directory" moreinfo="none">/sys/bus</filename> 下的设备目录里是否有个 <filename moreinfo="none">modalias</filename> 文件。</para>

      <para>如果在 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 下能找到 <filename moreinfo="none">modalias</filename> 文件，那么就能驱动这个设备并可以直接操作它，但是如果该文件里没有包含设备别名，那意味着这个驱动有问题。我们可以先尝试不依靠 udev 直接加载驱动，并寄希望于这个问题能在日后得到解决。</para>

      <para>如果在 <filename class="directory" moreinfo="none">/sys/bus</filename> 下的相应目录里没有 <filename moreinfo="none">modalias</filename> 的话，意味着内核开发人员还没有为这个总线类型增加 modalias 支持。使用 Linux-4.20.12 内核，应该是 ISA 总线的问题。希望这个可以在后面的内核版本里得到解决。</para>

      <para>udev 根本不打算加载 <emphasis>snd-pcm-oss</emphasis> 这样的「封装」驱动程序和 <emphasis>loop</emphasis> 这样的非硬件设备驱动。</para>

    </sect3>

    <sect3>
      <title>内核驱动没有自动加载，udev 也没有尝试加载</title>

      <para>如果「封装」模块只是强化其它模块的功能（比如，<emphasis>snd-pcm-oss</emphasis> 模块通过允许 OSS 应用直接访问声卡的方式加强了 <emphasis>snd-pcm</emphasis> 模块的功能），需要配置 <command moreinfo="none">modprobe</command> 在 udev 加载硬件驱动模块后再加载相应的封装模块。为此，可以在对应的 <filename moreinfo="none">/etc/modprobe.d/<replaceable>&lt;filename&gt;</replaceable>.conf</filename> 文件中增加「softdep」行。例如：</para>

<screen role="nodump" format="linespecific"><literal moreinfo="none">softdep snd-pcm post: snd-pcm-oss</literal></screen>

      <para>请注意「softdep」也支持 <literal moreinfo="none">pre:</literal> 的依赖方式，或者混合 <literal moreinfo="none">pre:</literal> 和 <literal moreinfo="none">post:</literal>。查看 <filename moreinfo="none">modprobe.d(5)</filename> 手册了解更多关于「softdep」语法和功能的信息。</para>

      <para>如果问题模块并非一个封装，其本身也是有用的话，配置 <command moreinfo="none">modules</command> 开机脚本在引导系统的时候加载模块。这样需要把模块名字添加到 <filename moreinfo="none">/etc/sysconfig/modules</filename> 文件里的单独一行。这也可以用于封装模块，但是仅作为备选方案。</para>

    </sect3>

    <sect3>
      <title>udev 加载了一些无用模块</title>

      <para>要么不要编译该模块，要么把它加入到模块黑名单 <filename moreinfo="none">/etc/modprobe.d/blacklist.conf</filename> 里，如下的例子中屏蔽了 <emphasis>forte</emphasis> 模块：</para>

<screen role="nodump" format="linespecific"><literal moreinfo="none">blacklist forte</literal></screen>

      <para>被屏蔽的模块仍然可以用 <command moreinfo="none">modprobe</command> 强行加载。</para>

    </sect3>

    <sect3>
      <title>udev 创建了错误的设备节点，或错误的软链接</title>

      <para>这个情况通常是因为设备匹配错误。例如，一条写的不好的规则可能同时匹配到 SCSI 磁盘（希望加载的）和对应厂商的 SCSI 通用设备（错误的）。找出这条问题规则，并通过 <command moreinfo="none">udevadm info</command> 命令的帮助改得更具体一些。</para>

    </sect3>

    <sect3>
      <title>udev 规则不能可靠的工作</title>

      <para>这可能是上个问题的另一种表现形式。若非如此，而且你的规则使用了 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 特性，那可能是内核时序问题，希望在后面版本的内核中能得以解决。目前的话，你可以暂时建立一条规则等待使用的 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 特性，并附加到 <filename moreinfo="none">/etc/udev/rules.d/10-wait_for_sysfs.rules</filename> 文件里（如果没有这个文件就创建一个）。如果你是这样做的，并且起作用了，请务必通过 LFS 开发邮件列表通知我们。</para>

    </sect3>

    <sect3>
      <title>udev 没有创建设备</title>

      <para>后面的内容会假设驱动已经静态编译进内核或已经作为模块加载，而且你也已经确认 udev 没有创建相应的设备节点。</para>

      <para>如果内核驱动没有将一个设备的信息导出至 <systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 系统，则 udev 无法创建相应的设备结点。这种情况经常会在内核树之外的第三方驱动程序中出现。其解决方法是在文件 <filename moreinfo="none">/lib/udev/devices</filename> 中，使用正确的主设备号和次设备号创建一个静态设备结点（相应的设备号可以在内核文档中的 <filename moreinfo="none">devices.txt</filename> 文件或者由第三方驱动程序的文档中找到）。之后 <command moreinfo="none">udev</command> 会根据这些信息在 <filename class="directory" moreinfo="none">/dev</filename> 中创建一个静态设备结点。</para>

    </sect3>

    <sect3>
      <title>设备名称顺序在重启后随机改变</title>

      <para>这是因为 udev 被设计成并行处理 uevents 并加载模块，所以是不可预期的顺序。这个不会被「修复」。你不应该依赖稳定的内核模块名称。而是在检测到设备的稳定特征，比如序列号或 udev 安装的一些 *_id 应用的输出，来判断设备的稳定名称，之后创建自己的规则生成相应的软链接。可以参考 <xref linkend="ch-scripts-symlinks"/> 和 <xref linkend="ch-scripts-network"/>。</para>

    </sect3>

  </sect2>

  <sect2>
    <title>有用的读物</title>

    <para>其他的帮助文档可以参考下面的链接：</para>

    <itemizedlist>

      <listitem>
        <para><systemitem class="filesystem" moreinfo="none">devfs</systemitem> 的用户空间实现：
        <ulink url="http://www.kroah.com/linux/talks/ols_2003_udev_paper/Reprint-Kroah-Hartman-OLS2003.pdf"/></para>
      </listitem>

      <listitem>
        <para><systemitem class="filesystem" moreinfo="none">sysfs</systemitem> 文件系统：
        <ulink url="http://www.kernel.org/pub/linux/kernel/people/mochel/doc/papers/ols-2005/mochel.pdf"/></para>
      </listitem>

<!--  No longer available
      <listitem>
        <para>Pointers to further reading
        <ulink url="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html"/>
        </para>
      </listitem>
-->
    </itemizedlist>

  </sect2>

</sect1>
  <sect1 id="ch-scripts-symlinks">
  <?dbhtml filename="symlinks.html"?>

  <title>设备管理</title>

  

  

  <sect2>

    <title>处理相似性质的设备</title>

    <para>正如 <xref linkend="ch-scripts-udev"/> 中解释的，具有相同功能的设备出现在 <filename class="directory" moreinfo="none">/dev</filename> 目录下的顺序是随机的。假如你有一个 USB 摄像头和一个电视调谐器，<filename moreinfo="none">/dev/video0</filename> 有可能是 USB 摄像头， <filename moreinfo="none">/dev/video1</filename> 是电视调谐器，有时候又可能是反过来的。对于除声卡和网卡外的设备， 都可以通过创建自定义持久性符号链接的 udev 规则来固定。网卡如何设置请看 <xref linkend="ch-scripts-network"/>，网卡的相关设置请看 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/devices.html">BLFS</ulink>。</para>

    <para>对于你所有的硬件，都有可能遇到此问题（尽管此问题可能在你当前的 Linux 发行版上不存在），在 <filename class="directory" moreinfo="none">/sys/class</filename> 或是 <filename class="directory" moreinfo="none">/sys/block</filename> 目录下找到对应目录，比如，显卡可能的路径为 <filename class="directory" moreinfo="none">/sys/class/video4linux/video<replaceable>X</replaceable></filename>。找到该设备的唯一设备标识（通常，厂商和产品 ID 以及/或 序列号会有用）：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">udevadm info -a -p /sys/class/video4linux/video0</userinput></screen>

    <para>然后通过写入规则建立符号链接：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/udev/rules.d/83-duplicate_devs.rules &lt;&lt; "EOF"
<literal moreinfo="none">
# Persistent symlinks for webcam and tuner
KERNEL=="video*", ATTRS{idProduct}=="1910", ATTRS{idVendor}=="0d81", \
    SYMLINK+="webcam"
KERNEL=="video*", ATTRS{device}=="0x036f", ATTRS{vendor}=="0x109e", \
    SYMLINK+="tvtuner"
</literal>
EOF</userinput></screen>

    <para>最终，<filename moreinfo="none">/dev/video0</filename> 和 <filename moreinfo="none">/dev/video1</filename> 依旧会随机分配给 USB 摄像头和电视调谐器，但是 <filename moreinfo="none">/dev/tvtuner</filename> 和 <filename moreinfo="none">/dev/webcam</filename> 将会固定的分配给正确的设备。</para>

 </sect2>

</sect1>

  <!-- sysv -->
  
  
  

  <!-- systemd -->
  <sect1 id="ch-scripts-clock" revision="systemd">
  <?dbhtml filename="clock.html"?>

  <title>配置系统时间</title>

  <indexterm zone="ch-scripts-clock" significance="normal">
    <primary sortas="d-clock">时间</primary>
  <secondary>配置</secondary></indexterm>

  <para>本节将会讨论如何配置 <command moreinfo="none">systemd-timedated</command> 系统服务，包括配置系统时间和时区。</para>

  <para>如果你不确定是否将硬件时钟设置为 UTC，可以通过 <userinput moreinfo="none">hwclock --localtime --show</userinput> 来查看。
  这将根据硬件时钟显示当前的时间。如果显示的和手表的时间相同，应该是设置为本地时间了；
  如果 <command moreinfo="none">hwclock</command> 输出的时间不一致，应该是设置为 UTC 了。通过增减数小时，可以确定你所在时区。</para>

  <para><command moreinfo="none">systemd-timedated</command> 读取 <filename moreinfo="none">/etc/adjtime</filename>，
  然后确定是本地时间还是 UTC 时间。</para>

  <para>如果想要将硬件时钟设置为本地时间，使用以下命令建立 <filename moreinfo="none">/etc/adjtime</filename> ：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/adjtime &lt;&lt; "EOF"
<literal moreinfo="none">0.0 0 0.0
0
LOCAL</literal>
EOF</userinput></screen>

  <para>如果第一次启动时 <filename moreinfo="none">/etc/adjtime</filename> 文件不存在，
  <command moreinfo="none">systemd-timedated</command> 会认为硬件时钟设置成 UTC 并且以此调整该文件。</para>

  <para>你也可以使用 <command moreinfo="none">timedatectl</command> 程序来告诉 <command moreinfo="none">systemd-timedated</command> 你的硬件时钟是 UTC 还是本地时间：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">timedatectl set-local-rtc 1</userinput></screen>

  <para><command moreinfo="none">timedatectl</command> 也可以用来更改系统时间和时区。</para>

  <para>要更改当前系统时间，使用下面的命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">timedatectl set-time YYYY-MM-DD HH:MM:SS</userinput></screen>

  <para>硬件时钟也会相应更新。</para>

  <para>要更改当前时区，使用下面命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">timedatectl set-timezone TIMEZONE</userinput></screen>

  <para>你可以通过运行下面命令查看可用时区列表：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">timedatectl list-timezones</userinput></screen>

  <note><para><command moreinfo="none">timedatectl</command> 仅可用于 systemd 环境。</para></note>

  <sect2>
    <title>网络时间同步</title>

    <para>从版本号 213 的 systemd 开始，包括了一个名为 <command moreinfo="none">systemd-timesyncd</command> 的守护进程，将能够和远程的 NTP 服务器同步时间。</para>

    <para>此守护进程并不是为了取代已有的 NTP 服务，而是作为 SNTP 协议的实现客户端，它可用于更高级的任务和资源有限的系统。</para>

    <para>从版本号 216 的 systemd 开始，<command moreinfo="none">systemd-timesyncd</command> 守护进程默认启用，如果需要禁用，执行以下命令：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">systemctl disable systemd-timesyncd</userinput></screen>

    <para><command moreinfo="none">systemd-timesyncd</command> 也可以通过配置 <filename moreinfo="none">/etc/systemd/timesyncd.conf</filename> 文件同步更改 NTP 服务。</para>

    <para>需要注意的是，当使用本地时间作为系统时间时，<command moreinfo="none">systemd-timesyncd</command> 无法更新硬件时钟。</para>

  </sect2>

</sect1>
  <sect1 id="ch-scripts-console" revision="systemd">
  <?dbhtml filename="console.html"?>

  <title>配置 Linux 控制台</title>

  <indexterm zone="ch-scripts-console" significance="normal">
    <primary sortas="d-console">控制台</primary>
    <secondary>配置</secondary>
  </indexterm>
  <para>（译者注：对于中文用户，因为大部分用户的键盘布局都是标准 us 键盘，所以大可忽略此文件的配置）</para>
  <para>本节将会讨论如何配置 <command moreinfo="none">systemd-vconsole-setup</command> 系统服务，包括配置控制台字体和控制台的键盘映射。</para>

  <para><command moreinfo="none">systemd-vconsole-setup</command> 服务读取 <filename moreinfo="none">/etc/vconsole.conf</filename> 中的配置信息，
  确定使用的键盘类型和屏幕的字体。<ulink url="http://www.tldp.org/HOWTO/HOWTO-INDEX/other-lang.html"/> 页面有很多其它语言的「HOWTO」内容可以给你很多帮助。
  <command moreinfo="none">localectl list-keymaps</command> 可以列举出所有可用的终端键盘布局。<filename class="directory" moreinfo="none">/usr/share/consolefonts</filename> 目录提供了所有可用的字体。</para>

  <para><filename moreinfo="none">/etc/vconsole.conf</filename> 的每一行都应该形如：VARIABLE="value"。以下列举了可用的 VARIABLE：</para>

  <variablelist>

    <varlistentry>
      <term>KEYMAP</term>
      <listitem>
        <para>此变量指定了键盘的按键映射表。如未设置，默认为 <literal moreinfo="none">us</literal>。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>KEYMAP_TOGGLE</term>
      <listitem>
        <para>此变量指定配置第二个切换键盘映射，默认不设置。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>FONT</term>
      <listitem>
        <para>此变量指定虚拟控制台的字体。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>FONT_MAP</term>
      <listitem>
        <para>此变量指定要使用的控制台映射。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>FONT_UNIMAP</term>
      <listitem>
        <para>此变量指定 Unicode 字体映射。</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>以下为德语键盘和和控制台的实例：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/vconsole.conf &lt;&lt; "EOF"
<literal moreinfo="none">KEYMAP=de-latin1
FONT=Lat2-Terminus16</literal>
EOF</userinput></screen>

  <para>你可以使用 <command moreinfo="none">localectl</command> 实用程序更改 KEYMAP 值：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">localectl set-keymap MAP</userinput></screen>

  <note><para><command moreinfo="none">localectl</command> 仅可用于 systemd 环境。</para></note>

  <para><command moreinfo="none">localectl</command> 实用程序跟随相应的参数也可以更改 X11 的键盘布局、模型、变形和选项：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">localectl set-x11-keymap LAYOUT [MODEL] [VARIANT] [OPTIONS]</userinput></screen>

  <para>下面的 <command moreinfo="none">localectl</command> 命令列出了 <command moreinfo="none">localectl set-x11-keymap</command> 命令参数的可用值：</para>

  <variablelist>

    <varlistentry>
      <term>list-x11-keymap-models</term>
      <listitem>
        <para>显示所有已知的 X11 键盘映射模型。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>list-x11-keymap-layouts</term>
      <listitem>
        <para>显示所有已知的 X11 键盘映射布局。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>list-x11-keymap-variants</term>
      <listitem>
        <para>显示所有已知的 X11 键盘映射变形。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term>list-x11-keymap-options</term>
      <listitem>
        <para>显示所有已知的 X11 键盘映射选项。</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <note><para>想要使用以上的参数，你需要从 BLFS 中安装 Xkeyboard 软件包。</para></note>

</sect1>
  <sect1 id="ch-scripts-locale" revision="systemd">
  <?dbhtml filename="locale.html"?>

  <title>配置系统语言环境</title>

  <indexterm zone="ch-scripts-locale" significance="normal">
    <primary sortas="e-etc-locale-conf">/etc/locale.conf</primary>
  </indexterm>

  <para>本地语言的支持依赖于 <filename moreinfo="none">/etc/locale.conf</filename>，它包含不少和此相关的环境变量。更改此文件后，可能会出现以下的变化：</para>

  <itemizedlist>
    <listitem>
      <para>程序的输出将以本地语言展示</para>
    </listitem>
    <listitem>
      <para>修正字符在字母、数字等类型的分类。对于非英语区域设置来说，只有这样，<command moreinfo="none">bash</command> 才能正常显示非 ASCII 字符</para>
    </listitem>
    <listitem>
      <para>国家顺序可以按照字母顺序正常排序（译者注：这里所谓的正常排序，应该是首先将国家名称转换成本地语言的国家名称，比如中国的开头字母是 Z，那么显示就很靠后了。但是假如显示为英文，就是 C 开头，那么将会靠前显示。）</para>
    </listitem>
    <listitem>
      <para>默认纸张尺寸</para>
    </listitem>
    <listitem>
      <para>货币、时间和日期值的格式</para>
    </listitem>
  </itemizedlist>

  <para>/etc/locale.conf 中 <replaceable>&lt;ll&gt;</replaceable> 使用语言代码代替（比如中文是「zh」，英文是「en」），
    <replaceable>&lt;CC&gt;</replaceable> 使用国家/地区代码代替（比如中国是「CN」，中国香港是「HK」，中国台湾是「TW」，美国是「US」），
    <replaceable>&lt;charmap&gt;</replaceable> 使用选定字符集指定的标准字符映射表替换。诸如「@euro」这样的可选修饰符也可使用。</para>

  <para>运行以下命令可以获得当前 Glibc 支持的本地字符集。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">locale -a</userinput></screen>

  <para>字符映射表可能存在很多的别名，比如「ISO-8859-1」可以写作「iso8859-1」或「iso88591」。
  但是有一些程序不支持这些乱七八糟的写法（比如「UTF-8」只能写作「UTF-8」，「utf8」它就不认识了）。
  所以，为了安全起见，在设置的时候还是尽量的使用特定区域设置的规范名称。可以通过以下命令查询在特定区域下的字符映射表标准名称，<replaceable>&lt;locale
  name&gt;</replaceable> 为运行 <command moreinfo="none">locale -a</command> 输出的首选区域设置（这里以「zh_CN.utf8」为例）。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">LC_ALL=<replaceable>&lt;locale name&gt;</replaceable> locale charmap</userinput></screen>

  <para>对于「zh_CN.utf8」以上命令将会如下输出：</para>

<screen format="linespecific"><computeroutput moreinfo="none">UTF-8</computeroutput></screen>

  <para>根据以上输出，我们再次修改 <filename moreinfo="none">/etc/locale.conf</filename>，
  将字符映射表设置为标准形式（「zh_CN.utf8」变为「zh_CN.UTF-8」）。
  同理，也可一并查询以下设置的标准命令，然后将其添加到 bash 的启动文件中
  （译者注：对于 bash 来说，启动文件为 <filename moreinfo="none">.bashrc</filename>）。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">LC_ALL=&lt;locale name&gt; locale language
LC_ALL=&lt;locale name&gt; locale charmap
LC_ALL=&lt;locale name&gt; locale int_curr_symbol
LC_ALL=&lt;locale name&gt; locale int_prefix</userinput></screen>

  <para>以上的命令将会打印当前区域设置的语言、字符编码、本地货币单位以及电话国际编码。如果出现类似下文的错误输出，
    可能是你没有严格按照第六章指导的方法操作或者是你当前所用的 Glibc 不支持。</para>

<screen format="linespecific"><computeroutput moreinfo="none">locale: Cannot set LC_* to default locale: No such file or directory</computeroutput></screen>

  <para>如果这种情况真的发生，你应该使用 <command moreinfo="none">localedef</command> 命令安装对应的系统区域，
  或者是考虑更改为其它的区域。假如没有出现错误提示，我们就可以继续进行下一步操作了！</para>

  <!-- FIXME: the xlib example will became obsolete real soon -->
  <para>有一些 LFS 之外的包可能出现对你设置的区域支持很差劲的情况。比如 X 的库（X Windows System 的一部份），
    就可能在内部文件中输出以下消息：</para>

<screen format="linespecific"><computeroutput moreinfo="none">Warning: locale not supported by Xlib, locale set to C</computeroutput></screen>

  <para>在若干情况下，Xlib 希望以带规范破折号的大写形式列出字符映射表。比如「ISO-8859-1」而不应该写作「iso88591」。不过，
    也可以通过去除区域规范中的字符映射部分找到合适的规范。这可以通过运行 <command moreinfo="none">locale charmap</command> 命令来检查。
    例如，需要更改「de_DE.ISO-8859-15@euro」为「de_DE@euro」以便 Xlib 能识别区域。</para>

  <para>即便如此，也可能遇到某些程序因为区域设置和它们预置的不同而导致功能异常（可能不会显示任何的错误消息）。
    如果出现这样的情况，可以通过查看其它的发行版是如何进行设置区域，从而得到启发。</para>

  <para>一旦确定了到底该使用哪个区域设置，就可以创建 <filename moreinfo="none">/etc/locale.conf</filename> 文件了：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/locale.conf &lt;&lt; "EOF"
<literal moreinfo="none">LANG=<replaceable>&lt;ll&gt;_&lt;CC&gt;.&lt;charmap&gt;&lt;@modifiers&gt;</replaceable></literal>
EOF</userinput></screen>

  <para>也可以通过 systemd 提供的实用程序 <command moreinfo="none">localectl</command> 修改 <filename moreinfo="none">/etc/locale.conf</filename>：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">localectl set-locale LANG="<replaceable>&lt;ll&gt;_&lt;CC&gt;.&lt;charmap&gt;&lt;@modifiers&gt;</replaceable>"</userinput></screen>

  <para>此处，也可以指定其它和语言相关的环境变量，例如 <envar>LANG</envar>，<envar>LC_CTYPE</envar>，<envar>LC_NUMERIC</envar>
  或任何其它 <command moreinfo="none">locale</command> 输出的环境变量，只需要用一个空格分开它们就可以了。以下示例中，<envar>LANG</envar> 设置为 en_US.UTF-8，但 <envar>LC_CTYPE</envar> 设置为 en_US：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">localectl set-locale LANG="en_US.UTF-8" LC_CTYPE="en_US"</userinput></screen>

  <note><para><command moreinfo="none">localectl</command> 仅可用于 systemd 环境。</para></note>

  <para>「C」（默认）和「en_US」（推荐美国英语用户使用）这两种区域设置有所不同。「C」使用 US-ASCII 7 位字符集，并把设置了最高位的字节作为无效字符。这就是为什么类似 <command moreinfo="none">ls</command> 的命令本地化时会用疑问号代替。同样，如果你想要使用 Mutt 或 Pine 发送包含有类似字符的邮件，将会得到如下消息：非 RFC 兼容字符（发送邮件中的字符集为「unknown 8-bit」）。所以，如果你一定以及肯定一定不会用到 8 位的字符，那你可以仅使用「C」。</para>

  <para>不少程序还不支持 UTF-8 区域设置。我们正在完善文档并修复类似问题，可以查看<ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/introduction/locale-issues.html"/>.</para>

</sect1>

  <!-- common -->
  <sect1 id="ch-scripts-inputrc">
  <?dbhtml filename="inputrc.html"?>

  <title>创建 /etc/inputrc 文件</title>

  <indexterm zone="ch-scripts-inputrc" significance="normal">
    <primary sortas="e-/etc/inputrc">/etc/inputrc</primary>
  </indexterm>

  <para><filename moreinfo="none">inputrc</filename> 文件的作用是告知系统应该以怎样的键盘布局处理键盘。此文件对于 readline —— 输入相关库，或者是一些 shell （例如 bash 等）来说十分重要。</para>

  <para>对于大部分用户来说，都不使用那些奇奇怪怪的键盘映射，所以，可以通过以下的命令建立一个全局的 <filename moreinfo="none">/etc/inputrc</filename> 以供所有用户使用。如果需要更改某一个用户的键盘映射，仅需要在那个用户的 HOME 目录下建立一个 <filename moreinfo="none">.inputrc</filename> 文件，然后修改对应的键盘映射就可以了。</para>

  <para>如果需要了解更多有关如何编辑 <filename moreinfo="none">inputrc</filename> 文件的信息，可以查看 <command moreinfo="none">info bash</command> 中 <emphasis>Readline Init File</emphasis> 一节。其实查看 <command moreinfo="none">info readline</command> 也可以获得不少有用的东西。</para>

  <para>下面显示的就是通用的 <filename moreinfo="none">inputrc</filename> 文件，其中包含有 “#” 的都是注释行（需要注意的是，此文件不支持在设置后跟随注释）。使用以下命令创建此文件：</para>

<screen format="linespecific"><userinput moreinfo="none">cat &gt; /etc/inputrc &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/inputrc
# Modified by Chris Lynn &lt;roryo@roryo.dynup.net&gt;

# Allow the command prompt to wrap to the next line
set horizontal-scroll-mode Off

# Enable 8bit input
set meta-flag On
set input-meta On

# Turns off 8th bit stripping
set convert-meta Off

# Keep the 8th bit for display
set output-meta On

# none, visible or audible
set bell-style none

# All of the following map the escape sequence of the value
# contained in the 1st argument to the readline specific functions
"\eOd": backward-word
"\eOc": forward-word

# for linux console
"\e[1~": beginning-of-line
"\e[4~": end-of-line
"\e[5~": beginning-of-history
"\e[6~": end-of-history
"\e[3~": delete-char
"\e[2~": quoted-insert

# for xterm
"\eOH": beginning-of-line
"\eOF": end-of-line

# for Konsole
"\e[H": beginning-of-line
"\e[F": end-of-line

# End /etc/inputrc</literal>
EOF</userinput></screen>

</sect1>
  <sect1 id="ch-config-shells" xreflabel="Creating the /etc/shells File">
  <?dbhtml filename="etcshells.html"?>

<!--
  <sect1info>
    <othername>$LastChangedBy: bdubbs $</othername>
    <date>$Date: 2016-06-01 11:04:27 +0800 (周三, 01 6月 2016) $</date>
  </sect1info>
-->
  <title>创建 /etc/shells 文件</title>

  <indexterm zone="ch-config-shells" significance="normal">
    <primary sortas="e-etc-shells">/etc/shells</primary>
  </indexterm>

  <para><filename moreinfo="none">shells</filename> 文件是当前系统所有可用 shell 的列表文件。应用程序通过读取它可以知道需要使用的 shell 是否有效。每行指定一个 shell 的绝对路径，即从根目录（/）开始的路径。</para>

  <para>例如，当非特权用户想要使用 <command moreinfo="none">chsh</command> 命令更改自己登录所用的 shell 时。如果命令没有在 /etc/shell 中找到，那么将会拒绝更改。</para>

  <para>这个文件对于某些程序来说是必需的，比如 <application moreinfo="none">GDM</application> 在找不到 <filename moreinfo="none">/etc/shells</filename> 时就不会启用面部浏览器，还有 FTP 守护进程通常会禁止使用不在这个文件里列出终端的用户登录。</para>

<screen role="root" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/shells &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/shells

/bin/sh
/bin/bash

# End /etc/shells</literal>
EOF</userinput></screen>

</sect1>

  <!-- systemd -->
  <sect1 id="ch-scripts-systemd-custom" revision="systemd">
  <?dbhtml filename="systemd-custom.html"?>

  <title>systemd 的用法与配置</title>

  <indexterm zone="ch-scripts-systemd-custom" significance="normal">
    <primary sortas="e-systemd">systemd 配置</primary>
  </indexterm>

  <sect2>
    <title>基础配置</title>

    <para><filename moreinfo="none">/etc/systemd/system.conf</filename> 文件包含了大量的 systemd 控制命令。
    假如未作任何的更改，文件中的所有行应该都是注释掉的，这代表了 systemd 正使用默认的运行方式。
    这个文件中可以设置日志级别，可以修改日志的基本设置。所有设置项都可以在 man 手册的 <filename moreinfo="none">systemd-system.conf(5)</filename> 中查看。</para>

  </sect2>

  <sect2>
    <title>禁用启动时清屏</title>

    <para>默认情况下，systemd 将会在系统启动快要结束的时候清屏。如不需要，使用以下操作禁用：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -pv /etc/systemd/system/getty@tty1.service.d

cat &gt; /etc/systemd/system/getty@tty1.service.d/noclear.conf &lt;&lt; EOF
<literal moreinfo="none">[Service]
TTYVTDisallocate=no</literal>
EOF</userinput></screen>

    <para>拥有 root 权限的账户可以通过 <userinput moreinfo="none">journalctl -b</userinput> 查看启动信息。</para>

  </sect2>

  <sect2>
    <title>禁止 /tmp 使用 tmpfs</title>

    <para>默认情况下，<filename class="directory" moreinfo="none">/tmp</filename> 使用 tmpfs 文件系统。如不需要，使用以下操作禁用：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">ln -sfv /dev/null /etc/systemd/system/tmp.mount</userinput></screen>

    <para>或许，如果你需要一个单独的 <filename class="directory" moreinfo="none">/tmp</filename> 分区，那请在 <filename moreinfo="none">/etc/fstab</filename> 条目中指定该分区。</para>

    <warning>
      <para>
        如果使用的是独立的 <filename class="directory" moreinfo="none">/tmp</filename> 分区，就不要创建上述链接。这将保护根（/）文件系统，使其在重新挂载后失去 r/w 权限，从而导致系统在启动后无法使用。
      </para>
    </warning>

  </sect2>

  <sect2>
    <title>配置自动创建和删除文件</title>

    <para>有这样几个服务可以建立或删除文件/目录：</para>

    <itemizedlist>
      <listitem><para>systemd-tmpfiles-clean.service</para></listitem>
      <listitem><para>systemd-tmpfiles-setup-dev.service</para></listitem>
      <listitem><para>systemd-tmpfiles-setup.service</para></listitem>
    </itemizedlist>

    <para>系统配置文件在 <filename moreinfo="none">/usr/lib/tmpfiles.d/*.conf</filename> 中。
      本地配置文件在 <filename class="directory" moreinfo="none">/etc/tmpfiles.d</filename> 中。
      <filename class="directory" moreinfo="none">/etc/tmpfiles.d</filename>中的文件会覆盖 <filename class="directory" moreinfo="none">/usr/lib/tmpfiles.d</filename> 中相同名称的文件。
      （译者注：首先读取系统范围配置文件，再读取用户范围配置文件，用户范围配置文件会覆盖系统范围配置文件的相同部分。）可以在 man 手册的 <filename moreinfo="none">tmpfiles.d(5)</filename> 中获取文件格式详情。</para>

    <para>
      注意，<filename moreinfo="none">/usr/lib/tmpfiles.d/*.conf</filename> 文件的语法比较容易搞错。例如，默认对于 /tmp 目录下文件的删除，源自 <filename moreinfo="none">/usr/lib/tmpfiles.d/tmp.conf</filename> 中的这一行：

<screen role="nodump" format="linespecific">q /tmp 1777 root root 10d</screen>

      类型字段 q，用于创建带配额的子卷，仅适用于 btrfs 文件系统。它会引用类型 v，然后引用类型 d （目录）。然后创建指定的目录，如果它原先不存在的话，并为其调整权限，指定所有权。
     </para>

     <para>
      如果默认参数不能达到要求，那就复制文件至 <filename class="directory" moreinfo="none">/etc/tmpfiles.d</filename> 按照自己的需求修改它。复制示例：

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -p /etc/tempfiles.d
cp /usr/lib/tmpfiles.d/tmp.conf /etc/tempfiles.d</userinput></screen>
     </para>

  </sect2>

  <sect2>
    <title>覆盖默认服务的行为</title>

    <para>可以通过在 <filename class="directory" moreinfo="none">/etc/systemd/system</filename> 中创建目录和配置文件来覆盖单元的参数。例如：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mkdir -pv /etc/systemd/system/foobar.service.d

cat &gt; /etc/systemd/system/foobar.service.d/foobar.conf &lt;&lt; EOF
<literal moreinfo="none">[Service]
Restart=always
RestartSec=30</literal>
EOF</userinput></screen>

     <para>可以在 man 手册的 <filename moreinfo="none">systemd.unit(5)</filename> 中查询更多信息。创建好文件之后，请运行 <userinput moreinfo="none">systemctl daemon-reload</userinput> 和 <userinput moreinfo="none">systemctl restart foobar</userinput> 激活所做更改。</para>

  </sect2>

  <sect2>
    <title>调试启动顺序</title>

    <para>相较于 SysVinit 或 BSD 风格的初始化使用的是简单的 shell 脚本，而 systemd 对于不同类型的启动文件（或单元）使用的是统一的格式。<command moreinfo="none">systemctl</command> 命令可用于用于，启用，禁用，控制状态，和获取单元文件的状态。以下是一些常用命令的示例：</para>

    <itemizedlist>
       <listitem>
         <para><command moreinfo="none">systemctl list-units -t <replaceable>&lt;service&gt;</replaceable> [--all]</command>：列出加载的服务类型的单元文件。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">systemctl list-units -t <replaceable>&lt;target&gt;</replaceable> [--all]</command>：列出加载的目标类型的单元文件。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">systemctl show -p Wants <replaceable>&lt;multi-user.target&gt;</replaceable></command>：显示所有依赖多用户的目标。目标是与 SysVinit 运行级不同的特殊单元文件。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">systemctl status <replaceable>&lt;servicename.service&gt;</replaceable></command>：显示服务名称服务的状态。扩展名 .service 在没有同名单元文件，例如 .socket（创建监听套接字功能与 inetd/xinetd 相似的）文件，的情况下可以省略。</para>
       </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>使用 systemd 日志</title>

    <para>systemd 启动的系统上的日志记录（默认）由 systemd-journald 处理的，而不是传统的 unix syslog 守护程序。如果需要，你也可以添加 syslog 的守护进程与之并行运作。systemd-journald 程序使用二进制形式存储日志条目而非纯文本的日志文件。为了帮助解析文件，提供了 <command moreinfo="none">journalctl</command> 命令。以下是一些常用命令的示例：</para>

    <itemizedlist>
       <listitem>
         <para><command moreinfo="none">journalctl -r</command>：按时间逆序现实所有的内容。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">journalctl -u <replaceable>UNIT</replaceable></command>：显示与指定 UNIT 相关的日志条目。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">journalctl -b[=ID] -r</command>：按时间逆序显示自上次成功启动（或启动 ID）的日志条目。</para>
       </listitem>
       <listitem>
         <para><command moreinfo="none">journalctl -f</command>：提供类似与 tail -f (follow) 类似的功能。</para>
       </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>长时间运行进程</title>

    <para>自 systemd-230 开始，用户的所有进程都会随着用户会话的结束而被杀死，即使你用了 nohup，或进程使用了 <function moreinfo="none">daemon()</function> 或是 <function moreinfo="none">setsid()</function> 功能。这是为了是让原先宽松的环境变得更为严格而故意为之的。如果你依赖长时间运行的程序（例如，<command moreinfo="none">screen</command> 或是 <command moreinfo="none">tmux</command>），需要在你结束用户会话后保持运作。有三个方法能让进程保持在用户会话结束后仍然逗留。</para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis>仅为需要的用户启用进程逗留</emphasis>：正常用户有权使用命令 <command moreinfo="none">loginctl enable-linger</command> 来为其启用进程逗留。系统管理员可以使用相同的命令伴随着 <parameter moreinfo="none">user</parameter> 参数，来帮某个用户实现。用户可以在之后使用命令 <command moreinfo="none">systemd-run</command> 来启动长时间运行进程。举个例子：<command moreinfo="none">systemd-run --scope
          --user /usr/bin/screen</command>。如果你为你的用户启用了逗留，user@.service 会在所有的登录会话被关闭后仍然保留，并在系统启动后自动启动。这样做的好处是明确地表明是否允许进程在用户会话结束后继续运行，但却打破了对于类似于 <command moreinfo="none">nohup</command> 之类工具和使用 <function moreinfo="none">deamon()</function> 的公用方法的向后兼容。</para>
      </listitem>
      <listitem>
        <para>
          <emphasis>启用系统范围的进程逗留</emphasis>：你可以在 <filename moreinfo="none">/etc/logind.conf</filename> 中设置 <parameter moreinfo="none">KillUserProcesses=no</parameter> 来全局地为每个用户启用进程逗留。这在牺牲明确控制的同时，带来了将旧方法提供给所有用户的好处。</para>
      </listitem>
      <listitem>
        <para>
          <emphasis>在构建时禁用</emphasis>：你可以通过在构建 systemd 时向命令 <command moreinfo="none">meson</command> 添加 <parameter moreinfo="none">-Ddefault-kill-user-processes=no</parameter>，以此来默认启用逗留。这会使 systemd 完全丧失在用户会话结束后杀死进程的能力。</para>
      </listitem>
    </itemizedlist>

  </sect2>

</sect1>

</chapter>
<chapter id="chapter-bootable" xreflabel="&#x7B2C; 8 &#x7AE0;" xml:base="chapter08/chapter08.xml">
  <?dbhtml dir="chapter08"?>
  <?dbhtml filename="chapter08.html"?>

  <title>让 LFS 系统可引导</title>

  <sect1 id="ch-bootable-introduction">
  <?dbhtml filename="introduction.html"?>

  <title>简介</title>

  <para>是时候该让 LFS 系统可以启动了。本章节将讨论以下内容：创建 <filename moreinfo="none">fstab</filename> 文件、为新的 LFS 系统编译内核、安装 GRUB 引导器。如此，就可以在电脑启动的时候选择启动 LFS 系统了。</para>

</sect1>
  <sect1 id="ch-bootable-fstab">
  <?dbhtml filename="fstab.html"?>

   <title>创建 /etc/fstab 文件</title>

  <indexterm zone="ch-bootable-fstab" significance="normal">
    <primary sortas="e-/etc/fstab">/etc/fstab</primary>
  </indexterm>

  <para><filename moreinfo="none">/etc/fstab</filename> 文件的作用是让其它程序确定存储设备的默认挂载点、挂载参数和检查信息（例如完整性检测）。仿照以下格式新建一个文件系统列表（file system table，简称 fstab）文件：</para>



<screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/fstab &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/fstab

# file system  mount-point  type     options             dump  fsck
#                                                              order

/dev/<replaceable>&lt;xxx&gt;</replaceable>     /            <replaceable>&lt;fff&gt;</replaceable>    defaults            1     1
/dev/<replaceable>&lt;yyy&gt;</replaceable>     swap         swap     pri=1               0     0

# End /etc/fstab</literal>
EOF</userinput></screen>

  <para>其中，<replaceable>&lt;xxx&gt;</replaceable>，<replaceable>&lt;yyy&gt;</replaceable> 和 <replaceable>&lt;fff&gt;</replaceable> 请使用适当的值替换。例如 <filename class="partition" moreinfo="none">sda2</filename>，<filename class="partition" moreinfo="none">sda5</filename> 和 <systemitem class="filesystem" moreinfo="none">ext4</systemitem>。关于文件中六个字段的含义，请查看 <command moreinfo="none">man 5 fstab</command>（译者注：fsck 列的数值来决定需要检查的文件系统的检查顺序。允许的数字是0, 1, 和2。根目录应当获得最高的优先权 1, 其它所有需要被检查的设备设置为 2。0 表示设备不会被 fsck 所检查）。</para>

  <para>基于 MS-DOS 或者是来源于 Windows 的文件系统（例如：vfat，ntfs，smbfs，cifs，iso9660，udf）需要在挂载选项中添加「iocharset」，才能让非 ASCII 字符的文件名正确解析。此选项的值应该与语言区域设置的值相同，以便让内核能正确处理。此选项在相关字符集定义已为内核内建或是编译为模块时生效（在文件系统 -&gt; 本地语言支持中查看）。此外，vfat 和 smbfs 还需启用「codepage」支持。例如，想要挂载 USB 闪存设备，zh-CN.GBK 用户需要在 <filename moreinfo="none">/etc/fstab</filename> 中添加以下的挂载选项：</para>

<screen format="linespecific"><literal moreinfo="none">noauto,user,quiet,showexec,iocharset=gbk,codepage=936</literal></screen>

  <para>对于 zh_CN.UTF-8 用户的对应选项是：</para>

<screen format="linespecific"><literal moreinfo="none">noauto,user,quiet,showexec,iocharset=utf8,codepage=936</literal></screen>

  <para>需要注意的是，<option>iocharset</option> 默认值是 <literal moreinfo="none">iso8859-1</literal> （其保证文件系统大小写敏感），而 <option>utf8</option> 这个参数告知内核使用 UTF-8 转换文件名，以便可以在 UTF-8 语言环境中解释它们。</para>

  <!--note>
    <para>In the latter case, the kernel emits the following message:</para>

<screen><computeroutput>FAT: utf8 is not a recommended IO charset for FAT filesystems,
    filesystem will be case sensitive!</computeroutput></screen>

    <para>This negative recommendation should be ignored, since all other values
    of the <quote>iocharset</quote> option result in wrong display of filenames in
    UTF-8 locales.</para>
  </note-->

  <para>此外，还有可能在内核的配置过程中就指定一些文件系统的默认代码页和 iocharset 值。相关参数有「默认 NLS 选项 」（<option>CONFIG_NLS_DEFAULT</option>），「默认远程 NLS 选项」（<option>CONFIG_SMB_NLS_DEFAULT</option>)，「FAT 默认代码页」（<option>CONFIG_FAT_DEFAULT_CODEPAGE</option>），和「FAT 默认 IO 字符集」（<option>CONFIG_FAT_DEFAULT_IOCHARSET</option>）。不过，无法在内核编译阶段指定 ntfs 文件系统的设置。</para>

  <para>另外，一些硬盘类型在遇到电源故障时，假如在 <filename moreinfo="none">/etc/fstab</filename> 中使用 <option>barrier=1</option> 这个挂载选项，则会让 ext3 文件系统的数据更加安全。如需检查磁盘是否支持此选项，请运行 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/hdparm.html">hdparm</ulink>。例如：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">hdparm -I /dev/sda | grep NCQ</userinput></screen>

  <para>如果有输出内容，则代表选项可用。</para>

  <para>注意：基于 逻辑卷管理（LVM）的分区不可使用 <option>barrier</option> 选项。</para>

</sect1>
  <sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  

  <title>Linux-4.20.12</title>

  <indexterm zone="ch-bootable-kernel" significance="normal">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 软件包包含 Linux 内核。</para>

    <segmentedlist>
      <segtitle>大致构建用时</segtitle>
      <segtitle>所需磁盘空间</segtitle>

      <seglistitem>
        <seg>4.4 - 66.0 SBU （通常约为  6 SBU）</seg>
        <seg>960 - 4250 MB （通常约为  1100 MB）</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装内核</title>

    <para>编译内核包括以下步骤——配置、编译和安装。阅读内核源码树中的 <filename moreinfo="none">README</filename> 可以获得替代本手册配置的方法。</para>

    <para>运行以下命令准备编译：</para>

<screen format="linespecific"><userinput remap="pre" moreinfo="none">make mrproper</userinput></screen>

    <para>这将保证内核树的绝对干净。内核小组建议在每次编译之前都执行此命令，无用的代码将会在解压后删除。</para>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>通过菜单界面配置内核。配置内核的一般信息请查看：<ulink url="http://www.linuxfromscratch.org/hints/downloads/files/kernel-configuration.txt"/>。
    BLFS 包含有一些内核的特殊配置，可以查看：<ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/longindex.html#kernel-config-index"/>。
    内核配置和编译的附加信息可查看：<ulink url="http://www.kroah.com/lkn/"/>。</para>

    <note>
    
      <para>配置内核的一个好的起点是运行 <command moreinfo="none">make defconfig</command>。这样会参考你的机器架构生成一份基本能用的基础配置。</para>

      <para>注意要确保启用/禁用/设置下面这些特性，否则系统也许不能正常工作甚至根本无法启动：</para>

      

      <screen role="nodump" revision="systemd" format="linespecific">
General setup --&gt;
   [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
   [ ] Enable deprecated sysfs features by default [CONFIG_SYSFS_DEPRECATED_V2]
   [*] open by fhandle syscalls [CONFIG_FHANDLE]
   [ ] Auditing support [CONFIG_AUDIT]
   [*] Control Group support [CONFIG_CGROUPS]
Processor type and features  ---&gt;
   [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
Networking support  ---&gt;
  Networking options  ---&gt;
   &lt;*&gt; The IPv6 protocol [CONFIG_IPV6]
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
   [ ] Fallback user-helper invocation for firmware loading [CONFIG_FW_LOADER_USER_HELPER]
Firmware Drivers  ---&gt;
   [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
File systems  ---&gt;
   [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
   &lt;*&gt; Kernel automounter version 4 support (also supports v3) [CONFIG_AUTOFS4_FS]
  Pseudo filesystems  ---&gt;
   [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]
   [*] Tmpfs extended attributes [CONFIG_TMPFS_XATTR]
Kernel hacking  ---&gt;
       Choose kernel unwinder (Frame pointer unwinder)  ---&gt; [CONFIG_UNWINDER_FRAME_POINTER]</screen>
    </note>

    <note revision="systemd">
      <para>尽管「The IPv6 Protocol」不是必须打开，但是 systemd 开发人员强烈推荐打开。</para>
    </note>

    

    <note>
      <para>如果你主机的硬件用的是 UEFI，那么上面的‘make defconfig’应该会自动添加一些 EFI 相关的内核选项。</para>

      <para>为了让你的 LFS 内核，在你的主机是 UEFI 引导环境的情况下，能够被引导，你的内核必须要有这项：</para>

<screen role="nodump" format="linespecific">Processor type and features  ---&gt;
   [*]   EFI stub support  [CONFIG_EFI_STUB]</screen>

      <para>文件 lfs-uefi.txt 中包含了管理 UEFI 环境的完整描述，参见 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt"/>。</para>
    </note>

    <variablelist>
      <title>上述配置项的一些原理说明：</title>

      <varlistentry>
        <term><parameter moreinfo="none">Support for uevent helper</parameter></term>
        <listitem>
          <para>打开这个选项会影响 udev/Eudev 设备管理。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter moreinfo="none">Maintain a devtmpfs</parameter></term>
        <listitem>
          <para>这个选项允许内核在 udev 运行之前就创建自动设备节点。之后 udev 在这个基础上运行，管理权限以及增加软链接。对于所有 udev/Eudev 用户，这个配置项是必须的。</para>
        </listitem>
      </varlistentry>

    </variablelist>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">make menuconfig</userinput></screen>

    <variablelist>
      <title>可选 make 环境变量的含义：</title>

      <varlistentry>
        <term><parameter moreinfo="none">LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>建立与宿主系统相同的地域设定。在 UTF-8 linux 文本命令行上逐行绘制适宜的 menuconfig ncurses 接口时可能需要这项配置。</para>

          <para>要使用的话，请我务必使用宿主系统中的变量 <envar>$LANG</envar> 去代替 <replaceable>&lt;host_LANG_value&gt;</replaceable>。你也可以用宿主系统中的 <envar>$LC_ALL</envar> 或 <envar>$LC_CTYPE</envar> 来代替。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>另外，<command moreinfo="none">make oldconfig</command> 在某些情况下可能更合适。查看 <filename moreinfo="none">README</filename> 文件了解更多信息。</para>

    <para>想偷懒的话，可以拷贝宿主系统的内核配置文件 <filename moreinfo="none">.config</filename>（如果有的话）到解压后的 <filename class="directory" moreinfo="none">linux-4.20.12</filename> 目录下来跳过内核配置。不过，我们不建议这样做。最好是探索一下整个内核配置菜单，从最开始配置内核。</para>

    <para>编译内核映像和模块：</para>

<screen format="linespecific"><userinput remap="make" moreinfo="none">make</userinput></screen>

    <para>如果使用内核模块，需要 <filename class="directory" moreinfo="none">/etc/modprobe.d</filename> 文件里的模块配置。关于模块和内核配置的信息可以查看 <xref linkend="ch-scripts-udev"/> 以及 <filename class="directory" moreinfo="none">linux-4.20.12/Documentation</filename> 目录下的内核文档。还有，<filename moreinfo="none">modprobe.d(5)</filename> 也可以看一下。</para>

    <para>如果内核配置里用到，需要安装模块：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">make modules_install</userinput></screen>

    <para>在内核编译完成后，还需要一个额外步骤来完成安装。有些文件需要拷贝到 <filename class="directory" moreinfo="none">/boot</filename> 目录下。</para>

    <caution>
     <para>如果宿主系统拥有单独的 /boot 分区，那么文件就应该复制到那里。简单的解决方法就是在执行前将 /boot 绑定到宿主的 /mnt/lfs/boot。以<emphasis>宿主系统</emphasis>中的 root 用户运行：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">mount --bind /boot /mnt/lfs/boot</userinput></screen>
    </caution>

    <para>内核映像文件所在的实际目录根据主机系统架构可能会不一样。下面的文件名你也可以改成你喜欢的，不过开头最好是 <emphasis>vmlinuz</emphasis> 才可以兼容下一节要讲的配置引导过程的自动设定。下面的命令假设主机是 x86 架构：</para>



<screen revision="systemd" format="linespecific"><userinput remap="install" moreinfo="none">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-4.20.12-lfs-8.4-systemd</userinput></screen>

    <para><filename moreinfo="none">System.map</filename> 是内核的符号文件。它映射了每一个内核 API 函数的入口，以及内核运行时的数据结构地址。是调查内核问题时的资源。运行下面的命令安装映射文件：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -iv System.map /boot/System.map-4.20.12</userinput></screen>

    <para>在之前命令 <command moreinfo="none">make menuconfig</command> 里生成的内核配置文件 <filename moreinfo="none">.config</filename> 包含了当前编译的内核的所有配置。最好能保存下来留作参考：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">cp -iv .config /boot/config-4.20.12</userinput></screen>

    <para>安装 Linux 内核文档：</para>

<screen format="linespecific"><userinput remap="install" moreinfo="none">install -d /usr/share/doc/linux-4.20.12
cp -r Documentation/* /usr/share/doc/linux-4.20.12</userinput></screen>

    <para>需要注意一下内核源代码目录下的文件属主并不是 <emphasis>root</emphasis>。在以 <emphasis>root</emphasis> 用户解压包的时候（我们在 chroot 环境里做的），解压出来的文件会拥有生成这个包的电脑里用户和组。在安装其他包的时候这并不是问题，因为它们的源代码在安装完后就删除了。不过，Linux 内核的源代码经常会保留比较长时间。这样的话，就有可能会把软件包作者的用户 ID 对应到本机的某个用户上。从而这个用户就会拥有内核源代码的写权限。</para>

    <note>
    <para>在很多情况下，内核的配置信息需要在稍后安装来自于 BLFS 的软件包后更新。这和其他的软件包不同，在安装完成编译好的内核后不需要将内核源码树删除。</para>

    <para>如果想要保留内核的源码树，在 <filename class="directory" moreinfo="none">linux-4.20.12</filename> 下运行 <command moreinfo="none">chown -R 0:0</command> 来确保所有文件的所有者都 <emphasis>root</emphasis>。</para>
    </note>

    <warning>
      <para>一些内核文档里建议创建软链接 <filename class="symlink" moreinfo="none">/usr/src/linux</filename> 指向内核源代码目录。这是 2.6 及以前版本内核的特定要求，而在 LFS 系统里<emphasis>一定不要</emphasis>创建这个链接，因为这样的话，在你的基础 LFS 系统完成后安装某些软件包时可能引起问题。</para>
    </warning>

    <warning>
      <para>系统 <filename class="directory" moreinfo="none">include</filename> 目录（<filename class="directory" moreinfo="none">/usr/include</filename>）下的头文件应该<emphasis>总是</emphasis>和编译 Glibc 时用到的头文件保持一致。就是在 <xref linkend="ch-system-linux-headers"/> 里整理过的头文件。因此，它们<emphasis>不要</emphasis>替换成原始内核头文件或任何清理过的内核头文件。</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>配置 Linux 模块加载顺序</title>

    <indexterm zone="conf-modprobe" significance="normal">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para>虽然大多数情况下，Linux 模块会被自动加载，但是有时候需要特别指定加载顺序。<command moreinfo="none">modprobe</command> 或 <command moreinfo="none">insmod</command> 在加载模块时会读取 <filename moreinfo="none">/etc/modprobe.d/usb.conf</filename>。如果将 USB 设备（ehci_hcd、ohci_hcd 和 uhci_hcd） 编译为模块，则需要此文件，这样它们就会以正确的顺序加载。ehci_hcd 需要在 ohci_hcd 和 uhci_hcd 之前加载，否则在系统启动过程中将会输出警告。</para>

    <para>运行以下命令建立 <filename moreinfo="none">/etc/modprobe.d/usb.conf</filename> 文件：</para>

<screen format="linespecific"><userinput moreinfo="none">install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Linux 的内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>config-4.20.12,
        
        <phrase revision="systemd">vmlinuz-4.20.12-lfs-8.4-systemd,</phrase>
        and System.map-4.20.12</seg>
        <seg>/lib/modules, /usr/share/doc/linux-4.20.12</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要说明</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename moreinfo="none">config-4.20.12</filename></term>
        <listitem>
          <para>包含内核的所有配置选项</para>
          <indexterm zone="ch-bootable-kernel config" significance="normal">
            <primary sortas="e-/boot/config">/boot/config-4.20.12</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        
        <term revision="systemd"><filename moreinfo="none">vmlinuz-4.20.12-lfs-8.4-systemd</filename></term>
        <listitem>
          <para>Linux 系统的引擎。当电脑启动时，内核作为整个系统的第一部分载入。它首先检测和初始化所有的电脑硬件，然后将这些硬件模块抽象成文件树让软件访问，并把单个 CPU 转换成多任务系统，可以看上去同时地运行多个程序</para>
          <indexterm zone="ch-bootable-kernel lfskernel" significance="normal">
            <primary sortas="b-lfskernel">lfskernel-4.20.12</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename moreinfo="none">System.map-4.20.12</filename></term>
        <listitem>
          <para>地址和符号列表；包含有入口点的映射以及所有函数和内核数据结构的地址</para>
          <indexterm zone="ch-bootable-kernel System.map" significance="normal">
            <primary sortas="e-/boot/System.map">/boot/System.map-4.20.12</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
  <sect1 id="ch-bootable-grub" role="wrap">
  <?dbhtml filename="grub.html"?>

  

  <title>使用 GRUB 设置启动过程</title>

  <sect2>
    <title>简介</title>

    <warning><para>对 GRUB 进行错误的配置可能会导致在没有外置启动设备（某些USB设备，某些 CD-ROM 等）的情况下无法正常的启动。你可能仅仅需要修改当前正在使用的引导器（比如：Grub-Legacy，GRUB2 或 LILO 等）的配置。</para></warning>

    <para>一定要确保你有一个可以引导的光盘或者是 U 盘以备不时之需，否则万一电脑真的不能启动谁都救不了你。如果你需要建立可引导的设备，可以按照以下方法操作（跳转到 BLFS 从 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/multimedia/libisoburn.html">libisoburn</ulink> 软件包安装 <userinput moreinfo="none">xorriso</userinput>）。</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">cd /tmp 
grub-mkrescue --output=grub-img.iso 
xorriso -as cdrecord -v dev=/dev/cdrw blank=as_needed grub-img.iso</userinput></screen>

    <note>
      <para>想要在启用 UEFI 的宿主系统上引导 LFS，需要遵循上一节的描述在内核中构建 CONFIG_EFI_STUB 功能。也可以使用 GRUB2 来引导 LFS，这样就无需实施以上的额外操作了。但需要在宿主系统的 BIOS 中关闭 UEFI 模式和安全引导（Secure Boot）功能。详细参见文件 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt">lfs-uefi.txt</ulink>。</para>
    </note>

  </sect2>

  <sect2>
    <title>GRUB 命名约定</title>

    <para>GRUB 对于硬盘和分区自有一套命名规则 <emphasis>(hdn,m)</emphasis>，其中 <emphasis>n</emphasis> 是硬盘数，<emphasis>m</emphasis> 是分区号。硬盘数 N 从 0 开始计数，分区数需要区别对待——主分区从 1 开始计数而扩展分区从 5 开始计数。需要注意的是，和早期版本相比，计数方式都有所变化。例如，分区 <filename class="partition" moreinfo="none">sda1</filename> 是 <emphasis>(hd0,1)</emphasis>，<filename class="partition" moreinfo="none">sdb3</filename> 是 <emphasis>(hd1,3)</emphasis>。Linux 下，并不将 CD-ROM 设备假想为硬盘。例如，就算已有 CD 设备挂载为 <filename class="partition" moreinfo="none">hdb</filename>，第二块硬盘挂载为 <filename class="partition" moreinfo="none">hdc</filename>，GRUB 依旧将第二块硬盘称为 <emphasis>(hd1)</emphasis>。</para>

  </sect2>

  <sect2>
    <title>配置配置文件</title>

    <para>GRUB 会将一些数据写入硬盘的第一个物理扇区。这一部分不属于任何一个操作系统，在启动时，该部分数据激活，然后寻找 Grub 的模块，Grub 模块的默认位置为 /boot/grub/。</para>

    <para>一种建议是使用一个独立的小分区（建议大小 100MB）专用于引导信息。那样的话，每一个发行版，不论是 LFS 还是其他的商业发行版，都能访问相同的引导文件而且任何已经启动的系统都能访问它。如果你选择这么做，你需要挂载这个独立分区，移动所有的文件从当前的 <filename class="directory" moreinfo="none">/boot</filename> 目录（比如说你上一节刚编译的 Linux 内核）到新的分区。你然后要卸载这个新分区，重新挂载它为 <filename class="directory" moreinfo="none">/boot</filename>。如果你这么做，一定要更新 <filename moreinfo="none">/etc/fstab</filename>。</para>

    <para>使用当前的 lfs 分区也没有什么问题，但是在配置多系统启动的时候有些不同。</para>

    <para>从以上信息可知，需要确定根分区的磁盘位置（如果使用单独的分区，则需要知道引导分区的磁盘位置），以下假定根分区（或者是磁盘分区）是 <filename class="partition" moreinfo="none">sda2</filename>。</para>

    <para>将 GRUB 文件安装到 <filename class="directory" moreinfo="none">/boot/grub</filename> 然后设置启动扇区：</para>

    <warning>
      <para>以下命令将会覆盖已有的引导器。如无需要，请勿运行（比如已经有第三方引导器管理 MBR）。</para>
    </warning>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">grub-install /dev/sda</userinput></screen>

    <note>
      <para>如果系统是通过 UEFI 引导的，<command moreinfo="none">grub-install</command> 将会尝试将文件安装至 <emphasis>x86_64-efi</emphasis>，但是这些文件并未在第 6 章中安装。如果是在这种情况下，在上述命令后面追加 <option>--target i386-pc</option>。</para>
    </note>

<!-- This does not seem to be true any more
    <note><para><application>grub-install</application> is a script and calls another
    program, grub-probe, that may fail with a message "cannot stat `/dev/root'".
    If so, create a temporary symbolic link from your root partition to /dev/root:</para>

<screen role="nodump"><userinput>ln -sv /dev/sda2 /dev/root</userinput></screen>

    <para>The symbolic link will only be present until the system is rebooted.
    The link is only needed for the installation procedure.
    </para></note>
-->
  </sect2>

  <sect2 id="grub-cfg">
    <title>创建 GRUB 配置文件</title>

    <para>创建 <filename moreinfo="none">/boot/grub/grub.cfg</filename>:</para>

    

    <screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /boot/grub/grub.cfg &lt;&lt; "EOF"
<literal moreinfo="none"># Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod ext2
set root=(hd0,2)

menuentry "GNU/Linux, Linux 4.20.12-lfs-8.4-systemd" {
        linux   /boot/vmlinuz-4.20.12-lfs-8.4-systemd root=/dev/sda2 ro
}</literal>
EOF</userinput></screen>


    <note><para>从 <application moreinfo="none">GRUB</application> 的角度看，内核文件相当于一个分区，所以假如你使用单独的 /boot 分区，请不要在 <emphasis>linux</emphasis> 行添加 /boot。此外还需要将 <emphasis>set root</emphasis> 行指向 /boot 所在的实际分区。</para></note>

    <para>GRUB 功能十分强大，它提供了大量的用于从种类繁多的设备和操作系统、以及不同的分区类型启动的选项。此外还可以定制启动页、播放声音或者是鼠标等。很遗憾的是，这些功能超出本文的范畴，我们一概不予讨论。</para>

    <caution><para><application moreinfo="none">grub-mkconfig</application> 命令可以自动建立配置文件。它使用位于 /etc/grub.d/ 下的一组脚本且将会忽略用户的设置。这些命令主要用于那些非源码编译的发行版，所以不建议 LFS 用户使用此命令。如果你使用商业发行版，你可以试着运行这个命令（运行之前记得备份原来的 grub.cfg 文件）。</para></caution>

   </sect2>

</sect1>

</chapter>
<chapter id="chapter-finalizing" xreflabel="&#x7B2C; 9 &#x7AE0;" xml:base="chapter09/chapter09.xml">
  <?dbhtml dir="chapter09"?>
  <?dbhtml filename="chapter09.html"?>

  <title>尾声</title>

  <sect1 id="ch-finish-theend">
  <?dbhtml filename="theend.html"?>

  <title>最后的最后</title>

  <indexterm zone="ch-finish-theend" significance="normal">
    <primary sortas="e-/etc/lfs-release">/etc/lfs-release</primary>
  </indexterm>

  <indexterm zone="ch-finish-theend" significance="normal">
    <primary sortas="e-/etc/lsb-release">/etc/lsb-release</primary>
  </indexterm>

  <indexterm zone="ch-finish-theend" revision="systemd" significance="normal">
    <primary sortas="e-/etc/os-release">/etc/os-release</primary>
  </indexterm>

  <para>干的很棒嘛！至此，全新的 LFS 系统就已经安装完成啦！我们衷心地祝愿，你亲手定制的崭新 Linux 系统能陪着你乘风破浪。</para>

  <para revision="systemd">创建一个 systemd 所需的 <filename moreinfo="none">/etc/os-release</filename> 文件：</para>

<screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/os-release &lt;&lt; "EOF"
NAME="Linux From Scratch"
VERSION="8.4-systemd"
ID=lfs
PRETTY_NAME="Linux From Scratch 8.4-systemd"
VERSION_CODENAME="&lt;your name here&gt;"
EOF</userinput></screen>

  



  <para revision="systemd">建议和非 systemd 分支一样创建文件 <filename moreinfo="none">/etc/lfs-release</filename>。该文件能帮助你（和我们，如果你需要我们帮助的话）确定你当前使用的 LFS 版本。运行以下命令以创建该文件：</para>

<screen revision="systemd" format="linespecific"><userinput moreinfo="none">echo 8.4-systemd &gt; /etc/lfs-release</userinput></screen>

  <para>推荐遵守 Linux Standards Base (LSB)，建立文件以显示当前系统的完整信息。运行以下命令新建此文件：</para>




<screen revision="systemd" format="linespecific"><userinput moreinfo="none">cat &gt; /etc/lsb-release &lt;&lt; "EOF"
DISTRIB_ID="Linux From Scratch"
DISTRIB_RELEASE="8.4-systemd"
DISTRIB_CODENAME="&lt;your name here&gt;"
DISTRIB_DESCRIPTION="Linux From Scratch"
EOF</userinput></screen>

  <para>你可以在「DISTRIB_CODENAME」字段填写一些特别的字符来彰显「你的」系统的与众不同！</para>

</sect1>
  <sect1 id="ch-finish-getcounted">
  <?dbhtml filename="getcounted.html"?>

  <title>为 LFS 用户数添砖加瓦</title>

  <para>截至此刻，你已经读完了这本书。你想要为 LFS 用户数添砖加瓦吗？赶快点击鼠标访问 <ulink url="http://www.linuxfromscratch.org/cgi-bin/lfscounter.php"/> 输入用户名和第一次使用的 LFS 版本注册成为 LFS 用户吧。</para>

  <para>赶快重启到 LFS 吧！</para>

</sect1>
  <sect1 id="ch-finish-reboot">
  <?dbhtml filename="reboot.html"?>

  <title>重启系统</title>

  <para>至此，所有的软件都已安装完毕，是时候重启你的电脑了。然而，你也应该注意一些事情。通过学习本书建立起来的系统属于最小系统，这也就意味着可能会缺失一些你需要的功能。就是说你还需要做些事情。当重启进入你的新 LFS 中时，这是一个在当前的 chroot 环境中安装一些 BLFS 书中的额外软件包的好时机。以下给出了一些建议：</para>

  <itemizedlist>

    <listitem><para>文本模式的浏览器，例如 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/basicnet/lynx.html">Lynx</ulink>，可以在虚拟终端中访问这本 BLFS 书，以进行后续的编译打包工作。</para></listitem>

    <listitem><para><ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/general/gpm.html">GPM（GPM：一个支持控制台和 xterm 的鼠标服务）</ulink> 软件包可以让你在虚拟终端中更方便的执行复制/粘贴工作。</para></listitem>

    <listitem><para>如果静态 IP 配置不能很好的适用于你当前环境的网络配置，可以安装 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/basicnet/dhcpcd.html">dhcpcd</ulink> 或者是 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/basicnet/dhcp.html">dhcp</ulink> 的客户端部分来解决。</para></listitem>

    <listitem><para>安装 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/sudo.html">sudo</ulink>，以便在非 root 用户环境下编译软件包，且可以很轻松的在新系统中安装编译出来的软件。</para></listitem>

    <listitem><para>如果你想要在舒适的 GUI 环境远程访问新系统，请安装 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/openssh.html">openssh</ulink> 及其依赖包 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/openssl.html">openssl</ulink>。
    </para></listitem>

    <listitem><para>为了更加便利的从网络中下载文件，请安装 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/basicnet/wget.html">wget</ulink>。
    </para></listitem>

    <listitem><para>如果你有 GUID 分区表（GPT）类型的磁盘，你也许需要 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/gptfdisk.html">gptfdisk</ulink> 或是 <ulink url="http://www.linuxfromscratch.org/blfs/view/8.4/postlfs/parted.html">parted</ulink> 。
    </para></listitem>

    <listitem><para>最后，检查以下的配置文件是不是都是正确的吧。</para>

      <itemizedlist>
        <listitem><para>/etc/bashrc                  </para></listitem>
        <listitem><para>/etc/dircolors               </para></listitem>
        <listitem><para>/etc/fstab                   </para></listitem>
        <listitem><para>/etc/hosts                   </para></listitem>
        <listitem><para>/etc/inputrc                 </para></listitem>
        <listitem><para>/etc/profile                 </para></listitem>
        <listitem><para>/etc/resolv.conf             </para></listitem>
        <listitem><para>/etc/vimrc                   </para></listitem>
        <listitem><para>/root/.bash_profile          </para></listitem>
        <listitem><para>/root/.bashrc                </para></listitem>
        
        
      </itemizedlist>
    </listitem>
  </itemizedlist>

  <para>辛苦了那么久，是该初次启动我们崭新的 LFS 系统的时候了！首先，请退出 chroot 环境：</para>

<screen format="linespecific"><userinput moreinfo="none">logout</userinput></screen>

  <para>然后卸载虚拟文件系统：</para>

<screen format="linespecific"><userinput moreinfo="none">umount -v $LFS/dev/pts
umount -v $LFS/dev
umount -v $LFS/run
umount -v $LFS/proc
umount -v $LFS/sys</userinput></screen>

  <para>卸载 LFS 文件系统本身：</para>

<screen format="linespecific"><userinput moreinfo="none">umount -v $LFS</userinput></screen>

  <para>如果还建立了其它的挂载点，请在卸载 LFS 文件系统之前先卸载它们：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">umount -v $LFS/usr
umount -v $LFS/home
umount -v $LFS</userinput></screen>

  <para>至此，重启系统吧：</para>

<screen role="nodump" format="linespecific"><userinput moreinfo="none">shutdown -r now</userinput></screen>

  <para>这里假设 GRUB 引导器已经如前文所述安装完毕且配置正确，启动项也已经自动设置为 <emphasis>LFS 8.4</emphasis>。</para>

  <para>重启后，LFS 便已经可以使用了，你可以安装一些其它的软件以满足自己的需求。</para>

</sect1>
  <sect1 id="ch-finish-whatnow">
  <?dbhtml filename="whatnow.html"?>

  <title>接下来做什么呢？</title>

  <para>十分感谢你耐心的阅读这本 LFS 书，我们十分期待本书能够为你构建系统带来一点点的帮助。</para>

  <para>我猜，你现在一定很开心——LFS系统已经安装完成。「但是，下面该作些什么呢？」不用担心，我们早已经帮你准备好以下资源！</para>

  <itemizedlist>

    <listitem>
      <para>维护</para>

      <para>定期检查软件的 bug 和安全公告。因为在从源码构建出 LFS 之后，你便应该养成经常去查看这些报告的好习惯。有关查询的去处，网上倒是有一些不错的资源，这里列举几个：</para>

      <itemizedlist>

        <listitem>
          <para><ulink url="http://www.cert.org/">CERT</ulink>（计算机应急响应小组）</para>

          <para>CERT 有一个邮件列表，专门公示各种操作系统和应用程序的安全警报。订阅信息请点击此链接查看：<ulink url="http://www.us-cert.gov/cas/signup.html"/>.</para>
        </listitem>

        <listitem>
          <para>Bugtraq</para>

          <para>Bugtraq 是一个专门公示计算机安全的邮件列表。它公示新发现的安全问题，偶尔还会尽可能的提出修补方案。订阅信息请点击此链接查看：<ulink url="http://www.securityfocus.com/archive"/>.</para>
        </listitem>

      </itemizedlist>
    </listitem>

    <listitem>
      <para>Beyond Linux From Scratch</para>

      <para>Beyond Linux From Scratch（BLFS）涵盖了比 LFS 书多得多的应用程序。BLFS 项目主页是： <ulink url="http://www.linuxfromscratch.org/blfs/"/>.</para>
    </listitem>

    <listitem>
      <para>LFS Hints</para>

      <para> LFS Hints 是由 LFS 社区的志愿者提交的教育文集。有关信息访问以下网址取得： <ulink url="http://www.linuxfromscratch.org/hints/list.html"/>.</para>
    </listitem>

    <listitem>
      <para>邮件列表</para>

      <para>有几个 LFS 相关的邮件列表，在你需要的时候可以订阅，也可通过它获得最新的发展动态，对项目作出力所能及的贡献等等。查看 <xref linkend="ch-intro-maillists"/> 可以获得更多的信息。</para>
    </listitem>

    <listitem>
      <para>The Linux Documentation Project（TLDP，Linux 文档项目）</para>

      <para>Linux 文档项目（TLDP）的目标是通过协作来完善 Linux 文档中的所有不足。TLDP 已经完成了大量的 HOWTO、指南和 man 帮助页。它的网站是：<ulink url="http://www.tldp.org/"/>.</para>
    </listitem>

  </itemizedlist>

</sect1>

</chapter>
</part>

<part id="part4">
<title>附录</title>
<?dbhtml filename="part4.html"?>
<appendix id="appendixa" xreflabel="&#x9644;&#x5F55; A" xml:base="appendices/acronymlist.xml">
  <?dbhtml dir="appendices"?>
  <?dbhtml filename="acronymlist.html"?>

  <title>缩写和术语</title>

  <variablelist>
    <?dbfo list-presentation="list"?>
    <?dbhtml list-presentation="table"?>

    <varlistentry>
      <term><emphasis role="bold">ABI</emphasis></term>
      <listitem>
        <para>Application Binary Interface（应用程序二进制接口）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ALFS</emphasis></term>
      <listitem>
        <para>Automated Linux From Scratch （自动化 LFS）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">API</emphasis></term>
      <listitem>
        <para>Application Programming Interface （应用程序设计接口）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ASCII</emphasis></term>
      <listitem>
        <para>American Standard Code for Information Interchange （美国信息交换标准代码）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">BIOS</emphasis></term>
      <listitem>
        <para>Basic Input/Output System （基本输入/输出系统）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">BLFS</emphasis></term>
      <listitem>
        <para>Beyond Linux From Scratch</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">BSD</emphasis></term>
      <listitem>
        <para>Berkeley Software Distribution （伯克利软件发行版）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">chroot</emphasis></term>
      <listitem>
        <para>change root （更改根目录）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">CMOS</emphasis></term>
      <listitem>
        <para>Complementary Metal Oxide Semiconductor （互补金属氧化物半导体）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">COS</emphasis></term>
      <listitem>
        <para>Class Of Service （服务等级）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">CPU</emphasis></term>
      <listitem>
        <para>Central Processing Unit （中央处理单元）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">CRC</emphasis></term>
      <listitem>
        <para>Cyclic Redundancy Check （循环冗余码校验）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">CVS</emphasis></term>
      <listitem>
        <para>Concurrent Versions System （并发版本系统）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">DHCP</emphasis></term>
      <listitem>
        <para>Dynamic Host Configuration Protocol （动态主机配置协议）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">DNS</emphasis></term>
      <listitem>
        <para>Domain Name Service （域名服务）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">EGA</emphasis></term>
      <listitem>
        <para>Enhanced Graphics Adapter （增强型图形适配器）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ELF</emphasis></term>
      <listitem>
        <para>Executable and Linkable Format （可执行和可链接格式）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">EOF</emphasis></term>
      <listitem>
        <para>End of File （文件或数据流结束标志）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">EQN</emphasis></term>
      <listitem>
        <para>equation （相等）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ext2</emphasis></term>
      <listitem>
        <para>second extended file system （第二代可扩展文件系统)</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ext3</emphasis></term>
      <listitem>
        <para>third extended file system （第三代可扩展文件系统)</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ext4</emphasis></term>
      <listitem>
        <para>fourth extended file system （第四代可扩展文件系统)</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">FAQ</emphasis></term>
      <listitem>
        <para>Frequently Asked Questions （常见问题）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">FHS</emphasis></term>
      <listitem>
        <para>Filesystem Hierarchy Standard （文件系统层次结构标准）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">FIFO</emphasis></term>
      <listitem>
        <para>First-In, First Out （先进先出）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">FQDN</emphasis></term>
      <listitem>
        <para>Fully Qualified Domain Name （完全合格的域名）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">FTP</emphasis></term>
      <listitem>
        <para>File Transfer Protocol （文件传输协议）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">GB</emphasis></term>
      <listitem>
        <para>Gigabytes</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">GCC</emphasis></term>
      <listitem>
        <para>GNU Compiler Collection （GNU 编译器集合）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">GID</emphasis></term>
      <listitem>
        <para>Group Identifier （组标志符）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">GMT</emphasis></term>
      <listitem>
        <para>Greenwich Mean Time （格林威治标准时间）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">HTML</emphasis></term>
      <listitem>
        <para>Hypertext Markup Language （超文本标记语言）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IDE</emphasis></term>
      <listitem>
        <para>Integrated Drive Electronics （智能磁盘设备，集成电路设备）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IEEE</emphasis></term>
      <listitem>
        <para>Institute of Electrical and Electronic Engineers （电气与电子工程师学会）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IO</emphasis></term>
      <listitem>
        <para>Input/Output （输入/输出）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IP</emphasis></term>
      <listitem>
        <para>Internet Protocol （互联网协议）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IPC</emphasis></term>
      <listitem>
        <para>Inter-Process Communication （进程间通信）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">IRC</emphasis></term>
      <listitem>
        <para>Internet Relay Chat （互联网中继聊天）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ISO</emphasis></term>
      <listitem>
        <para>International Organization for Standardization （国际标准化组织）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">ISP</emphasis></term>
      <listitem>
        <para>Internet Service Provider （因特网服务提供者）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">KB</emphasis></term>
      <listitem>
        <para>Kilobytes</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">LED</emphasis></term>
      <listitem>
        <para>Light Emitting Diode （发光二极管）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">LFS</emphasis></term>
      <listitem>
        <para>Linux From Scratch</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">LSB</emphasis></term>
      <listitem>
        <para>Linux Standard Base</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">MB</emphasis></term>
      <listitem>
        <para>Megabytes</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">MBR</emphasis></term>
      <listitem>
        <para>Master Boot Record （主引导记录）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">MD5</emphasis></term>
      <listitem>
        <para>Message Digest 5 （信息摘要算法第五版）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">NIC</emphasis></term>
      <listitem>
        <para>Network Interface Card （网络接口卡）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">NLS</emphasis></term>
      <listitem>
        <para>Native Language Support （本地语言支持）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">NNTP</emphasis></term>
      <listitem>
        <para>Network News Transport Protocol （网络新闻传输协议）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">NPTL</emphasis></term>
      <listitem>
        <para>Native POSIX Threading Library （本地 POSIX 线程库）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">OSS</emphasis></term>
      <listitem>
        <para>Open Sound System （开放声音系统）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">PCH</emphasis></term>
      <listitem>
        <para>Pre-Compiled Headers （预编译头文件）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">PCRE</emphasis></term>
      <listitem>
        <para>Perl Compatible Regular Expression （Perl 兼容正则表达式）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">PID</emphasis></term>
      <listitem>
        <para>Process Identifier （进程标志符）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">PTY</emphasis></term>
      <listitem>
        <para>pseudo terminal （伪终端）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">QOS</emphasis></term>
      <listitem>
        <para>Quality Of Service （服务质量）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">RAM</emphasis></term>
      <listitem>
        <para>Random Access Memory （随机存取存储器）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">RPC</emphasis></term>
      <listitem>
        <para>Remote Procedure Call （远程程序调用）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">RTC</emphasis></term>
      <listitem>
        <para>Real Time Clock （实时时钟）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">SBU</emphasis></term>
      <listitem>
        <para>Standard Build Unit （标准编译单位）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">SCO</emphasis></term>
      <listitem>
        <para>The Santa Cruz Operation （圣克鲁斯操作）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">SHA1</emphasis></term>
      <listitem>
        <para>Secure-Hash Algorithm 1 （安全哈希算法1）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">TLDP</emphasis></term>
      <listitem>
        <para>The Linux Documentation Project （Linux 文档项目）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">TFTP</emphasis></term>
      <listitem>
        <para>Trivial File Transfer Protocol （简单文件传输协议）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">TLS</emphasis></term>
      <listitem>
        <para>Thread-Local Storage （线性本地存储）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">UID</emphasis></term>
      <listitem>
        <para>User Identifier （用户标志符）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">umask</emphasis></term>
      <listitem>
        <para>user file-creation mask （用户文件创建掩码）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">USB</emphasis></term>
      <listitem>
        <para>Universal Serial Bus （通用串行接口）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">UTC</emphasis></term>
      <listitem>
        <para>Coordinated Universal Time （通用协调时间）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">UUID</emphasis></term>
      <listitem>
        <para>Universally Unique Identifier （通用唯一标识符）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">VC</emphasis></term>
      <listitem>
        <para>Virtual Console （虚拟控制台）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">VGA</emphasis></term>
      <listitem>
        <para>Video Graphics Array （视频图形阵列）</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><emphasis role="bold">VT</emphasis></term>
      <listitem>
        <para>Virtual Terminal （虚拟终端）</para>
      </listitem>
    </varlistentry>

  </variablelist>

</appendix>
<appendix id="appendixb" xreflabel="&#x9644;&#x5F55; B" xml:base="appendices/acknowledgments.xml">
  <?dbhtml dir="appendices"?>
  <?dbhtml filename="acknowledgments.html"?>

  <title>致谢</title>

  <para>我们十分感谢下列为 Linux From Scratch 项目做出了贡献的贡献者和组织。</para>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:gerard@linuxfromscratch.org">Gerard Beekmans</ulink> &lt;gerard@linuxfromscratch.org&gt; – LFS 创始人</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:bdubbs@linuxfromscratch.org">Bruce Dubbs</ulink> &lt;bdubbs@linuxfromscratch.org&gt; – LFS 管理编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jim@linuxfromscratch.org">Jim
      Gifford</ulink> &lt;jim@linuxfromscratch.org&gt; – CLFS 项目共同负责人</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:pierre@linuxfromscratch.org">Pierre Labastie</ulink>
      &lt;pierre@linuxfromscratch.org&gt; – BLFS 编辑和 ALFS 负责人</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:dj@linuxfromscratch.org">DJ Lucas</ulink>
      &lt;dj@linuxfromscratch.org&gt; – LFS 和 BLFS 编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:ken@linuxfromscratch.org">Ken Moffat</ulink>
      &lt;ken@linuxfromscratch.org&gt; – BLFS 编辑</para>
    </listitem>

    <listitem>
      <para>在 LFS 和 BLFS 的邮件列表里还有无数同志为本书的发布帮过忙，他们提供建议，帮忙测试，提交问题报告和指令，以及分享他们安装各种软件包的经验。</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect2">翻译</bridgehead>

  <!-- LCTT -->
  <bridgehead renderas="sect3">简体中文</bridgehead>

    <itemizedlist>

    <listitem>
      <para><ulink url="https://linux.cn/lctt/">Linux 中国 - LCTT - LFS 翻译小组</ulink></para>

      <itemizedlist>

        <listitem>
          <para>
            <ulink url="https://github.com/wxy">wxy</ulink>，
            <ulink url="https://github.com/ictlyh">ictlyh</ulink>，
            <ulink url="https://github.com/dongfengweixiao">dongfengweixiao</ulink>，
            <ulink url="https://github.com/zpl1025">zpl1025</ulink>，
            <ulink url="https://github.com/H-mudcup">H-mudcup</ulink>，
            <ulink url="https://github.com/Yuking-net">Yuking-net</ulink>，
            <ulink url="https://github.com/kevinSJ">kevinSJ</ulink>,
            <ulink url="https://github.com/martin2011qi">martin2011qi</ulink>，
            <ulink url="https://github.com/vizv">vizv</ulink>，
            <ulink url="https://github.com/strugglingyouth">strugglingyouth</ulink>，
            <ulink url="https://github.com/Athenacle">Athenacle</ulink>，
            <ulink url="https://github.com/haoqixu">haoqixu</ulink>，
            <ulink url="https://github.com/zytrenren">zytrenren</ulink>，
            <ulink url="https://github.com/ReyRen">ReyRen</ulink>
          </para>
        </listitem>

      </itemizedlist>
    </listitem>

  </itemizedlist>
  <!-- LCTT -->

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:macana@macana-es.com">Manuel Canales
      Esparcia</ulink> &lt;macana@macana-es.com&gt; – 西班牙语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:johan@linuxfromscratch.org">Johan
      Lenglet</ulink> &lt;johan@linuxfromscratch.org&gt; – 2008 年以前的 LFS 法语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jmengual@linuxfromscratch.org">Jean-Philippe 
      Mengual </ulink> &lt;jmengual@linuxfromscratch.org&gt; – 2008-2016 年的 LFS 法语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jlepiller@linuxfromscratch.org">Julien 
      Lepiller </ulink> &lt;jlepiller@linuxfromscratch.org&gt; – 2017 年至今的 LFS 法语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:lizardo@linuxfromscratch.org">Anderson
      Lizardo</ulink> &lt;lizardo@linuxfromscratch.org&gt; –
      LFS 葡萄牙语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:tr@erdfunkstelle.de">Thomas
      Reitelbach </ulink> &lt;tr@erdfunkstelle.de&gt; – LFS 德语翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:info@linuxfromscratch.org.ru">Anton Maisak</ulink> 
      &lt;info@linuxfromscratch.org.ru&gt; – LFS 俄罗斯翻译项目</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:helen@linuxfromscratch.org.ru">Elena Shevcova</ulink> 
      &lt;helen@linuxfromscratch.org.ru&gt; – LFS 俄罗斯翻译项目</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect2">镜像维护者</bridgehead>

  <bridgehead renderas="sect3">北美镜像</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:scott@osuosl.org">Scott Kveton</ulink>
      &lt;scott@osuosl.org&gt; – lfs.oregonstate.edu 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:lost@l-w.net">William Astle</ulink>
      &lt;lost@l-w.net&gt; – ca.linuxfromscratch.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:eujon.sellers@gmail.com">Eujon Sellers</ulink>
      &lt;jpolen@rackspace.com&gt; – lfs.introspeed.com 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:justin@knierim.org">Justin Knierim</ulink>
      &lt;tim@idge.net&gt; – lfs-matrix.net 镜像</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect3">南美镜像</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:manuel@linuxfromscratch.org">Manuel
      Canales Esparcia</ulink> &lt;manuel@linuxfromscratch.org&gt; –
      lfsmirror.lfs-es.info 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:lfalcon@thymbra.com">Luis Falcon</ulink>
      &lt;Luis Falcon&gt; – torredehanoi.org 镜像</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect3">欧洲镜像</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:guido@primerelay.net">Guido Passet</ulink>
      &lt;guido@primerelay.net&gt; – nl.linuxfromscratch.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:baafie@planet.nl">Bastiaan Jacques</ulink>
      &lt;baafie@planet.nl&gt; – lfs.pagefault.net 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:sven.cranshoff@lineo.be">Sven Cranshoff</ulink>
      &lt;sven.cranshoff@lineo.be&gt; – lfs.lineo.be 镜像</para>
    </listitem>

    <listitem>
      <para>Scarlet Belgium – lfs.scarlet.be 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:info@aliensoft.org">Sebastian Faulborn</ulink>
      &lt;info@aliensoft.org&gt; – lfs.aliensoft.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:stuart@dontuse.ms">Stuart Fox</ulink>
      &lt;stuart@dontuse.ms&gt; – lfs.dontuse.ms 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:admin@realhost.de">Ralf Uhlemann</ulink>
      &lt;admin@realhost.de&gt; – lfs.oss-mirror.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:Antonin.Sprinzl@tuwien.ac.at">Antonin
      Sprinzl</ulink> &lt;Antonin.Sprinzl@tuwien.ac.at&gt; –
      at.linuxfromscratch.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:fredan-lfs@fredan.org">Fredrik
      Danerklint</ulink> &lt;fredan-lfs@fredan.org&gt; –
      se.linuxfromscratch.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:franck@linuxpourtous.com">Franck</ulink>
      &lt;franck@linuxpourtous.com&gt; – lfs.linuxpourtous.com 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:baque@cict.fr">Philippe Baque</ulink>
      &lt;baque@cict.fr&gt; – lfs.cict.fr 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:gyouja@pilgrims.ru">Vitaly Chekasin</ulink>
      &lt;gyouja@pilgrims.ru&gt; – lfs.pilgrims.ru 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:kontakt@wankoo.org">Benjamin Heil</ulink>
      &lt;kontakt@wankoo.org&gt; – lfs.wankoo.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:info@linuxfromscratch.org.ru">Anton Maisak</ulink>
      &lt;info@linuxfromscratch.org.ru&gt; – linuxfromscratch.org.ru 镜像</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect3">亚洲镜像</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:satit@wbac.ac.th">Satit Phermsawang</ulink>
      &lt;satit@wbac.ac.th&gt; – lfs.phayoune.org 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:info@shizu-net.jp">Shizunet Co.,Ltd.</ulink>
      &lt;info@shizu-net.jp&gt; – lfs.mirror.shizu-net.jp 镜像</para>
    </listitem>

    <listitem>
      <para><ulink url="http://www.initworld.com/">Init World</ulink>
      &lt;http://www.initworld.com/&gt; – lfs.initworld.com 镜像</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect3">澳大利亚镜像</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:jason@dstc.edu.au">Jason Andrade</ulink>
      &lt;jason@dstc.edu.au&gt; – au.linuxfromscratch.org 镜像</para>
    </listitem>

  </itemizedlist>

  <bridgehead renderas="sect2">前项目组成员</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:theladyskye@linuxfromscratch.org">Christine
      Barczak</ulink> &lt;theladyskye@linuxfromscratch.org&gt; – LFS 手册编辑</para>
    </listitem>

    <listitem>
      <para>Archaic
      &lt;archaic@linuxfromscratch.org&gt; – LFS 技术作家/编辑，HLFS 项目负责人，BLFS 编辑，Hints and Patches 项目维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:matthew@linuxfromscratch.org">Matthew
      Burgess</ulink> &lt;matthew@linuxfromscratch.org&gt; –
      LFS 项目负责人，LFS 技术作家/编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:nathan@linuxfromscratch.org">Nathan
      Coulson</ulink> &lt;nathan@linuxfromscratch.org&gt; –
      LFS-Bootscripts 版本维护者</para>
    </listitem>

    <listitem>
      <para>Timothy Bauscher</para>
    </listitem>

    <listitem>
      <para>Robert Briggs</para>
    </listitem>

    <listitem>
      <para>Ian Chilton</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jeroen@linuxfromscratch.org">Jeroen
      Coumans</ulink> &lt;jeroen@linuxfromscratch.org&gt; – 网站开发者，FAQ 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:manuel@linuxfromscratch.org">Manuel
      Canales Esparcia</ulink> &lt;manuel@linuxfromscratch.org&gt; –
      LFS/BLFS/HLFS XML 和 XSL 版本维护者</para>
    </listitem>

    <listitem>
      <para>Alex Groenewoud – LFS 技术作家</para>
    </listitem>

    <listitem>
      <para>Marc Heerdink</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jhuntwork@linuxfromscratch.org">Jeremy
      Huntwork</ulink> &lt;jhuntwork@linuxfromscratch.org&gt; – LFS 技术作家，LFS LiveCD 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:bryan@linuxfromscratch.org">Bryan
      Kadzban</ulink> &lt;bryan@linuxfromscratch.org&gt; – LFS
      技术作家</para>
    </listitem>

    <listitem>
      <para>Mark Hymers</para>
    </listitem>

    <listitem><para>Seth W. Klein – FAQ 维护者</para></listitem>

    <listitem>
      <para><ulink url="mailto:nicholas@linuxfromscratch.org">Nicholas
      Leippe</ulink> &lt;nicholas@linuxfromscratch.org&gt; – Wiki 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:lizardo@linuxfromscratch.org">Anderson
      Lizardo</ulink> &lt;lizardo@linuxfromscratch.org&gt; – 网站 Backend-Scripts 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:randy@linuxfromscratch.org">Randy
      McMurchy</ulink> &lt;randy@linuxfromscratch.org&gt; – BLFS 项目负责人，LFS 编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:dnicholson@linuxfromscratch.org">Dan
      Nicholson</ulink> &lt;dnicholson@linuxfromscratch.org&gt; – LFS 和 BLFS 编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:alexander@linuxfromscratch.org">Alexander
      E. Patrakov</ulink> &lt;alexander@linuxfromscratch.org&gt; – LFS 技术作家，LFS 国际化编辑，LFS LiveCD 维护者</para>
    </listitem>

    <listitem>
      <para>Simon Perreault</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:scot@linuxfromscratch.org">Scot Mc
      Pherson</ulink> &lt;scot@linuxfromscratch.org&gt; – LFS NNTP Gateway 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:renodr@linuxfromscratch.org">Douglas R. Reno</ulink>
      &lt;renodr@linuxfromscratch.org&gt; – systemd 编辑</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:ryan@linuxfromscratch.org">Ryan
      Oliver</ulink> &lt;ryan@linuxfromscratch.org&gt; – CLFS 项目联合负责人</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:gschafer@zip.com.au">Greg Schafer</ulink>
      &lt;gschafer@zip.com.au&gt; – LFS 技术作家，下一代 64 位模式构建模型架构师</para>
    </listitem>

    <listitem>
      <para>Jesse Tie-Ten-Quee – LFS 技术作家</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jwrober@linuxfromscratch.org">James
      Robertson</ulink> &lt;jwrober@linuxfromscratch.org&gt; – Bugzilla 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:tushar@linuxfromscratch.org">Tushar
      Teredesai</ulink> &lt;tushar@linuxfromscratch.org&gt; – BLFS 手册编辑，Hints and Patches 项目负责人</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:jeremy@linuxfromscratch.org">Jeremy
      Utley</ulink> &lt;jeremy@linuxfromscratch.org&gt; – LFS 技术作家，Bugzilla 维护者，LFS-Bootscripts 维护者</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:zwinkles@gmail.com">Zack Winkles</ulink>
      &lt;zwinkles@gmail.com&gt; – LFS 技术作家</para>
    </listitem>

  </itemizedlist>

<!--
  <bridgehead renderas="sect2">A very special thank you to our
  donators</bridgehead>

  <itemizedlist>

    <listitem>
      <para><ulink url="mailto:dean@vipersoft.co.uk">Dean Benson</ulink>
      &lt;dean@vipersoft.co.uk&gt; for several monetary contributions</para>
    </listitem>

    <listitem>
      <para><ulink url="mailto:hrx@hrxnet.de">Hagen Herrschaft</ulink>
      &lt;hrx@hrxnet.de&gt; for donating a 2.2 GHz P4 system, now running
      under the name of Lorien</para>
    </listitem>

    <listitem>
      <para><ulink url="http://www.seocompany.ca/">SEO Company Canada</ulink>
      supports Open Source projects and different Linux distributions</para>
    </listitem>

    <listitem>
      <para><ulink url="http://www.vasoftware.com">VA Software</ulink> who,
      on behalf of <ulink url="http://www.linux.com">Linux.com</ulink>,
      donated a VA Linux 420 (former StartX SP2) workstation</para>
    </listitem>

    <listitem>
      <para>Mark Stone for donating Belgarath, the first linuxfromscratch.org
      server</para>
    </listitem>

  </itemizedlist>
-->
</appendix>
<appendix id="appendixc" xreflabel="&#x9644;&#x5F55; C" xml:base="appendices/dependencies.xml">
  <?dbhtml dir="appendices"?>
  <?dbhtml filename="dependencies.html"?>

  <title>依赖关系</title>

  <para>LFS 中构建或安装的每一个包或多或少都会依赖于其它的包，甚至有些包甚至是循环依赖关系：第一个包依赖于第二个包，反过来，第二个包的生成或者是安装又需要第 一个包。因为存在这些依赖关系，所以在构建 LFS 系统的时候，软件包的编译或安装的顺序是十分重要的。本章的目的就是告知用户在构建 LFS 时每一个包的依赖项。</para>

  <para>对于所有需要编译的软件包，我们列举出三种或者四种类型的依赖。第一种类型是「安装必选依赖」，否则在编译和安装的时候会出现问题。第二类是「测试套件依赖」，假如运行一些测试套件，除了第一类的必须安装外，第二类也需要安装。第三类是「必须之前安装」，此类需要在编译和安装之前就安装。在大多数情况下，是因为它们软件包中的脚本包含有到二进制文件的硬编码。如果不按照顺序编译它们，将会导致 /tools/bin/"binary" 路径变为真实路径写入脚本，然后安装到最终系统中去，这显然是不合适的。（译者注：这句话写的不是太清楚，大概解释一下：在真实系统中，可能会在某些脚本 中出现这样的路径信息：/usr/bin/vi，但是假如因为安装顺序的问题，这个路径就有可能变成 /tools/usr/bin/vi，最终导致脚本不能正常的运行，这显然是错误的。）</para>

  <para>最后一类提及的「可供选择依赖」，安装方法在此文档类并没有提及，但是这些程序往往对用户来说又都是极其有用。这些软件包可能又有属于自己的「安装必选依赖」或者是「可用选择依赖」。对于这些依赖关系，推荐的做法是在学习完本书之后回到重建 LFS 包。在大多数情况下，重新安装的问题都记录在 BLFS 中。</para>

<!-- Begin Acl dependency info -->
  <bridgehead renderas="sect2" id="acl-dep">Acl</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Attr, Bash, Binutils, Coreutils, GCC, Gettext, Grep, M4, Make,
          Perl, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Automake, Diffutils, Findutils, 和 Libtool</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Coreutils, Sed, Tar, 和 Vim</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Attr dependency info -->
  <bridgehead renderas="sect2" id="attr-dep">Attr</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Binutils, Coreutils, GCC, Gettext, Grep, M4, Make,
          Perl, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Automake, Diffutils, Findutils, 和 Libtool</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Acl 和 Libcap</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Autoconf dependency info -->
  <bridgehead renderas="sect2" id="autoconf-dep">Autoconf</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Coreutils, Grep, M4, Make, Perl, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Automake, Diffutils, Findutils, GCC, 和 Libtool</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Automake</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Emacs</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Automake dependency info -->
  <bridgehead renderas="sect2" id="automake-dep">Automake</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Autoconf, Bash, Coreutils, Gettext, Grep, M4, Make, Perl,
          Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Binutils, Bison, Bzip2, DejaGNU, Diffutils, Expect, Findutils,
          Flex, GCC, Gettext, Gzip, Libtool, 和 Tar</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Bash dependency info -->
  <bridgehead renderas="sect2" id="bash-dep">Bash</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Binutils, Bison, Coreutils, Diffutils, Gawk, GCC, Glibc,
          Grep, Make, Ncurses, Patch, Readline, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Shadow</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Xorg</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Bc dependency info -->
  <bridgehead renderas="sect2" id="bc-dep">Bc</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Binutils, Bison, Coreutils, GCC, Glibc,
          Grep, Make, 和 Readline</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Gawk</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Linux Kernel</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Binutils dependency info -->
  <bridgehead renderas="sect2" id="binutils-dep">Binutils</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, File, Gawk, GCC, Glibc,
         Grep, Make, Perl, Sed, Texinfo 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>DejaGNU 和 Expect</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Bison dependency info -->
  <bridgehead renderas="sect2" id="bison-dep">Bison</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc,
         Grep, M4, Make, Perl, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils, Findutils, 和 Flex</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Kbd 和 Tar</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Doxygen (test suite)</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Bzip2 dependency info -->
  <bridgehead renderas="sect2" id="bzip2-dep">Bzip2</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Glibc, Make,
         和 Patch</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Check dependency info -->
  <bridgehead renderas="sect2" id="check-dep">Check</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>GCC, Grep, Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Coreutils dependency info -->
  <bridgehead renderas="sect2" id="coreutils-dep">Coreutils</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, GMP, Grep, Make,
         Patch, Perl, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils, E2fsprogs, Findutils, Shadow, 和 Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Bash, Diffutils, Eudev, Findutils, 和 Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Perl Expect 和 IO:Tty modules (for test suite)</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin D-Bus dependency info -->
<!--
  <bridgehead renderas="sect2" id="dbus-dep">D-Bus</bridgehead>

      <segmentedlist>
        <segtitle>&dependencies;</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         Make, Sed, 和 Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>&testsuites;</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>&before;</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>&external;</segtitle>

        <seglistitem>
          <seg>Xorg Libs</seg>
        </seglistitem>
      </segmentedlist>
-->
<!-- Begin DejaGNU dependency info -->
  <bridgehead renderas="sect2" id="dejagnu-dep">DejaGNU</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Coreutils, Diffutils, GCC, Grep, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Diffutils dependency info -->
  <bridgehead renderas="sect2" id="diffutils-dep">Diffutils</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Binutils, Coreutils, Gawk, GCC, Gettext, Glibc, Grep,
          Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin E2fsprogs dependency info -->
  <bridgehead renderas="sect2" id="e2fsprogs-dep">E2fsprogs</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         Gzip, Make, Sed, Texinfo, 和 Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Procps-ng 和 Psmisc</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Eudev dependency info -->
  <bridgehead renderas="sect2" id="eudev-dep">Eudev</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep, Gperf,
         Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Expat dependency info -->
  <bridgehead renderas="sect2" id="expat-dep">Expat</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep,
         Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>XML::Parser</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Expect dependency info -->
  <bridgehead renderas="sect2" id="expect-dep">Expect</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Glibc, Grep, Make,
         Patch, Sed, 和 Tcl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin File dependency info -->
  <bridgehead renderas="sect2" id="file-dep">File</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
          <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
          Make, Sed, 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Findutils dependency info -->
  <bridgehead renderas="sect2" id="findutils-dep">Findutils</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep, Make,
         Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>DejaGNU, Diffutils, 和 Expect</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Flex dependency info -->
  <bridgehead renderas="sect2" id="flex-dep">Flex</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep, M4, Make,
         Patch, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Bison 和 Gawk</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>IPRoute2, Kbd, 和 Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Gawk dependency info -->
  <bridgehead renderas="sect2" id="gawk-dep">Gawk</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, GMP, Grep, Make,
         MPFR, Patch, Readline, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Gcc dependency info -->
  <bridgehead renderas="sect2" id="gcc-dep">Gcc</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Findutils, Gawk, GCC,
         Gettext, Glibc, GMP, Grep, M4, Make, MPC, MPFR, Patch, Perl, Sed, Tar,
         和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>DejaGNU, Expect, 和 Shadow</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg><ulink url="http://gcc.gnu.org/wiki/GNAT">GNAT</ulink> and 
               <ulink url="https://repo.or.cz/isl.git">ISL</ulink> 
          </seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin GDBM dependency info -->
  <bridgehead renderas="sect2" id="gdbm">GDBM</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Grep, Make, 
         和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Gettext dependency info -->
  <bridgehead renderas="sect2" id="gettext-dep">Gettext</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep, Make,
         Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils, Perl, 和 Tcl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Automake</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Glibc dependency info -->
  <bridgehead renderas="sect2" id="glibc-dep">Glibc</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Gettext,
         Grep, Gzip, Linux API Headers, Make, Perl, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>File</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin GMP dependency info -->
  <bridgehead renderas="sect2" id="gmp-dep">GMP</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         M4, Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>MPFR 和 GCC</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Gperf dependency info -->
  <bridgehead renderas="sect2" id="gperf-dep">Gperf</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils 和 Expect</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Grep dependency info -->
  <bridgehead renderas="sect2" id="grep-dep">Grep</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Gettext, Glibc, Grep,
         Make, Patch, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Gawk</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Pcre</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Groff dependency info -->
  <bridgehead renderas="sect2" id="groff-dep">Groff</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Bison, Coreutils,  Gawk, GCC, Glibc, Grep, Make,
         Patch, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Man-DB 和 Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>GPL Ghostscript</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin GRUB dependency info -->
  <bridgehead renderas="sect2" id="grub-dep">GRUB</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Bison, Coreutils, Diffutils, GCC, Gettext, Glibc,
         Grep, Make, Ncurses, Sed, Texinfo, 和 Xz</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Gzip dependency info -->
  <bridgehead renderas="sect2" id="gzip-dep">Gzip</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Grep, Make,
         Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils 和 Less</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Iana-Etc dependency info -->
  <bridgehead renderas="sect2" id="iana-etc-dep">Iana-Etc</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Coreutils, Gawk, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Inetutils dependency info -->
  <bridgehead renderas="sect2" id="inetutils-dep">Inetutils</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Grep, Make, Ncurses,
         Patch, Sed, Texinfo, 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Tar</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Intltool dependency info -->
  <bridgehead renderas="sect2" id="intltool-dep">Intltool</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Gawk, Glibc, Make, Perl, Sed, 和 XML::Parser</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin IProute2 dependency info -->
  <bridgehead renderas="sect2" id="iproute2-dep">IProute2</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Bison, Coreutils, Flex, GCC, Glibc, Make,
         和 Linux API Headers</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Kbd dependency info -->
  <bridgehead renderas="sect2" id="kbd-dep">Kbd</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Bison, Check, Coreutils, Flex, GCC, Gettext,
         Glibc, Gzip, Make, Patch, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Kmod dependency info -->
  <bridgehead renderas="sect2" id="kmod-dep">Kmod</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Bison, Coreutils, Flex, GCC, Gettext, Glibc,
         Gzip, Make, Sed, Xz-Utils, 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Eudev</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Less dependency info -->
  <bridgehead renderas="sect2" id="less-dep">Less</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Glibc, Grep, Make,
         Ncurses, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Gzip</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Pcre</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Libcap dependency info -->
  <bridgehead renderas="sect2" id="libcap-dep">Libcap</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Attr, Bash, Binutils, Coreutils, GCC, Glibc, Perl, Make,
         和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Linux-PAM</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Libelf dependency info -->
  <bridgehead renderas="sect2" id="libelf-dep">Libelf</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Linux Kernel</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Libffi dependency info -->
  <bridgehead renderas="sect2" id="libffi-dep">Libffi</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>DejaGnu</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Python</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Libpipeline dependency info -->
  <bridgehead renderas="sect2" id="libpipeline-dep">Libpipeline</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Check</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Libtool dependency info -->
  <bridgehead renderas="sect2" id="libtool-dep">Libtool</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Autoconf, Automake, 和 Findutils</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Linux Kernel dependency info -->
  <bridgehead renderas="sect2" id="linux-dep">Linux Kernel</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Bc, Binutils, Coreutils, Diffutils, Findutils, GCC, Glibc,
         Grep, Gzip, Kmod, Libelf, Make, Ncurses, OpenSSL, Perl, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin M4 dependency info -->
  <bridgehead renderas="sect2" id="m4-dep">M4</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Grep, Make, Sed, and
         Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Autoconf 和 Bison</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>libsigsegv</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Make dependency info -->
  <bridgehead renderas="sect2" id="make-dep">Make</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep,
         Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Perl 和 Procps-ng</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Man-DB dependency info -->
  <bridgehead renderas="sect2" id="man-db-dep">Man-DB</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Bzip2, Coreutils, Flex, GCC, GDBM, Gettext,
         Glibc, Grep, Groff, Gzip, Less, Libpipeline, Make, Sed, 和 Xz</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Man-Pages dependency info -->
  <bridgehead renderas="sect2" id="man-pages-dep">Man-Pages</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Coreutils, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Meson dependency info -->
  <bridgehead renderas="sect2" id="meson-dep">Meson</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Ninja 和 Python</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin MPC dependency info -->
  <bridgehead renderas="sect2" id="mpc-dep">MPC</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep, GMP,
         Make, MPFR, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>GCC</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin MPFR dependency info -->
  <bridgehead renderas="sect2" id="mpfr-dep">MPFR</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep, GMP,
         Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Gawk 和 GCC</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Ncurses dependency info -->
  <bridgehead renderas="sect2" id="ncurses-dep">Ncurses</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Gawk, GCC, Glibc, Grep,
         Make, Patch, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Bash, GRUB, Inetutils, Less, Procps-ng, Psmisc, Readline,
          Texinfo, Util-linux, 和 Vim</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Ninja dependency info -->
  <bridgehead renderas="sect2" id="ninja-dep">Ninja</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Binutils, Coreutils, Gcc, 和 Python</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Meson</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Asciidoc, Doxygen, Emacs, 和 re2c</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Openssl dependency info -->
  <bridgehead renderas="sect2" id="openssl-dep">Openssl</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Binutils, Coreutils, Gcc, Make, 和 Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Patch dependency info -->
  <bridgehead renderas="sect2" id="patch-dep">Patch</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Grep, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Ed</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Perl dependency info -->
  <bridgehead renderas="sect2" id="perl-dep">Perl</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, GDBM, Glibc, Grep,
         Groff, Make, Sed, 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Iana-Etc 和 Procps-ng</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Autoconf</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Pkg-config dependency info -->
  <bridgehead renderas="sect2" id="pkgconfig-dep">Pkg-config</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep, Make,
         Popt, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Kmod</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Popt dependency info -->
  <bridgehead renderas="sect2" id="popt-dep">Popt</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Pkg-config</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Procps dependency info -->
  <bridgehead renderas="sect2" id="procps-dep">Procps-ng</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Make, 和 Ncurses</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>DejaGNU</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Psmisc dependency info -->
  <bridgehead renderas="sect2" id="psmisc-dep">Psmisc</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep, Make,
         Ncurses, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Python dependency info -->
  <bridgehead renderas="sect2" id="python-dep">Python</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gdbm, Gettext, Glibc, Grep, 
         Libffi, Make, Ncurses, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>GDB 和 Valgrind</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Ninja</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Berkeley DB, OpenSSL, SQLite, 和 Tk</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Readline dependency info -->
  <bridgehead renderas="sect2" id="readline-dep">Readline</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Gawk, GCC, Glibc, Grep, Make, Ncurses,
         Patch, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Bash 和 Gawk</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Sed dependency info -->
  <bridgehead renderas="sect2" id="sed-dep">Sed</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep, Make,
         Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Diffutils 和 Gawk</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>E2fsprogs, File, Libtool, 和 Shadow</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Shadow dependency info -->
  <bridgehead renderas="sect2" id="shadow-dep">Shadow</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Findutils, Gawk, GCC,
         Gettext, Glibc, Grep, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Coreutils</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Acl, Attr, Cracklib, 和 PAM</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Sysklogd dependency info -->
  <bridgehead renderas="sect2" id="sysklogd-dep">Sysklogd</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Binutils, Coreutils, GCC, Glibc, Make, 和 Patch</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin systemd dependency info -->
  <bridgehead renderas="sect2" id="systemd-dep">systemd</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Acl, Attr, Bash, Binutils, Coreutils, Diffutils, Expat, Gawk,
         GCC, Glibc, Gperf, Grep, Intltool, Libcap,
         Make, Sed, 和 Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Sysvinit dependency info -->
  <bridgehead renderas="sect2" id="sysvinit-dep">Sysvinit</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Binutils, Coreutils, GCC, Glibc, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>No test suite available</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Tar dependency info -->
  <bridgehead renderas="sect2" id="tar-dep">Tar</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Acl, Attr, Bash, Binutils, Bison, Coreutils, GCC, Gettext, Glibc,
         Grep, Inetutils, Make, Sed, 和 Texinfo</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Autoconf, Diffutils, Findutils, Gawk, 和 Gzip</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Tcl dependency info -->
  <bridgehead renderas="sect2" id="tcl-dep">Tcl</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Glibc, Grep,
         Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Texinfo dependency info -->
  <bridgehead renderas="sect2" id="texinfo-dep">Texinfo</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Gettext, Glibc, Grep, Make,
         Ncurses, Patch, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Util-linux dependency info -->
  <bridgehead renderas="sect2" id="util-linux-dep">Util-linux</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, Eudev, Findutils, Gawk, GCC,
         Gettext, Glibc, Grep, Make, Ncurses, Sed, 和 Zlib</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg><ulink url="https://people.redhat.com/sgrubb/libcap-ng/">Libcap-ng</ulink></seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Vim dependency info -->
  <bridgehead renderas="sect2" id="vim-dep">Vim</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Acl, Attr, Bash, Binutils, Coreutils, Diffutils, GCC, Glibc,
         Grep, Make, Ncurses, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>Xorg, GTK+2, LessTif, Python, Tcl, Ruby, 和 GPM</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin XML::Parser dependency info -->
  <bridgehead renderas="sect2" id="xml-parser-dep">XML::Parser</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Expat, GCC, Glibc, Make, 和 Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>Perl</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Intltool</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Xz-utils dependency info -->
  <bridgehead renderas="sect2" id="xz-dep">Xz</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, Diffutils, GCC, Glibc, 和 Make</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>Eudev, GRUB, Kmod, 和 Man-DB</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

<!-- Begin Zlib dependency info -->
  <bridgehead renderas="sect2" id="zlib-dep">Zlib</bridgehead>

      <segmentedlist>
        <segtitle>安装必选依赖</segtitle>

        <seglistitem>
         <seg>Bash, Binutils, Coreutils, GCC, Glibc, Make, 和 Sed</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>测试套件依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>必须预先安装</segtitle>

        <seglistitem>
          <seg>File, Kmod, Perl, 和 Util-linux</seg>
        </seglistitem>
      </segmentedlist>

      <segmentedlist>
        <segtitle>可供选择依赖</segtitle>

        <seglistitem>
          <seg>None</seg>
        </seglistitem>
      </segmentedlist>

</appendix>

<!-- sysv only -->



<appendix id="Licenses" xreflabel="&#x9644;&#x5F55; E" xml:base="appendices/license.xml">
  <?dbhtml dir="appendices"?>
  <?dbhtml filename="licenses.html"?>

  <title>LFS Licenses</title>

  <para>This book is licensed under the Creative Commons
  Attribution-NonCommercial-ShareAlike 2.0 License.</para>

  <para>Computer instructions may be extracted from the book under the MIT
  License.</para>


  <sect1 id="CC" xreflabel="Creative Commons License">
  <?dbhtml filename="creat-comm.html"?>

  <title>Creative Commons License</title>

  <para role="title">Creative Commons Legal Code</para>

  <para role="title">Attribution-NonCommercial-ShareAlike 2.0</para>

  <important>
    <para>CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT
    PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN
    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN
    "AS-IS" BASIS.  CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE INFORMATION
    PROVIDED, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM ITS
    USE.</para>
  </important>

  <para role="title">License</para>

  <para>THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE
  COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS PROTECTED BY
  COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS
  AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.</para>

  <para>BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE
  BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS YOU THE RIGHTS
  CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND
  CONDITIONS.</para>

  <orderedlist inheritnum="ignore" continuation="restarts">
    <?dbfo label-width="1.5em"?>
    <listitem>
      <para>Definitions</para>

      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <para>"Collective Work" means a work, such as a periodical issue, anthology or
          encyclopedia, in which the Work in its entirety in unmodified form, along
          with a number of other contributions, constituting separate and independent
          works in themselves, are assembled into a collective whole. A work that
          constitutes a Collective Work will not be considered a Derivative Work (as
          defined below) for the purposes of this License.</para>
        </listitem>

        <listitem>
          <para>"Derivative Work" means a work based upon the Work or upon
          the Work and other pre-existing works, such as a translation, musical
          arrangement, dramatization, fictionalization, motion picture version, sound
          recording, art reproduction, abridgment, condensation, or any other form in
          which the Work may be recast, transformed, or adapted, except that a work
          that constitutes a Collective Work will not be considered a Derivative Work
          for the purpose of this License. For the avoidance of doubt, where the Work
          is a musical composition or sound recording, the synchronization of the Work
          in timed-relation with a moving image ("synching") will be considered a
          Derivative Work for the purpose of this License.</para>
        </listitem>

        <listitem>
          <para>"Licensor" means the individual or entity that offers the
          Work under the terms of this License.</para>
        </listitem>

        <listitem>
          <para>"Original Author" means the individual or entity who created
          the Work.</para>
        </listitem>

        <listitem>
          <para>"Work" means the copyrightable work of authorship offered
          under the terms of this License.</para>
        </listitem>

        <listitem>
          <para>"You" means an individual or entity exercising rights under
          this License who has not previously violated the terms of this License with
          respect to the Work, or who has received express permission from the
          Licensor to exercise rights under this License despite a previous
          violation.</para>
        </listitem>

        <listitem>
          <para>"License Elements" means the following high-level license
          attributes as selected by Licensor and indicated in the title of this
          License: Attribution, Noncommercial, ShareAlike.</para>
        </listitem>

      </orderedlist>
    </listitem>

    <listitem>
      <para>Fair Use Rights. Nothing in this license is intended to reduce,
      limit, or restrict any rights arising from fair use, first sale or other
      limitations on the exclusive rights of the copyright owner under copyright law
      or other applicable laws.</para>
    </listitem>


    <listitem>
      <para>License Grant. Subject to the terms and conditions of this
      License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive,
      perpetual (for the duration of the applicable copyright) license to exercise
      the rights in the Work as stated below:</para>

      <orderedlist inheritnum="ignore" continuation="restarts">

        <listitem>
          <para>to reproduce the Work, to incorporate the Work into one or
          more Collective Works, and to reproduce the Work as incorporated in the
          Collective Works;</para>
        </listitem>

        <listitem>
          <para>to create and reproduce Derivative Works;</para>
        </listitem>

        <listitem>
          <para>to distribute copies or phonorecords of, display publicly,
          perform publicly, and perform publicly by means of a digital audio
          transmission the Work including as incorporated in Collective
          Works;</para>
        </listitem>

        <listitem>
          <para>to distribute copies or phonorecords of, display publicly,
          perform publicly, and perform publicly by means of a digital audio
          transmission Derivative Works;</para>
        </listitem>

      </orderedlist>

      <para>The above rights may be exercised in all media and formats whether now
      known or hereafter devised. The above rights include the right to make such
      modifications as are technically necessary to exercise the rights in other
      media and formats. All rights not expressly granted by Licensor are hereby
      reserved, including but not limited to the rights set forth in Sections 4(e)
      and 4(f).</para>
    </listitem>

    <listitem>
      <para>Restrictions.The license granted in Section 3 above is
      expressly made subject to and limited by the following
      restrictions:</para>

      <orderedlist inheritnum="ignore" continuation="restarts">

        <listitem>
          <para>You may distribute, publicly display, publicly perform, or
          publicly digitally perform the Work only under the terms of this License, and
          You must include a copy of, or the Uniform Resource Identifier for, this
          License with every copy or phonorecord of the Work You distribute, publicly
          display, publicly perform, or publicly digitally perform. You may not offer
          or impose any terms on the Work that alter or restrict the terms of this
          License or the recipients' exercise of the rights granted hereunder. You may
          not sublicense the Work. You must keep intact all notices that refer to this
          License and to the disclaimer of warranties. You may not distribute, publicly
          display, publicly perform, or publicly digitally perform the Work with any
          technological measures that control access or use of the Work in a manner
          inconsistent with the terms of this License Agreement. The above applies to
          the Work as incorporated in a Collective Work, but this does not require the
          Collective Work apart from the Work itself to be made subject to the terms of
          this License. If You create a Collective Work, upon notice from any Licensor
          You must, to the extent practicable, remove from the Collective Work any
          reference to such Licensor or the Original Author, as requested. If You
          create a Derivative Work, upon notice from any Licensor You must, to the
          extent practicable, remove from the Derivative Work any reference to such
          Licensor or the Original Author, as requested.</para>
        </listitem>

        <listitem>
          <para>You may distribute, publicly display, publicly perform, or
          publicly digitally perform a Derivative Work only under the terms of this
          License, a later version of this License with the same License Elements as
          this License, or a Creative Commons iCommons license that contains the same
          License Elements as this License (e.g. Attribution-NonCommercial-ShareAlike
          2.0 Japan). You must include a copy of, or the Uniform Resource Identifier
          for, this License or other license specified in the previous sentence with
          every copy or phonorecord of each Derivative Work You distribute, publicly
          display, publicly perform, or publicly digitally perform. You may not offer
          or impose any terms on the Derivative Works that alter or restrict the terms
          of this License or the recipients' exercise of the rights granted hereunder,
          and You must keep intact all notices that refer to this License and to the
          disclaimer of warranties. You may not distribute, publicly display, publicly
          perform, or publicly digitally perform the Derivative Work with any
          technological measures that control access or use of the Work in a manner
          inconsistent with the terms of this License Agreement. The above applies to
          the Derivative Work as incorporated in a Collective Work, but this does not
          require the Collective Work apart from the Derivative Work itself to be made
          subject to the terms of this License.</para>
        </listitem>

        <listitem>
          <para>You may not exercise any of the rights granted to You in
          Section 3 above in any manner that is primarily intended for or directed
          toward commercial advantage or private monetary compensation. The exchange of
          the Work for other copyrighted works by means of digital file-sharing or
          otherwise shall not be considered to be intended for or directed toward
          commercial advantage or private monetary compensation, provided there is no
          payment of any monetary compensation in connection with the exchange of
          copyrighted works.</para>
        </listitem>

        <listitem>
          <para>If you distribute, publicly display, publicly perform, or
          publicly digitally perform the Work or any Derivative Works or Collective
          Works, You must keep intact all copyright notices for the Work and give the
          Original Author credit reasonable to the medium or means You are utilizing by
          conveying the name (or pseudonym if applicable) of the Original Author if
          supplied; the title of the Work if supplied; to the extent reasonably
          practicable, the Uniform Resource Identifier, if any, that Licensor specifies
          to be associated with the Work, unless such URI does not refer to the
          copyright notice or licensing information for the Work; and in the case of a
          Derivative Work, a credit identifying the use of the Work in the Derivative
          Work (e.g., "French translation of the Work by Original Author," or
          "Screenplay based on original Work by Original Author"). Such credit may be
          implemented in any reasonable manner; provided, however, that in the case of
          a Derivative Work or Collective Work, at a minimum such credit will appear
          where any other comparable authorship credit appears and in a manner at least
          as prominent as such other comparable authorship credit.</para>
        </listitem>


        <listitem>
          <para>For the avoidance of doubt, where the Work is a musical
          composition:</para>

          <orderedlist inheritnum="ignore" continuation="restarts">

            <listitem>
              <para>Performance Royalties Under Blanket Licenses. Licensor
              reserves the exclusive right to collect, whether individually or via a
              performance rights society (e.g. ASCAP, BMI, SESAC), royalties for the
              public performance or public digital performance (e.g. webcast) of the
              Work if that performance is primarily intended for or directed toward
              commercial advantage or private monetary compensation.</para>
            </listitem>

            <listitem>
              <para>Mechanical Rights and Statutory Royalties. Licensor
              reserves the exclusive right to collect, whether individually or via a
              music rights agency or designated agent (e.g. Harry Fox Agency),
              royalties    for any phonorecord You create from the Work ("cover
              version") and distribute, subject to the compulsory license created
              by 17 USC Section 115 of the US Copyright Act (or the equivalent in
              other jurisdictions), if Your distribution of such cover version is primarily
              intended for or directed toward commercial advantage or private monetary
              compensation.  6. Webcasting Rights and Statutory Royalties.  For the
              avoidance of doubt, where the Work is a sound recording, Licensor
              reserves the exclusive right to collect, whether individually or via a
              performance-rights society (e.g. SoundExchange), royalties for the public
              digital performance (e.g. webcast) of the Work, subject to the compulsory
              license created by 17 USC Section 114 of the US Copyright Act (or the
              equivalent in other jurisdictions), if Your public digital performance is
              primarily intended for or directed toward commercial advantage or private
              monetary compensation.</para>
            </listitem>

          </orderedlist>
        </listitem>

        <listitem>
          <para>Webcasting Rights and Statutory Royalties. For the
          avoidance of doubt, where the Work is a sound recording, Licensor reserves
          the exclusive right to collect, whether individually or via a
          performance-rights society (e.g.  SoundExchange), royalties for the public
          digital performance (e.g. webcast) of the Work, subject to the compulsory
          license created by 17 USC Section 114 of the US Copyright Act (or the
          equivalent in other jurisdictions), if Your public digital performance is
          primarily intended for or directed toward commercial advantage or private
          monetary compensation.</para>
        </listitem>

      </orderedlist>
    </listitem>

    <listitem>
      <para>Representations, Warranties and Disclaimer</para>

      <para>UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING, LICENSOR
      OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND
      CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING,
      WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY, FITNESS FOR A
      PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS,
      ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE.
      SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH
      EXCLUSION MAY NOT APPLY TO YOU.</para>
    </listitem>

    <listitem>
      <para>Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY
      APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY
      FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES
      ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN
      ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</para>
    </listitem>

    <listitem>
      <para>Termination</para>

      <orderedlist inheritnum="ignore" continuation="restarts">

        <listitem>
          <para>This License and the rights granted hereunder will terminate
          automatically upon any breach by You of the terms of this License.
          Individuals or entities who have received Derivative Works or Collective
          Works from You under this License, however, will not have their licenses
          terminated provided such individuals or entities remain in full compliance
          with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any
          termination of this License.</para>
        </listitem>

        <listitem>
          <para>Subject to the above terms and conditions, the license
          granted here is perpetual (for the duration of the applicable copyright in
          the Work).  Notwithstanding the above, Licensor reserves the right to release
          the Work under different license terms or to stop distributing the Work at
          any time; provided, however that any such election will not serve to withdraw
          this License (or any other license that has been, or is required to be,
          granted under the terms of this License), and this License will continue in
          full force and effect unless terminated as stated above.</para>
        </listitem>

      </orderedlist>
    </listitem>

    <listitem>
      <para>Miscellaneous</para>

      <orderedlist inheritnum="ignore" continuation="restarts">

        <listitem>
          <para>Each time You distribute or publicly digitally perform the
          Work or a Collective Work, the Licensor offers to the recipient a license to
          the Work on the same terms and conditions as the license granted to You under
          this License.</para>
        </listitem>

        <listitem>
          <para>Each time You distribute or publicly digitally perform a
          Derivative Work, Licensor offers to the recipient a license to the original
          Work on the same terms and conditions as the license granted to You under
          this License.</para>
        </listitem>

        <listitem>
          <para>If any provision of this License is invalid or unenforceable
          under applicable law, it shall not affect the validity or enforceability of
          the remainder of the terms of this License, and without further action by the
          parties to this agreement, such provision shall be reformed to the minimum
          extent necessary to make such provision valid and
          enforceable.</para>
        </listitem>

        <listitem>
          <para>No term or provision of this License shall be deemed waived
          and no breach consented to unless such waiver or consent shall be in writing
          and signed by the party to be charged with such waiver or
          consent.</para>
        </listitem>

        <listitem>
          <para>This License constitutes the entire agreement between the
          parties with respect to the Work licensed here. There are no understandings,
          agreements or representations with respect to the Work not specified here.
          Licensor shall not be bound by any additional provisions that may appear in
          any communication from You. This License may not be modified without the
          mutual written agreement of the Licensor and You.</para>
        </listitem>


      </orderedlist>
    </listitem>
  </orderedlist>

  <important>
    <para>Creative Commons is not a party to this License, and makes no warranty
    whatsoever in connection with the Work. Creative Commons will not be liable to
    You or any party on any legal theory for any damages whatsoever, including
    without limitation any general, special, incidental or consequential damages
    arising in connection to this license. Notwithstanding the foregoing two (2)
    sentences, if Creative Commons has expressly identified itself as the Licensor
    hereunder, it shall have all rights and obligations of Licensor.</para>

    <para>Except for the limited purpose of indicating to the public that the Work is
    licensed under the CCPL, neither party will use the trademark "Creative
    Commons" or any related trademark or logo of Creative Commons without the prior
    written consent of Creative Commons. Any permitted use will be in compliance
    with Creative Commons' then-current trademark usage guidelines, as may be
    published on its website or otherwise made available upon request from time to
    time.</para>

    <para>Creative Commons may be contacted at <ulink url="http://creativecommons.org/"/>.</para>
  </important>


</sect1>
  <sect1 id="MIT" xreflabel="MIT License">
  <?dbhtml filename="mit.html" ?>

  <title>The MIT License</title>

  <para>Copyright © 1999-2019 Gerard Beekmans</para>

  <para>Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:</para>

  <para>The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.</para>

  <para>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.</para>

</sect1>


</appendix>
</part>

<index/>

</book>
